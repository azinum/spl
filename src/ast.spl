// ast.spl

enum u64 (
  AstNone,
  AstRoot,
  AstValue,
  AstExpression,
  AstExprList,
  AstStatement,
  AstStatementList,
  AstBlockStatement,
  AstBinopExpression,
  AstUopExpression,
  AstConstStatement,
  AstLetStatement,
  AstFuncDefinition,
  AstFuncCall,
  AstParamList,
  AstAssignment,
  AstWhileStatement,
  AstIfStatement,
  AstType,
  AstSizeof,
  AstEnum,
  AstStruct,
  AstCastExpression,
  AstStaticAssert,
  AstArg,
  AstFieldAccess,

  MAX_AST_TYPE
);

let ast_type_str : cstr[MAX_AST_TYPE] = cast cstr[MAX_AST_TYPE] "";

// NOTE(lucas): it's VERY inefficient to use a constant number of internal nodes for the ast, but this will do for now
// TODO(lucas): come back here and rework all of this when the self hosted compiler is complete
const MAX_INTERNAL_NODE : u64 = 512; // how many nodes can each node hold?
const MAX_AST_NODE : u64 = * MAX_INTERNAL_NODE MAX_INTERNAL_NODE;

struct Ast (
  node  : ptr[MAX_INTERNAL_NODE],
  count : u64,
  type  : u64,
  token : Token,
  konst : u64,
  type_context_id : u64
);

let ast_node_memory : Ast[MAX_AST_NODE] = 0;
let ast_node : ptr = NULL;
let ast_node_end : ptr = NULL;

fn ast_create(type : u64) -> ptr {
  let node : ptr = ast_node;

  if < node ast_node_end {
    store64 @ast_node + sizeof Ast ast_node;

    store64 + node Ast.node 0;
    store64 + node Ast.count 0;
    store64 + node Ast.type type;
    store64 + node Ast.konst 0;
    store64 + node Ast.type_context_id UINT64_MAX;

    token_init(+ Ast.token node, "T_EOF", 5, T_EOF, l.filename, l.source);
  }
  else {
    assert(0, "ast node capacity reached\n");
    store64 @node NULL;
  }
  node;
}

fn ast_create_with_token(type : u64, token : ptr<Token>) -> ptr {
  let node = ast_create(type);
  memcpy(+ node Ast.token, token, sizeof Token);
  node;
}

fn ast_print_node(ast : any, fd : u64) -> none {
  let count = load64 + Ast.count ast;
  let type = load64 + Ast.type ast;
  let token = + Ast.token ast;
  let args : any = (
    count,
    type
  );
  dprintf(STDOUT_FILENO, "count = %d\ntype = %d\n", @args);
  token_print(cast ptr token);
}

fn ast_push(ast : ptr, node : ptr) -> none {
  assert(neq 0 ast, "null ast node\n");
  if neq 0 node {
    assert(< load64 + Ast.count ast MAX_INTERNAL_NODE, "internal node capacity reached\n");
    let count : ptr = + ast Ast.count;
    store64 + + ast Ast.node * load64 count sizeof any node;
    store64 count + 1 load64 count;
  }
}

fn ast_push_node(ast : ptr, type : u64, token : ptr) -> none {
  if eq ast NULL {
    assert(0, "invalid pointer (NULL) to ast\n");
  }
  let node : ptr = ast_create(type);
  memcpy(+ node Ast.token, token, sizeof Token);
  ast_push(ast, node);
}

fn ast_count(ast : any) -> u64 {
  let count = 1;
  let i = 0;
  while < i load64 + ast Ast.count {
    let node = load64 + + ast Ast.node * i sizeof any;
    store64 @count + count ast_count(node);
    store64 @i + 1 i;
  }
  count;
}

fn ast_child_count(ast : any) -> u64 load64 + Ast.count ast;

fn ast_print(ast : any, level : u64, fd : u64) -> none {
  if neq 0 ast {
    let tmp = tmp_it;
    let p = tmp_push_cstr;
    {
      let i = 0;
      while < i level {
        p("    ");
        store64 @i + 1 i;
      }
    }
    let type : u64 = load64 + ast Ast.type;
    let token : ptr = cast ptr + ast Ast.token;
    p("<");
    p(cast cstr load64 + @ast_type_str * type sizeof cstr);
    p(", ");
    p(cast cstr load64 + @token_type_str * load64 + token Token.type sizeof cstr);
    p(", ");
    tmp_push_u64(load64 + ast Ast.konst);
    p(">: `");
    tmp_push_str(load64 + token Token.buffer, load64 + token Token.length);
    p("`\n");
    putsn(fd, tmp, - tmp_it tmp);
    store64 @tmp_it tmp;
    {
      let i = 0;
      let count = load64 + ast Ast.count;
      while < i count {
        let node = load64 + + ast Ast.node * i sizeof any;
        ast_print(node, + 1 level, fd);
        store64 @i + 1 i;
      }
    }
  }
}

fn ast_init -> none {
  store64 + @ast_type_str * AstNone            sizeof cstr "None";
  store64 + @ast_type_str * AstRoot            sizeof cstr "Root";
  store64 + @ast_type_str * AstValue           sizeof cstr "Value";
  store64 + @ast_type_str * AstExpression      sizeof cstr "Expression";
  store64 + @ast_type_str * AstExprList        sizeof cstr "ExprList";
  store64 + @ast_type_str * AstStatement       sizeof cstr "Statement";
  store64 + @ast_type_str * AstStatementList   sizeof cstr "StatementList";
  store64 + @ast_type_str * AstBlockStatement  sizeof cstr "BlockStatement";
  store64 + @ast_type_str * AstBinopExpression sizeof cstr "BinopExpression";
  store64 + @ast_type_str * AstUopExpression   sizeof cstr "UopExpression";
  store64 + @ast_type_str * AstConstStatement  sizeof cstr "ConstStatement";
  store64 + @ast_type_str * AstLetStatement    sizeof cstr "LetStatement";
  store64 + @ast_type_str * AstFuncDefinition  sizeof cstr "FuncDefinition";
  store64 + @ast_type_str * AstFuncCall        sizeof cstr "FuncCall";
  store64 + @ast_type_str * AstParamList       sizeof cstr "ParamList";
  store64 + @ast_type_str * AstAssignment      sizeof cstr "Assignment";
  store64 + @ast_type_str * AstWhileStatement  sizeof cstr "WhileStatement";
  store64 + @ast_type_str * AstIfStatement     sizeof cstr "IfStatement";
  store64 + @ast_type_str * AstType            sizeof cstr "Type";
  store64 + @ast_type_str * AstSizeof          sizeof cstr "Sizeof";
  store64 + @ast_type_str * AstEnum            sizeof cstr "Enum";
  store64 + @ast_type_str * AstStruct          sizeof cstr "Struct";
  store64 + @ast_type_str * AstCastExpression  sizeof cstr "CastExpression";
  store64 + @ast_type_str * AstStaticAssert    sizeof cstr "StaticAssert";
  store64 + @ast_type_str * AstArg             sizeof cstr "Arg";
  store64 + @ast_type_str * AstFieldAccess     sizeof cstr "FieldAccess";

  store64 @ast_node @ast_node_memory;
  store64 @ast_node_end + ast_node * sizeof Ast MAX_AST_NODE;
}

fn ast_free(ast : ptr) -> none {
}
