// spl.spl

struct Options (
  compile:          u64,
  run:              u64,
  debug:            u64,
  filename:         cstr,
  enable_warnings:  u64,
  disable_dce:      u64,
  disable_colors:   u64,
  verbose:          u64,
  verbose_asm:      u64
);

let options: Options = 0;

include "lib/common.spl"
include "lib/hash.spl"
include "lib/colors.spl"
include "lib/html.spl"

const platform = PLATFORM_LINUX;
let envp = null;

include "src/config.spl"
include "src/misc.spl"
include "src/lexer.spl"
include "src/type.spl"
include "src/value.spl"
include "src/ast.spl"
include "src/parser.spl"
include "src/compile_state.spl"
include "src/type_contract.spl"
include "src/type_print.spl"
include "src/typecheck.spl"
include "src/resolver.spl"
include "src/ir.spl"
include "src/ir_optimize.spl"
include "src/codegen_nasm_x86_64.spl"
include "src/compile.spl"
include "src/info.spl"

fn write_debug_information(path: cstr) -> none {
  let fd = file_open_writable(path);
  if neq fd ERROR {
    // ast_print(load64 + @p Parser.ast, 0, fd);
    ir_print(fd);
    func_signatures_print(fd);
    // print_defined_types(fd);
    symbol_info_print(fd);
    compile_state_print(fd);
    ir_print_ins_count(fd);
    close(fd);
  }
  else {
    let args: any = path;
    error("failed to open file `%s`\n", @args);
  }
}

fn write_debug_information_html(path: cstr) -> none {
  let fd = file_open_writable(path);
  if neq fd ERROR {
    let header_content =
"<style>
   * { font-family: consolas, monospace, auto; }
   table { width: 100%; }
   table, th, td {
     border: 1px solid black;
     border-radius: 0.2em;
     padding: 0.2em;
   }
   th { background-color: #f0f0f0; }
   ul { list-style-type: none; }
   .caret {
     cursor: pointer;
     user-select: none;
   }
   .caret::before {
     content: '\25B6';
     color: black;
     display: inline-block;
     margin-right: 1em;
   }
   .caret-down::before {
     transform: rotate(90deg);
   }
   .nested { display: none; }
   .active { display: block; }
 </style>
 <script>
    window.onload = () => {
      var toggler = document.getElementsByClassName('caret');
      for (let i = 0; i < toggler.length; ++i) {
        toggler[i].addEventListener('click', function() {
          this.parentElement.querySelector('.nested').classList.toggle('active');
          this.classList.toggle('caret-down');
        });
      }
    }
 </script>";
    html_begin_html(fd, "Title", "%s\n", @header_content);
    html_tag(fd, "h1", "%s", @path);
    ast_print_html(load64 + @p Parser.ast, fd);
    ir_print_html(fd);
    symbol_info_print_html(fd);
    html_end_html(fd);
    close(fd);
  }
  else {
    error("failed to open file `%s`\n", @path);
  }
}

fn usage(prog: cstr) -> none {
  dprintf(STDOUT_FILENO,
"Usage; %s [OPTIONS]\n

OPTIONS:
   <filename>      - path to file
   run             - run program directly
   no-com          - do not compile target executable
   debug-output    - write debug information
   enable-warnings - enable basic warnings
   disable-dce     - disable dead code elimination
   disable-colors  - disable colored text output
   verbose         - enable verbose output
   verbose-asm     - enable verbose assembly code
   version         - print spl version id
   help            - show help menu\n"
  , @prog);
}

fn spl_options_init -> none {
  store64 + @options Options.compile 1;
  store64 + @options Options.run 0;
  store64 + @options Options.debug 0;
  store64 + @options Options.filename null;
  store64 + @options Options.enable_warnings 0;
  store64 + @options Options.disable_dce 0;
  store64 + @options Options.disable_colors 0;
  store64 + @options Options.verbose 0;
  store64 + @options Options.verbose_asm 0;
}

fn spl_start(filename: cstr) -> u64 {
  let result = NoError;
  if eq load64 + @options Options.disable_colors 0 {
    colors_init(STDOUT_FILENO);
  }

  let time_start: Timespec = 0;
  let time_end: Timespec = 0;
  get_time(at time_start);

  let fd = open(filename, 0, O_RDONLY);
  if neq fd ERROR {
    let source = tmp_it;
    let size = read_file_into_buffer_and_null_terminate(fd, source);
    store64 @tmp_it + size tmp_it;
    if eq parser_init(filename, source) NoError {
      let ast = cast ptr load64 + @p Parser.ast;
      {
        let time_start: Timespec = 0;
        let time_end: Timespec = 0;
        get_time(at time_start);
        ast_push(
          ast,
          parse()
        );
        get_time(at time_end);
        print_time_elapsed("parsing took", at time_start, at time_end);
      }
      if and eq load64 + @p Parser.status NoError eq l.status NoError {
        if eq compile_state_init() NoError {
          typecheck_init();
          type_print_init();
          if eq resolver_init(ast) NoError {
            // symbol_info_print(STDOUT_FILENO);
            if eq typecheck_program(ast) NoError {
              if eq ir_start_compile(ast) NoError {
                if eq ir_optimize() NoError {
                  let target = TARGET_LINUX_NASM_X86_64;
                  let output_path = ".";

                  if eq compile(
                      target,
                      load64 + @options Options.compile,
                      load64 + @options Options.run,
                      filename,
                      output_path) NoError {
                    get_time(at time_end);
                    print_time_elapsed("total compilation time was", at time_start, at time_end);
                    compile_print_final();
                  }
                  if load64 + @options Options.debug {
                    let path: u8[MAX_PATH_SIZE] = 0;
                    sprintf(@path, "%s.debug", + @options Options.filename);
                    write_debug_information(cast cstr @path);

                    sprintf(@path, "%s.html", + @options Options.filename);
                    write_debug_information_html(cast cstr @path);
                  }
                }
              }
            }
          }
          resolver_free();
          compile_state_free();
        }
      }
      parser_free();
      ast_free(ast);
    }
    close(fd);
  }
  else {
    let message = cast cstr tmp_it;
    sprintf(cast ptr tmp_it, "failed to open file `%s`\n", @filename);
    err(message);
  }
  result;
}

fn version_id_print(fd: u64) -> none {
  const BUFFER_SIZE = 22;
  let in_buff: u8[BUFFER_SIZE] = 0;
  let out_buff: u8[BUFFER_SIZE] = 0;
  memset(@in_buff, 0, sizeof in_buff);
  memset(@out_buff, 0, sizeof out_buff);

  u64_to_str(VERSION_ID, @in_buff, - BUFFER_SIZE 2);

  let it = @in_buff;
  let out_it = @out_buff;
  while load8 it {
    store8 out_it % + 33 % load16 it INT8_MAX INT8_MAX;
    store64 @it + sizeof u16 it;
    store64 @out_it + 1 out_it;
  }

  let args: any = @out_buff;
  dprintf(fd, "spl version id: %s\n", @args);
}

fn spl_main(argc: u64, argv: any, envptr: ptr) -> none {
  common_init();
  config_init();
  ast_init();
  spl_options_init();

  store64 @envp envptr;

  let arg = argv;
  let i = 0;
  let should_exit: u64 = 0;
  if < argc 2 {
    usage(cast cstr load64 arg);
  }
  else {
    // TODO(lucas): implement a proper argument parser
    store64 @arg + sizeof ptr arg;
    while neq load64 arg null {
      let argument = cast cstr load64 arg;
      if eq 0 strcmp(argument, "run") {
        store64 + @options Options.run 1;
      }
      else if eq 0 strcmp(argument, "no-com") {
        store64 + @options Options.compile 0;
      }
      else if eq 0 strcmp(argument, "debug-output") {
        store64 + @options Options.debug 1;
      }
      else if eq 0 strcmp(argument, "enable-warnings") {
        store64 + @options Options.enable_warnings 1;
      }
      else if eq 0 strcmp(argument, "disable-dce") {
        store64 + @options Options.disable_dce 1;
      }
      else if eq 0 strcmp(argument, "disable-colors") {
        store64 + @options Options.disable_colors 1;
      }
      else if eq 0 strcmp(argument, "verbose") {
        store64 + @options Options.verbose 1;
      }
      else if eq 0 strcmp(argument, "verbose-asm") {
        store64 + @options Options.verbose_asm 1;
      }
      else if eq 0 strcmp(argument, "version") {
        version_id_print(STDOUT_FILENO);
        store64 @should_exit 1;
      }
      else if eq 0 strcmp(argument, "help") {
        usage(cast cstr load64 argv);
        store64 @should_exit 1;
      }
      else {
        store64 + @options Options.filename argument;
      }
      if neq load64 arg null {
        store64 @arg + sizeof ptr arg;
      }
    }
    if eq should_exit 0 {
      if neq load64 + @options Options.filename 0 {
        let result = spl_start(cast cstr load64 + @options Options.filename);
      }
      else {
        err("no input file was specified\n");
      }
    }
  }
}
