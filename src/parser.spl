// parser.spl

const MAX_SOURCE_COUNT = 64;

struct Parser (
  ast          : ptr,
  status       : u64,
  line_count   : u64,
  source_paths : cstr[MAX_SOURCE_COUNT],
  source_count : u64,
  source_hash  : u64
);

let p : Parser = 0;

fn parser_function -> ptr NULL;
let parse_entry = parser_function;
let expression  = parser_function;
let statements  = parser_function;

fn parser_error(message : cstr) -> none {
  if eq load64 + @p Parser.status NoError {
    let args : any = (
      load64 + @token Token.filename,
      load64 + @token Token.line,
      load64 + @token Token.column
    );
    color_set(COLOR_ERROR);
    dprintf(STDERR_FILENO, "[parse-error]: ", NULL);
    color_set(COLOR_EXTRA);
    dprintf(STDERR_FILENO, "%s:%d:%d: ", @args);
    color_reset();
    dprintf(STDERR_FILENO, "%s", @message);
    printline(STDERR_FILENO, l.source, cast cstr load64 + @token Token.buffer, load64 + @token Token.length, 1, NUM_LINES_TO_PRINT);
    store64 + @p Parser.status Error;
  }
}

fn expect_semicolon -> none {
  let type = load64 + @token Token.type;
  if neq type T_SEMICOLON {
    parser_error("expected `;` semicolon, but got `?`\n");
  }
  else {
    lexer_next(); // skip `;`
  }
}

// L : `(` expr `,` ... `)`
//   | `(` empty `)`
fn parse_expr_list -> ptr {
  let expr_list = ast_create(AstExprList);
  let type = load64 + @token Token.type;
  if neq type T_RIGHT_P {
    let done = 0;
    while eq done 0 {
      ast_push(expr_list, expression());
      store64 @type load64 + @token Token.type;
      if eq type T_COMMA {
        lexer_next();
      }
      else {
        store64 @done 1;
      }
    }
  }
  expr_list;
}

// :ident:ident:...
// FieldAccess
//    Value[] (T_IDENTIFIER)
fn parse_field_access_expr -> ptr {
  let expr = NULL;
  let done = 0;
  while eq done 0 {
    let token_type = lexer_token_type();
    if eq token_type T_COLON {
      lexer_next(); // skip `:`
      store64 @token_type lexer_token_type();
      if eq token_type T_IDENTIFIER {
        if expr {
          ast_push(
            expr,
            ast_create_with_token(AstValue, at token)
          );
        }
        else {
          store64 @expr ast_create_with_token(AstFieldAccess, at token);
        }
        lexer_next(); // skip identifier
      }
      else {
        parser_error("expected identifier after `:` in field access expression, but got `?`\n");
        store64 @done 1
      }
    }
    else {
      store64 @done 1;
    }
  }
  expr;
}

// type : expr
// type<type : expr> : expr
// AstType
//   AstNone | AstValue (count)
//   AstType (optional)
fn parse_type -> ptr {
  let type_expr : ptr = NULL;
  let token_type = load64 + @token Token.type;
  if or or or or or or or or or
    eq token_type T_NONE
    eq token_type T_ANY
    eq token_type T_PTR
    eq token_type T_CSTR
    eq token_type T_CSTRING
    eq token_type T_UNSIGNED64
    eq token_type T_UNSIGNED32
    eq token_type T_UNSIGNED16
    eq token_type T_UNSIGNED8
    eq token_type T_IDENTIFIER {
    store64 @type_expr ast_create(AstType);
    memcpy(+ type_expr Ast.token, @token, sizeof Token);
    lexer_next(); // skip type

    let sub_type = NULL;

    store64 @token_type load64 + @token Token.type;
    // sub type
    if eq token_type T_LT {
      lexer_next(); // skip `<`
      // ast_push(type_expr, parse_type());
      store64 @sub_type parse_type();
      store64 @token_type load64 + @token Token.type;
      if neq token_type T_GT {
        parser_error("expected closing `>` after sub type, but got `?`\n");
      }
      lexer_next(); // skip `>`
    }
    store64 @token_type load64 + @token Token.type;
    // array specifier
    if eq token_type T_LEFT_BRACKET {
      lexer_next(); // skip `[`
      let array_specifier_node = ast_create(AstExpression);
      ast_push(array_specifier_node, expression());
      ast_push(type_expr, array_specifier_node);
      store64 @token_type load64 + @token Token.type;
      if neq token_type T_RIGHT_BRACKET {
        parser_error("expected closing `]` in array specifier, but got `?`\n");
      }
      lexer_next(); // skip `]`
    }
    else {
      ast_push(type_expr, ast_create(AstNone));
    }
    ast_push(type_expr, sub_type); // push sub type if there was one
  }
  type_expr;
}

fn parse_expr -> ptr {
  let expr : ptr = NULL;
  let type = load64 + @token Token.type;
  if or
    eq type T_NUMBER
    eq type T_CSTRING {
    store64 @expr ast_create(AstValue);
    memcpy(+ expr Ast.token, @token, sizeof Token);
    lexer_next();
  }
  else if eq type T_IDENTIFIER {
    let t : Token = 0;
    memcpy(@t, @token, sizeof Token);
    lexer_next();
    store64 @type load64 + @token Token.type;
    if eq type T_LEFT_P { // function call
      lexer_next(); // skip `(`
      store64 @expr ast_create(AstFuncCall);
      memcpy(+ expr Ast.token, @t, sizeof Token);
      ast_push(expr, parse_expr_list());
      store64 @type lexer_token_type();
      if neq type T_RIGHT_P {
        parser_error("expected closing `)` parenthesis in function call, but got `?`\n");
      }
      else {
        lexer_next(); // skip `)`
      }
    }
    else {
      store64 @expr ast_create(AstValue);
      memcpy(+ expr Ast.token, @t, sizeof Token);
    }
  }
  else if or or or or or or or or or or or or or
    eq type T_ADD
    eq type T_SUB
    eq type T_MUL
    eq type T_DIV
    eq type T_DIVMOD
    eq type T_LSHIFT
    eq type T_RSHIFT
    eq type T_LT
    eq type T_GT
    eq type T_AND
    eq type T_OR
    eq type T_XOR
    eq type T_EQ
    eq type T_NEQ {
    store64 @expr ast_create(AstBinopExpression);
    memcpy(+ expr Ast.token, @token, sizeof Token);
    lexer_next(); // skip operator
    ast_push(expr, parse_expr());
    ast_push(expr, parse_expr());
  }
  else if or eq type T_AT eq type T_AT_WORD {
    lexer_next();
    let t : Token = 0;
    memcpy(@t, @token, sizeof Token);
    let token_type = type;
    let type = load64 + @t Token.type;
    if eq type T_IDENTIFIER {
      store64 @expr ast_create(AstValue);
      store64 + @t Token.type token_type;
      memcpy(+ expr Ast.token, @t, sizeof Token);
      lexer_next(); // skip identifier
    }
    else {
      parser_error("expected identifier after `@`, but got `?`\n");
    }
  }
  else if or or or or or or or or
    eq type T_DEREF
    eq type T_DEREF_WORD
    eq type T_LOAD64
    eq type T_LOAD32
    eq type T_LOAD16
    eq type T_LOAD8
    eq type T_PRINT
    eq type T_LOGICAL_NOT
    eq type T_NOT {
    let t : Token = 0;
    memcpy(@t, @token, sizeof Token);
    lexer_next();
    store64 @expr ast_create(AstUopExpression);
    memcpy(+ expr Ast.token, @t, sizeof Token);
    ast_push(expr, parse_expr());
  }
  else if eq type T_SIZEOF {
    lexer_next(); // skip `sizeof`
    let type = load64 + @token Token.type;
    let ok = or or or or or or or or or or
      eq type T_ANY
      eq type T_PTR
      eq type T_NUMBER
      eq type T_UNSIGNED64
      eq type T_UNSIGNED32
      eq type T_UNSIGNED16
      eq type T_UNSIGNED8
      eq type T_CSTRING
      eq type T_CSTR
      eq type T_STRUCT
      eq type T_IDENTIFIER;

    if eq ok 0 {
      parser_error("expected type in sizeof operator, but got `?`\n");
    }
    else {
      store64 @expr ast_create(AstSizeof);
      memcpy(+ expr Ast.token, @token, sizeof Token);
      lexer_next(); // skip type
    }
  }
  else if eq type T_LEFT_P {
    lexer_next(); // skip `(`
    store64 @expr parse_expr();
    let type = load64 + @token Token.type;
    if neq type T_RIGHT_P {
      parser_error("missing closing `)` parenthesis in expression\n");
    }
    else {
      lexer_next(); // skip `)`
    }
  }
  else if eq type T_RIGHT_P {
    parser_error("unexpected closing `)` parenthesis in expression\n");
  }
  else if eq type T_CAST {
    store64 @expr ast_create(AstCastExpression);
    memcpy(+ expr Ast.token, @token, sizeof Token);
    lexer_next(); // skip `cast`
    let inner_expr = ast_create(AstExpression);
    ast_push(expr, parse_type());
    ast_push(inner_expr, parse_expr());
    ast_push(expr, inner_expr);
  }
  else if eq type T_COLON {
    store64 @expr parse_field_access_expr();
  }
  else if neq type T_EOF {
    parser_error("unexpected token `?` in expression\n");
    store64 + @p Parser.status Error;
  }
  expr;
}

fn parse_ident_list -> ptr {
  let ident_list : ptr = ast_create(AstExprList);
  let type = T_NONE;
  let t : Token = 0;
  let done = 0;
  while not done {
    memcpy(@t, @token, sizeof Token);
    store64 @type load64 + @token Token.type;
    if eq type T_IDENTIFIER {
      ast_push_node(ident_list, AstValue, @t);
      lexer_next(); // skip identifier
    }
    else {
      parser_error("expected identifier in identifier list, but got `?`\n");
      store64 @done 1;
    }

    store64 @type load64 + @token Token.type;
    if eq type T_COMMA {
      lexer_next(); // skip `,`
    }
    else {
      // we're done here if there was no comma
      store64 @done 1;
    }
  }
  ident_list;
}

fn parse_param_list -> ptr {
  let param_list : ptr = ast_create(AstParamList);
  let type = lexer_token_type();
  if neq type T_RIGHT_P {
    let done = 0;
    while eq done 0 {
      store64 @type lexer_token_type();
      if eq type T_IDENTIFIER {
        let ident : Token = 0;
        memcpy(@ident, @token, sizeof Token);
        lexer_next(); // skip argument identifier
        store64 @type lexer_token_type();
        if neq type T_COLON {
          parser_error("expected `:` colon after argument identifier, but got `?`\n");
          store64 @done 1;
        }
        else {
          lexer_next(); // skip `:`
          let arg : ptr = ast_create(AstArg);
          memcpy(+ arg Ast.token, @ident, sizeof Token);
          let arg_type = parse_type();
          if eq arg_type NULL {
            parser_error("expected type after `:`, but got `?`\n");
            store64 @done 1;
          }
          else {
            ast_push(arg, arg_type);
            ast_push(param_list, arg);
            store64 @type lexer_token_type();
            if eq type T_COMMA {
              lexer_next(); // skip `,`
            }
            else {
              store64 @done 1;
            }
          }
        }
      }
      else {
        store64 @done 1;
      }
    }
  }
  param_list;
}

fn parse_struct -> ptr {
  let struct_expr : ptr = ast_create(AstStruct);
  lexer_next(); // skip `struct`
  let type = lexer_token_type();
  if neq type T_IDENTIFIER {
    parser_error("expected identifier after `struct` token, but got `?`\n");
  }
  else {
    memcpy(+ struct_expr Ast.token, @token, sizeof Token);
    lexer_next(); // skip struct name
    store64 @type lexer_token_type();
    if eq type T_LEFT_P {
      lexer_next(); // skip `(`
      let fields : ptr = parse_param_list();
      ast_push(struct_expr, fields);
      if eq load64 + fields Ast.count 0 {
        parser_error("missing struct fields\n");
      }
      else {
        store64 @type lexer_token_type();
        if neq type T_RIGHT_P {
          parser_error("expected closing `)` parenthesis after struct field list, but got `?`\n");
        }
        lexer_next(); // skip `)`
      }
    }
    else {
      parser_error("expected open `(` parenthesis to begin struct field list, but got `?`\n");
    }
    expect_semicolon();
  }
  struct_expr;
}

fn parse_statement -> ptr {
  let stmt : ptr = NULL;
  let type = lexer_token_type();
  if or eq type T_CONST eq type T_LET {
    let branch_type : u64 = type;
    let t : Token = 0;
    lexer_next(); // skip const/let
    memcpy(@t, @token, sizeof Token);
    store64 @type load64 + @token Token.type;
    if neq type T_IDENTIFIER {
      parser_error("expected identifier in let/const statement, but got `?`\n");
    }
    else {
      lexer_next(); // skip identifier
      if eq branch_type T_LET {
        store64 @stmt ast_create(AstLetStatement);
      }
      else {
        store64 @stmt ast_create(AstConstStatement);
      }
      let explicit_type : ptr = NULL;
      memcpy(+ stmt Ast.token, @t, sizeof Token); // copy identifier token
      store64 @type load64 + @token Token.type;
      if eq type T_COLON { // explicit type
        lexer_next(); // skip `:`
        store64 @explicit_type parse_type();
        if eq explicit_type NULL {
          parser_error("expected type after `:`, but got `?`\n");
        }
        else {
          store64 @type load64 + + explicit_type Ast.token Token.type;
          if eq type T_NONE {
            parser_error("explicit type cannot be `none`\n");
          }
        }
      }

      // rhs of let/const statement
      store64 @type load64 + @token Token.type;
      if eq type T_ASSIGN {
        lexer_next(); // skip `=`
        store64 @type load64 + @token Token.type;
        if eq type T_LEFT_P {
          lexer_next(); // skip `(`
          ast_push(stmt, parse_expr_list());
          store64 @type load64 + @token Token.type;
          if neq type T_RIGHT_P {
            parser_error("expected closing `)` parenthesis in expression list, but got `?`\n");
          }
          lexer_next(); // skip `)`
        }
        else {
          ast_push(stmt, parse_expr_list());
        }
      }
      else {
        parser_error("expected `=` in let/const statement, but got `?`\n");
      }
      ast_push(stmt, explicit_type);
      expect_semicolon();
    }
  }
  else if eq type T_LEFT_CURLY {
    lexer_next(); // skip `{`
    store64 @stmt ast_create(AstBlockStatement);
    let sub_stmts = statements();
    if neq sub_stmts NULL {
      ast_push(stmt, sub_stmts);
      store64 @type load64 + @token Token.type;
      if neq type T_RIGHT_CURLY {
        parser_error("expected closing `}` curly bracket in block, but got `?`\n");
      }
      else {
        lexer_next(); // skip `}`
      }
    }
  }
  else if or or or or
    eq type T_ASSIGN
    eq type T_STORE64
    eq type T_STORE32
    eq type T_STORE16
    eq type T_STORE8 {
    store64 @stmt ast_create(AstAssignment);
    memcpy(+ stmt Ast.token, @token, sizeof Token);
    lexer_next(); // skip assignment/store operator
    ast_push(stmt, parse_expr());
    ast_push(stmt, parse_expr());
  }
  else if eq type T_WHILE {
    store64 @stmt ast_create(AstWhileStatement);
    memcpy(+ stmt Ast.token, @token, sizeof Token);
    lexer_next(); // skip `while`
    let cond = ast_create(AstExpression);
    memcpy(+ cond Ast.token, @token, sizeof Token);
    ast_push(cond, parse_expr());
    ast_push(stmt, cond);
    store64 @type load64 + @token Token.type;
    if eq type T_LEFT_CURLY {
      lexer_next(); // skip `{`
      ast_push(stmt, statements());
      store64 @type load64 + @token Token.type;
      if neq type T_RIGHT_CURLY {
        parser_error("expected closing `}` curly bracket in while statement body, but got `?`\n");
      }
      else {
        lexer_next(); // skip `}`
      }
    }
    else {
      ast_push(stmt, parse_statement());
    }
  }
  else if eq type T_IF {
    store64 @stmt ast_create(AstIfStatement);
    memcpy(+ stmt Ast.token, @token, sizeof Token);
    lexer_next(); // skip `if`
    let cond = ast_create(AstExpression);
    memcpy(+ cond Ast.token, @token, sizeof Token); // copy what ever token that is after `if`
    ast_push(cond, parse_expr());
    ast_push(stmt, cond);
    store64 @type load64 + @token Token.type;
    if eq type T_LEFT_CURLY {
      lexer_next(); // skip `{`
      ast_push(stmt, statements());
      store64 @type load64 + @token Token.type;
      if neq type T_RIGHT_CURLY {
        parser_error("expected closing `}` curly bracket in if statement body, but got `?`\n");
      }
      else {
        lexer_next(); // skip `}`
      }
    }
    else {
      let if_body = ast_create(AstStatementList);
      ast_push(if_body, parse_statement());
      ast_push(stmt, if_body);
    }
    // parsing of else statements
    store64 @type load64 + @token Token.type;
    if eq type T_ELSE {
      lexer_next(); // skip `else`
      store64 @type load64 + @token Token.type;
      if eq type T_LEFT_CURLY {
        lexer_next(); // skip `{`
        ast_push(stmt, statements()); // parse else body
        store64 @type load64 + @token Token.type;
        if neq type T_RIGHT_CURLY {
          parser_error("expected closing `}` curly bracket in else body, but got `?`\n");
        }
        else {
          lexer_next(); // skip `}`
        }
      }
      else {
        let else_body = ast_create(AstStatementList);
        ast_push(else_body, parse_statement());
        ast_push(stmt, else_body);
      }
    }
  }
  else if eq type T_ENUM {
    store64 @stmt ast_create(AstEnum);
    lexer_next(); // skip `enum`
    let type_branch : ptr = parse_type();
    if eq type_branch NULL {
      parser_error("expected type in enum expression, but got `?`\n");
    }
    else {
      ast_push(stmt, type_branch);
      store64 @type load64 + @token Token.type;
      if eq type T_LEFT_P {
        lexer_next(); // skip `(`
        ast_push(stmt, parse_ident_list());
        store64 @type load64 + @token Token.type;
        if neq type T_RIGHT_P {
          parser_error("expected closing `)` parenthesis in enum expression, but got `?`\n");
        }
        lexer_next(); // skip `)`
      }
      else {
        ast_push(stmt, parse_ident_list());
      }
      expect_semicolon();
    }
  }
  else if eq type T_STRUCT {
    store64 @stmt parse_struct();
  }
  else if eq type T_STATIC_ASSERT {
    store64 @stmt ast_create(AstStaticAssert);
    memcpy(+ stmt Ast.token, @token, sizeof Token); // NOTE(lucas): there was some strange behaviour here, look here if something goes wrong
    lexer_next(); // skip `static_assert`
    ast_push(stmt, parse_expr());
    store64 @type load64 + @token Token.type;
    if neq type T_CSTRING {
      parser_error("expected string in static assert statement, but got `?`\n");
    }
    else {
      let node = ast_create(AstValue);
      memcpy(+ node Ast.token, @token, sizeof Token);
      ast_push(stmt, node);
      lexer_next(); // skip string
    }
    expect_semicolon();
  }
  else if neq type T_EOF {
    store64 @stmt parse_expr();
    expect_semicolon();
  }
  stmt;
}

fn parse_func_def -> ptr {
  let func : ptr = NULL;
  let rtype : ptr = NULL;
  let type : u64 = T_NONE;
  lexer_next(); // skip `fn`
  store64 @type lexer_token_type();
  if neq type T_IDENTIFIER {
    parser_error("expected identifier after `fn`, but got `?`\n");
  }
  else {
    store64 @func ast_create(AstFuncDefinition);
    memcpy(+ func Ast.token, @token, sizeof Token);
    lexer_next(); // skip function name

    // parse function parameter list
    store64 @type lexer_token_type();
    if eq type T_LEFT_P {
      lexer_next(); // skip `(`
      ast_push(func, parse_param_list());
      store64 @type lexer_token_type();
      if neq type T_RIGHT_P {
        parser_error("expected closing `)` parenthesis in function parameter list, but got `?`\n");
      }
      lexer_next();
    }
    else {
      ast_push(func, ast_create(AstParamList)); // push empty parameter list
    }

    // parse function return type
    store64 @type lexer_token_type();
    if eq type T_ARROW {
      lexer_next(); // skip `->`
      store64 @rtype parse_type();
      if eq rtype NULL {
        parser_error("expected type after `->`, but got `?`\n");
      }
    }
    // parse function body
    store64 @type lexer_token_type();
    if eq type T_LEFT_CURLY {
      lexer_next(); // skip `{`
      ast_push(func, statements());
      store64 @type lexer_token_type();
      if neq type T_RIGHT_CURLY {
        parser_error("expected closing `}` curly bracket in function body, but got `?`\n");
      }
      lexer_next(); // skip `}`
    }
    else {
      let stmts : ptr = ast_create(AstStatementList);
      ast_push(stmts, parse_expr());
      ast_push(func, stmts);
      expect_semicolon();
    }
    ast_push(func, rtype);
  }
  func;
}

fn parse_include -> ptr {
  let include_body : ptr = NULL;
  lexer_next(); // skip `include`
  if eq lexer_token_type() T_CSTRING {
    let path = load64 + @token Token.buffer;
    let path_length = load64 + @token Token.length;
    let token_copy : Token = 0;

    lexer_next(); // skip path string

    memcpy(@token_copy, @token, sizeof Token);

    let filename_path = cast cstr tmp_it;
    tmp_push_str(path, + 1 path_length);
    store8 cast ptr (+ filename_path path_length) 0;

    // include guard
    let i : u64 = 0;
    let source_count : u64 = load64 + @p Parser.source_count;
    let guard : u64 = 0;
    while and eq guard 0 < i source_count {
      let included_path = cast cstr load64 + + @p Parser.source_paths * sizeof cstr i;
      if eq strncmp(included_path, filename_path, MAX_PATH_SIZE) 0 {
        store64 @guard 1;
      }
      store64 @i + 1 i;
    }
    if eq guard 0 {
      if < source_count MAX_SOURCE_COUNT {
        let fd = open_source_file(filename_path);
        if neq fd ERROR {
          let file_source = tmp_it;
          let size = read_file_into_buffer_and_null_terminate(fd, file_source);
          // printf("include file `%s`\n", @filename_path);
          close(fd);
          store64 @tmp_it + tmp_it size;

          store64 + + @p Parser.source_paths * sizeof cstr load64 + @p Parser.source_count filename_path;
          store64 + @p Parser.source_count + 1 load64 + @p Parser.source_count;

          // copy current lexer state
          let filename = l.filename;
          let source = l.source;
          let index = l.index;
          let line = l.line;
          let column = l.column;
          let status = l.status;

          lexer_init(filename_path, file_source);
          store64 @include_body parse_entry();

          // restore lexer state
          store64 @l.filename filename;
          store64 @l.source source;
          store64 @l.index index;
          store64 @l.line line;
          store64 @l.column column;
          store64 @l.status status;

          // restore lexer token
          memcpy(@token, @token_copy, sizeof Token);
        }
        else {
          let message = "";
          store64 @message tmp_it;
          tmp_push_cstr("failed to include source file `");
          tmp_push_str(path, path_length);
          tmp_push_cstr("`\n");
          parser_error(message);
          store64 @tmp_it message;
        }
      }
      else {
        assert(0, "include capacity reached, increase capacity\n");
      }
    }
  }
  else {
    parser_error("expected string after `include` keyword\n");
  }
  include_body;
}

fn parse_statements -> ptr {
  let stmts = ast_create(AstStatementList);
  let done = 0;
  while not done {
    let type = lexer_token_type();
    if eq type T_EOF {
      store64 @done 1;
    }
    else if eq type T_SEMICOLON {
      lexer_next();
    }
    else if eq type T_RIGHT_CURLY {
      store64 @done 1;
    }
    else if eq type T_FN {
      let func_def : ptr = parse_func_def();
      if eq func_def NULL {
        store64 @done 1;
      }
      else {
        ast_push(stmts, func_def);
      }
    }
    else if eq type T_INCLUDE {
      let include_body : ptr = parse_include();
      if eq load64 + @p Parser.status NoError {
        ast_push(stmts, include_body);
      }
      else {
        store64 @done 1;
      }
    }
    else {
      let stmt = parse_statement();
      if eq stmt NULL {
        store64 @done 1;
      }
      else {
        ast_push(stmts, stmt);
      }
    }
  }
  stmts;
}

fn parse -> ptr {
  let time_start : timespec = 0;
  let time_end : timespec = 0;
  { let _ = clock_gettime(CLOCK_MONOTONIC, @time_start); }

  lexer_next();
  let ast : ptr = parse_statements();

  { let _ = clock_gettime(CLOCK_MONOTONIC, @time_end); }

  let message = cast cstr tmp_it;
  let args : any = (l.filename);
  store64 @tmp_it + tmp_it _sprintf(cast ptr message, "parsing of `%s` took", @args);
  print_time_elapsed(message, @time_start, @time_end);
  store64 @tmp_it message;

  store64 + @p Parser.line_count + load64 + @p Parser.line_count l.line;
  store64 + @p Parser.source_hash + load64 + @p Parser.source_hash djb2_hash_cstr(l.source);

  ast;
}

fn parser_init(filename : any, source : any) -> u64 {
  lexer_init(filename, source);
  store64 + @p Parser.ast ast_create(AstRoot);
  store64 + @p Parser.status NoError;
  store64 + @p Parser.line_count 0;
  store64 + @p Parser.source_paths filename;
  store64 + @p Parser.source_count 1;
  store64 + @p Parser.source_hash 0;

  store64 @parse_entry parse;
  store64 @expression parse_expr;
  store64 @statements parse_statements;

  NoError;
}

fn parser_free -> none {

}
