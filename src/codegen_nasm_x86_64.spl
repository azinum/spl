// codegen_nasm_x86_64.spl

fn o(fd: u64, format: cstr, args: any) -> none {
  dprintf(fd, format, args);
}

fn vo_empty(fd: u64, format: cstr, args: any) -> none {}

fn vo_write_debug_info(fd: u64, op: ptr<Op>) -> none {
  const BUFFER_SIZE = 512;
  let buffer: u8[BUFFER_SIZE] = 0;
  let token = cast ptr<Token> + op Op.info;
  {
    let args: any = load64 + token Token.filename, load64 + token Token.line, load64 + token Token.column;
    let _ = snprintf(@buffer, BUFFER_SIZE, "; %s:%d:%d:", @args);
  }
  {
    let args: any = @buffer;
    dprintf(fd, "%s\n", @args);
  }
  dprintf(fd, "%%ifdef DEBUG_INFO\n", null);
  printline(fd, cast cstr load64 + token Token.source, cast cstr load64 + token Token.buffer, load64 + token Token.length, 1, 1);

  dprintf(fd, "%%endif\n", null);
}

fn vo_write_debug_info_empty(fd: u64, op: ptr<Op>) -> none {}

fn compile_linux_nasm_x86_64(fd: u64) -> u64 {
  colors_disable();
  let vo = vo_empty;
  let vo_debug = vo_write_debug_info_empty;

  if load64 + @options Options.verbose_asm {
    store64 @vo o;
    // store64 @vo_debug vo_write_debug_info;
  }

  let func_call_regs_x86_64: cstr = (
    "rdi",
    "rsi",
    "rdx",
    "rcx",
    "r8",
    "r9"
  );
  let entry = "_start";

  o(fd, "bits 64\n", null);
  o(fd, "section .text\n", null);
  o(fd, "global %s\n", @entry);
  o(fd,
"print:
 mov r9, -3689348814741910323
 sub rsp, 40
 mov BYTE [rsp+31], 10
 lea rcx, [rsp+30]
 .L2:
 mov rax, rdi
 lea r8, [rsp+32]
 mul r9
 mov rax, rdi
 sub r8, rcx
 shr rdx, 3
 lea rsi, [rdx+rdx*4]
 add rsi, rsi
 sub rax, rsi
 add eax, 48
 mov BYTE [rcx], al
 mov rax, rdi
 mov rdi, rdx
 mov rdx, rcx
 sub rcx, 1
 cmp rax, 9
 ja .L2
 lea rax, [rsp+32]
 mov edi, 1
 sub rdx, rax
 xor eax, eax
 lea rsi, [rsp+32+rdx]
 mov rdx, r8
 mov rax, 1
 syscall
 add rsp, 40
 ret
", null);

  let i: u64 = 0;
  let count: u64 = load64 + c Compile.ins_count;
  while < i count {
    // op : Op*
    let op = cast ptr<Op> + + c Compile.ins * sizeof Op i;
    let ins: u64 = load64 + op Op.i;
    if eq ins I_NOP {
      o(fd, "nop\n", null);
    }
    else if eq ins I_POP {
      vo(fd, "; I_POP\n", null);
      o(fd, "pop rax\n", null);
    }
    else if eq ins I_MOVE {
      vo(fd, "; I_MOVE\n", null);
      vo_debug(fd, op);
      let dest: u64 = load64 + op Op.dest;
      let args: any = load64 + op Op.src0, load64 + op Op.src1;
      if or or or or
          eq dest TypeAny
          eq dest TypePtr
          eq dest TypeCString
          eq dest TypeFunc
          eq dest TypeUnsigned64 {
        o(fd, "pop rax\n", null);
        o(fd, "mov [v%d+%d], rax\n", @args);
      }
      else if eq dest TypeUnsigned32 {
        o(fd, "pop rax\n", null);
        o(fd, "mov [v%d+%d], eax\n", @args);
      }
      else if eq dest TypeUnsigned16 {
        o(fd, "pop rax\n", null);
        o(fd, "mov [v%d+%d], ax\n", @args);
      }
      else if eq dest TypeUnsigned8 {
        o(fd, "pop rax\n", null);
        o(fd, "mov [v%d+%d], al\n", @args);
      }
      else {
        assert(0, "I_MOVE: type not implemented yet\n");
      }
    }
    else if eq ins I_MOVE_LOCAL {
      vo(fd, "; I_MOVE_LOCAL\n", null);
      vo_debug(fd, op);
      let dest: u64 = load64 + op Op.dest;
      let args: any = (load64 + op Op.src0);
      if or or or or
          eq dest TypeAny
          eq dest TypePtr
          eq dest TypeCString
          eq dest TypeFunc
          eq dest TypeUnsigned64 {
        o(fd, "pop rax\n", null);
        o(fd, "mov QWORD [rbp-%d], rax\n", @args);
      }
      else if eq dest TypeUnsigned32 {
        o(fd, "pop rax\n", null);
        o(fd, "mov DWORD [rbp-%d], eax\n", @args);
      }
      else if eq dest TypeUnsigned16 {
        o(fd, "pop rax\n", null);
        o(fd, "mov WORD [rbp-%d], ax\n", @args);
      }
      else if eq dest TypeUnsigned8 {
        o(fd, "pop rax\n", null);
        o(fd, "mov BYTE [rbp-%d], al\n", @args);
      }
      else {
        assert(0, "I_MOVE_LOCAL: type not implemented yet\n");
      }
    }
    else if eq ins I_STORE64 {
      vo(fd, "; I_STORE64\n", null);
      vo_debug(fd, op);
      o(fd, "pop rbx\n", null);
      o(fd, "pop rax\n", null);
      o(fd, "mov [rax], rbx\n", null);
    }
    else if eq ins I_STORE32 {
      vo(fd, "; I_STORE32\n", null);
      vo_debug(fd, op);
      o(fd, "pop rbx\n", null);
      o(fd, "pop rax\n", null);
      o(fd, "mov [rax], ebx\n", null);
    }
    else if eq ins I_STORE16 {
      vo(fd, "; I_STORE16\n", null);
      vo_debug(fd, op);
      o(fd, "pop rbx\n", null);
      o(fd, "pop rax\n", null);
      o(fd, "mov [rax], bx\n", null);
    }
    else if eq ins I_STORE8 {
      vo(fd, "; I_STORE8\n", null);
      vo_debug(fd, op);
      o(fd, "pop rbx\n", null);
      o(fd, "pop rax\n", null);
      o(fd, "mov [rax], bl\n", null);
    }
    else if eq ins I_LOAD64 {
      vo(fd, "; I_LOAD64\n", null);
      vo_debug(fd, op);
      o(fd, "pop rax\n", null);
      o(fd, "xor rbx, rbx\n", null);
      o(fd, "mov rbx, [rax]\n", null);
      o(fd, "push rbx\n", null);
    }
    else if eq ins I_LOAD32 {
      vo(fd, "; I_LOAD32\n", null);
      vo_debug(fd, op);
      o(fd, "pop rax\n", null);
      o(fd, "xor rbx, rbx\n", null);
      o(fd, "mov ebx, [rax]\n", null);
      o(fd, "push rbx\n", null);
    }
    else if eq ins I_LOAD16 {
      vo(fd, "; I_LOAD16\n", null);
      vo_debug(fd, op);
      o(fd, "pop rax\n", null);
      o(fd, "xor rbx, rbx\n", null);
      o(fd, "mov bx, [rax]\n", null);
      o(fd, "push rbx\n", null);
    }
    else if eq ins I_LOAD8 {
      vo(fd, "; I_LOAD8\n", null);
      vo_debug(fd, op);
      o(fd, "pop rax\n", null);
      o(fd, "xor rbx, rbx\n", null);
      o(fd, "mov bl, [rax]\n", null);
      o(fd, "push rbx\n", null);
    }
    else if eq ins I_PUSH_ADDR_OF {
      vo(fd, "; I_PUSH_ADDR_OF\n", null);
      vo_debug(fd, op);
      let args: any = load64 + op Op.src0;
      o(fd, "mov rax, v%d\n", @args);
      o(fd, "push rax\n", null);
    }
    else if eq ins I_PUSH_LOCAL_ADDR_OF {
      vo(fd, "; I_PUSH_LOCAL_ADDR_OF\n", null);
      vo_debug(fd, op);
      let args: any = load64 + op Op.src0;
      o(fd, "lea rax, [rbp-%d]\n", @args);
      o(fd, "push rax\n", null);
    }
    else if eq ins I_PUSH {
      vo(fd, "; I_PUSH\n", null);
      vo_debug(fd, op);
      let dest: u64 = load64 + op Op.dest;
      let args: any = load64 + op Op.src0;
      if or or
          eq dest TypeAny
          eq dest TypePtr
          eq dest TypeUnsigned64 {
        o(fd, "mov rax, [v%d]\n", @args);
        o(fd, "push rax\n", null);
      }
      else if eq dest TypeUnsigned32 {
        o(fd, "xor rax, rax\n", null);
        o(fd, "mov eax, [v%d]\n", @args);
        o(fd, "push rax\n", null);
      }
      else if eq dest TypeUnsigned16 {
        o(fd, "xor rax, rax\n", null);
        o(fd, "mov ax, [v%d]\n", @args);
        o(fd, "push rax\n", null);
      }
      else if eq dest TypeUnsigned8 {
        o(fd, "xor rax, rax\n", null);
        o(fd, "mov al, [v%d]\n", @args);
        o(fd, "push rax\n", null);
      }
      else if eq dest TypeCString {
        o(fd, "mov rax, str%d\n", @args);
        o(fd, "push rax\n", null);
      }
      else if eq dest TypeFunc {
        o(fd, "mov rax, v%d\n", @args);
        o(fd, "push rax\n", null);
      }
      else if eq dest TypeStruct {
        let size: u64 = load64 + op Op.src1;
        if eq size 8 {
          o(fd, "mov rax, [v%d]\n", @args);
          o(fd, "push rax\n", null);
        }
        else if eq size 4 {
          o(fd, "xor rax, rax\n", null);
          o(fd, "mov eax, [v%d]\n", @args);
          o(fd, "push rax\n", null);
        }
        else if eq size 2 {
          o(fd, "xor rax, rax\n", null);
          o(fd, "mov ax, [v%d]\n", @args);
          o(fd, "push rax\n", null);
        }
        else if eq size 1 {
          o(fd, "xor rax, rax\n", null);
          o(fd, "mov al, [v%d]\n", @args);
          o(fd, "push rax\n", null);
        }
        else {
          assert(0, "I_PUSH: bad struct size\n");
        }
      }
      else {
        assert(0, "I_PUSH: type not implemented\n");
      }
    }
    else if eq ins I_PUSH_LOCAL {
      vo(fd, "; I_PUSH_LOCAL\n", null);
      vo_debug(fd, op);
      let dest: u64 = load64 + op Op.dest;
      let args: any = load64 + op Op.src0;
      if or or or or
          eq dest TypeAny
          eq dest TypePtr
          eq dest TypeCString
          eq dest TypeFunc
          eq dest TypeUnsigned64 {
        o(fd, "push QWORD [rbp-%d]\n", @args);
      }
      else if eq dest TypeUnsigned32 {
        o(fd, "mov eax, [rbp-%d]\n", @args);
        o(fd, "push rax\n", null);
      }
      else if eq dest TypeUnsigned16 {
        o(fd, "mov ax, [rbp-%d]\n", @args);
        o(fd, "push rax\n", null);
      }
      else if eq dest TypeUnsigned8 {
        o(fd, "mov al, [rbp-%d]\n", @args);
        o(fd, "push rax\n", null);
      }
      else if eq dest TypeStruct {
        let size: u64 = load64 + op Op.src1;
        if eq size 8 {
          o(fd, "push QWORD [rbp-%d]\n", @args);
        }
        else if eq size 4 {
          o(fd, "mov eax, [rbp-%d]\n", @args);
          o(fd, "push rax\n", null);
        }
        else if eq size 2 {
          o(fd, "mov ax, [rbp-%d]\n", @args);
          o(fd, "push rax\n", null);
        }
        else if eq size 1 {
          o(fd, "mov al, [rbp-%d]\n", @args);
          o(fd, "push rax\n", null);
        }
        else {
          assert(0, "I_PUSH_LOCAL: bad struct size\n");
        }
      }
      else {
        assert(0, "I_PUSH_LOCAL: type not implemented\n");
      }
    }
    else if eq ins I_PUSH_IMM {
      vo(fd, "; I_PUSH_IMM\n", null);
      vo_debug(fd, op);
      let dest: u64 = load64 + op Op.dest;
      if eq dest TypeUnsigned64 {
        let value: u64 = load64 + + c Compile.imm load64 + op Op.src0;
        o(fd, "mov rax, %d\n", @value);
        o(fd, "push rax\n", null);
      }
      else {
        assert(0, "I_PUSH_IMM: type not implemented\n");
      }
    }
    else if eq ins I_ADD {
      vo(fd, "; I_ADD\n", null);
      vo_debug(fd, op);
      o(fd,
"pop rax
 pop rbx
 add rbx, rax
 push rbx\n"
      , null);
    }
    else if eq ins I_SUB {
      vo(fd, "; I_SUB\n", null);
      vo_debug(fd, op);
      o(fd,
"pop rax
 pop rbx
 sub rbx, rax
 push rbx\n"
      , null);
    }
    else if eq ins I_MUL {
      vo(fd, "; I_MUL\n", null);
      vo_debug(fd, op);
      o(fd,
"pop rax
 pop rbx
 mul rbx
 push rax\n"
      , null);
    }
    else if eq ins I_DIV {
      vo(fd, "; I_DIV\n", null);
      vo_debug(fd, op);
      o(fd,
"xor rdx, rdx
 pop r8
 pop rax
 div r8
 push rax\n"
      , null);
    }
    else if eq ins I_LSHIFT {
      vo(fd, "; I_LSHIFT\n", null);
      vo_debug(fd, op);
      o(fd,
"pop rcx
 pop rax
 shl rax, cl
 push rax\n"
      , null);
    }
    else if eq ins I_RSHIFT {
      vo(fd, "; I_RSHIFT\n", null);
      vo_debug(fd, op);
      o(fd,
"pop rcx
 pop rax
 shr rax, cl
 push rax\n"
      , null);
    }
    else if eq ins I_DIVMOD {
      vo(fd, "; I_DIVMOD\n", null);
      vo_debug(fd, op);
      o(fd,
"xor rdx, rdx
 pop rbx
 pop rax
 div rbx
 push rdx\n"
      , null);
    }
    else if eq ins I_LT {
      vo(fd, "; I_LT\n", null);
      vo_debug(fd, op);
      o(fd,
"mov rcx, 0
 mov rdx, 1
 pop rax
 pop rbx
 cmp rbx, rax
 cmovl rcx, rdx
 push rcx\n"
      , null);
    }
    else if eq ins I_GT {
      vo(fd, "; I_GT\n", null);
      vo_debug(fd, op);
      o(fd,
"mov rcx, 0
 mov rdx, 1
 pop rax
 pop rbx
 cmp rbx, rax
 cmovg rcx, rdx
 push rcx\n"
      , null);
    }
    else if eq ins I_AND {
      vo(fd, "; I_AND\n", null);
      vo_debug(fd, op);
      o(fd,
"pop rax
 pop rbx
 and rbx, rax
 push rbx\n"
      , null);
    }
    else if eq ins I_LOGICAL_NOT {
      vo(fd, "; I_LOGICAL_NOT\n", null);
      vo_debug(fd, op);
      o(fd,
"pop rax
 cmp rax, 0
 sete al
 movzx rax, al
 push rax\n"
      , null);
    }
    else if eq ins I_NOT {
      vo(fd, "; I_NOT\n", null);
      vo_debug(fd, op);
      o(fd,
"pop rax
 not rax
 push rax\n"
      , null);
    }
    else if eq ins I_OR {
      vo(fd, "; I_OR\n", null);
      vo_debug(fd, op);
      o(fd,
"pop rax
 pop rbx
 or rbx, rax
 push rbx\n"
      , null);
    }
    else if eq ins I_XOR {
      vo(fd, "; I_OR\n", null);
      vo_debug(fd, op);
      o(fd,
"pop rax
 pop rbx
 xor rbx, rax
 push rbx\n"
      , null);
    }
    else if eq ins I_EQ {
      vo(fd, "; I_EQ\n", null);
      vo_debug(fd, op);
      o(fd,
"mov rcx, 0
 mov rdx, 1
 pop rax
 pop rbx
 cmp rbx, rax
 cmove rcx, rdx
 push rcx\n"
      , null);
    }
    else if eq ins I_NEQ {
      vo(fd, "; I_NEQ\n", null);
      vo_debug(fd, op);
      o(fd,
"mov rcx, 0
 mov rdx, 1
 pop rax
 pop rbx
 cmp rbx, rax
 cmovne rcx, rdx
 push rcx\n"
      , null);
    }
    else if eq ins I_RET {
      vo(fd, "; I_RET\n", null);
      vo_debug(fd, op);
      let frame_size: u64 = load64 + op Op.src0;
      o(fd, "pop rax\n", null);
      o(fd, "pop rbp\n", null);
      if frame_size {
        o(fd, "add rsp, %d\n", @frame_size);
      }
      o(fd, "ret\n", null);
    }
    else if eq ins I_NORET {
      vo(fd, "; I_NORET\n", null);
      vo_debug(fd, op);
      let frame_size: u64 = load64 + op Op.src0;
      o(fd, "pop rbp\n", null);
      if frame_size {
        o(fd, "add rsp, %d\n", @frame_size);
      }
      o(fd, "ret\n", null);
    }
    else if eq ins I_PRINT {
      vo(fd, "; I_PRINT\n", null);
      vo_debug(fd, op);
      o(fd, "pop rdi\n", null);
      o(fd, "call print\n", null);
    }
    else if eq ins I_LABEL {
      vo(fd, "; I_LABEL\n", null);
      vo_debug(fd, op);
      let dest: u64 = load64 + op Op.dest;
      let symbol = cast ptr<Symbol> + + c Compile.symbols * sizeof Symbol dest;
      let name = cast cstr + symbol Symbol.name;
      if eq strcmp(name, "main") 0 {
        o(fd, "%s:\n", @name);
      }
      else {
        vo(fd, "; `%s`\n", @name);
        o(fd, "v%d:\n", @dest);
      }
    }
    else if eq ins I_CALL {
      vo(fd, "; I_CALL\n", null);
      vo_debug(fd, op);
      let dest: u64 = load64 + op Op.dest;
      assert(neq dest UINT64_MAX, "I_CALL: invalid argument argument\n");
      let i: u64 = 0;
      let argc: u64 = load64 + op Op.src0;
      while < i argc {
        let reg_name = cast cstr load64 + @func_call_regs_x86_64 * sizeof cstr i;
        o(fd, "pop %s\n", @reg_name);
        store64 @i + 1 i;
      }
      o(fd, "push rbp\n", null);
      o(fd, "call v%d\n", @dest);
      o(fd, "pop rbp\n", null);
      if neq load64 + op Op.src1 NONE {
        o(fd, "push rax\n", null);
      }
    }
    else if eq ins I_ADDR_CALL {
      vo(fd, "; I_ADDR_CALL\n", null);
      vo_debug(fd, op);
      let i: u64 = 0;
      let argc: u64 = load64 + op Op.src0;
      o(fd, "pop rax\n", null);
      while < i argc {
        let reg_name = cast cstr load64 + @func_call_regs_x86_64 * sizeof cstr i;
        o(fd, "pop %s\n", @reg_name);
        store64 @i + 1 i;
      }
      o(fd, "push rbp\n", null);
      o(fd, "call rax\n", null);
      o(fd, "pop rbp\n", null);
      if neq load64 + op Op.src1 NONE {
        o(fd, "push rax\n", null);
      }
    }
    else if eq ins I_JMP {
      vo(fd, "; I_JMP\n", null);
      vo_debug(fd, op);
      let dest: u64 = load64 + op Op.dest;
      o(fd, "jmp L%d\n", @dest);
    }
    else if eq ins I_JZ {
      vo(fd, "; I_JZ\n", null);
      vo_debug(fd, op);
      let dest: u64 = load64 + op Op.dest;
      o(fd, "pop rax\n", null);
      o(fd, "test rax, rax\n", null);
      o(fd, "jz L%d\n", @dest);
    }
    else if eq ins I_BEGIN_FUNC {
      vo(fd, "; I_BEGIN_FUNC\n", null);
      vo_debug(fd, op);
      o(fd, "push rbp\n", null);
      o(fd, "mov rbp, rsp\n", null);
      let argc: u64 = load64 + op Op.src0;
      let frame_size: u64 = load64 + op Op.src1;
      let i: u64 = 0;
      if frame_size {
        o(fd, "sub rsp, %d\n", @frame_size);
      }
      while < i argc {
        let arg_index: u64 = * sizeof u64 + 1 i;
        let reg_name = cast cstr load64 + @func_call_regs_x86_64 * sizeof cstr i;
        let args: any = (arg_index, reg_name);
        o(fd, "mov [rbp-%d], %s\n", @args);
        store64 @i + 1 i;
      }
    }
    else if eq ins I_LOOP_LABEL {
      vo(fd, "; I_LOOP_LABEL\n", null);
      vo_debug(fd, op);
      let dest: u64 = load64 + op Op.dest;
      o(fd, "L%d:\n", @dest);
    }
    else if eq ins I_SYSCALL0 {
      vo(fd, "; I_SYSCALL0\n", null);
      vo_debug(fd, op);
      o(fd,
"pop rax
 syscall
 push rax\n"
      , null);
    }
    else if eq ins I_SYSCALL1 {
      vo(fd, "; I_SYSCALL1\n", null);
      o(fd,
"pop rax
 pop rdi
 syscall
 push rax\n"
      , null);
    }
    else if eq ins I_SYSCALL2 {
      vo(fd, "; I_SYSCALL2\n", null);
      o(fd,
"pop rax
 pop rdi
 pop rsi
 syscall
 push rax\n"
      , null);
    }
    else if eq ins I_SYSCALL3 {
      vo(fd, "; I_SYSCALL3\n", null);
      o(fd,
"pop rax
 pop rdi
 pop rsi
 pop rdx
 syscall
 push rax\n"
      , null);
    }
    else if eq ins I_SYSCALL4 {
      vo(fd, "; I_SYSCALL4\n", null);
      o(fd,
"pop rax
 pop rdi
 pop rsi
 pop rdx
 pop r10
 syscall
 push rax\n"
      , null);
    }
    else if eq ins I_SYSCALL5 {
      vo(fd, "; I_SYSCALL5\n", null);
      o(fd,
"pop rax
 pop rdi
 pop rsi
 pop rdx
 pop r10
 pop r8
 syscall
 push rax\n"
      , null);
    }
    else if eq ins I_SYSCALL6 {
      vo(fd, "; I_SYSCALL6\n", null);
      o(fd,
"pop rax
 pop rdi
 pop rsi
 pop rdx
 pop r10
 pop r8
 pop r9
 syscall
 push rax\n"
      , null);
    }
    else {
      assert(0, "instruction not implemented\n");
    }
    store64 @i + 1 i;
  }

  o(fd, "\n%s:\n", @entry);
  o(fd,
"mov rdi, [rsp] ; argc
 mov rcx, rsp
 mov rax, rsp
 add rax, 8
 mov rsi, rax ; argv
 ; store offset to envp
 mov rax, [rcx]
 add rax, 2
 shl rax, 3
 mov rdx, rcx
 add rdx, rax ; envp
 call main
 mov rax, 60 ; exit syscall
 mov rdi, 0 ; return code
 syscall
 ret\n"
  , null);

  o(fd, "section .data\n", null);
  // constants
  {
    let i = 0;
    let cstring_count: u64 = load64 + c Compile.cstring_count;
    while < i cstring_count {
      let buffer = cast ptr + + c Compile.imm load64 + + c Compile.cstrings * sizeof u64 i;
      let length: u64 = load64 buffer;
      store64 @buffer + sizeof length buffer;
      o(fd, "str%d: db ", @i);
      let str_index: u64 = 0;
      while < str_index length {
        let ch: u64 = load8 + buffer str_index;
        o(fd, "%d, ", @ch);
        if eq ch 10 { // `\n`
          store64 @str_index + 1 str_index;
        }
        store64 @str_index + 1 str_index;
      }
      o(fd, "0\n", null);
      store64 @i + 1 i;
    }
  }
  {
    let i = 0;
    let count: u64 = load64 + c Compile.symbol_count;
    while < i count {
      // symbol : Symbol*
      let symbol = cast ptr + + c Compile.symbols * sizeof Symbol i;
      let sym_type: u64 = load64 + symbol Symbol.sym_type;
      if and eq load64 + symbol Symbol.konst 1 or eq sym_type SYM_LOCAL_VAR eq sym_type SYM_GLOBAL_VAR {
        let type: Type = 0;
        memcpy(at type, + symbol Symbol.type, sizeof Type);

        let type_id   = type_lookup(at type);
        let size      = sizeof u64; // compile_type_size(type_id);
        let type_size = compile_type_size(type_id);
        let count     = / load64 + symbol Symbol.size type_size;
        let name      = cast ptr + symbol Symbol.name;
        let size_str  = "db";

        if or eq type_base(at type) TypeUnsigned64 eq type_base(at type) TypePtr {
          store64 @size_str "dq";
        }
        else if eq type_base(at type) TypeUnsigned32 {
          store64 @size_str "dd";
        }
        else if eq type_base(at type) TypeUnsigned16 {
          store64 @size_str "dw";
        }
        else if eq type_base(at type) TypeUnsigned8 {
          store64 @size_str "db";
        }
        else {
          assert(0, "codegen_nasm_x86_64: type not implemented\n");
        }
        let imm: u64 = - + load64 + symbol Symbol.imm * size count size;
        let args: any = i, size_str;
        o(fd, "v%d: %s", @args);
        let v: u64 = 0;
        while < v count {
          let value: u64 = load64 + + c Compile.imm imm;
          o(fd, " %d,", @value);
          store64 @imm - imm size;
          store64 @v + 1 v;
        }
        vo(fd, " ; `%s`", @name);
        o(fd, "\n", null);
      }
      store64 @i + 1 i;
    }
  }
  // symbols
  o(fd, "section .bss\n", null);
  {
    let i = 0;
    let count: u64 = load64 + c Compile.symbol_count;
    while < i count {
      // symbol : Symbol*
      let symbol = cast ptr + + c Compile.symbols * sizeof Symbol i;
      let sym_type: u64 = load64 + symbol Symbol.sym_type;
      if and eq load64 + symbol Symbol.konst 0 or eq sym_type SYM_LOCAL_VAR eq sym_type SYM_GLOBAL_VAR {
        let type: Type = 0;
        memcpy(at type, + symbol Symbol.type, sizeof Type);
        let size: u64 = load64 + symbol Symbol.size;
        let name = cast cstr + symbol Symbol.name;
        if eq 0 or eq type_base(at type) TypeNone eq type_base(at type) TypeSyscallFunc {
          {
            let args: any = i, size;
            o(fd, "v%d: resb %d", @args);
          }
          {
            let args: any = name;
            // TODO(lucas): print type
            vo(fd, " ; `%s`", @args);
          }
          o(fd, "\n", null);
        }
      }
      store64 @i + 1 i;
    }
  }
  colors_enable();
  load64 + c Compile.status;
}
