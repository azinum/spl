// lexer.spl

// Token_type
enum u64 (
  T_EOF,

  T_IDENTIFIER,
  T_NUMBER,
  T_CSTRING,
  T_ASSIGN,
  T_COMMA,
  T_AT,
  T_DEREF,
  T_ADD,
  T_SUB,
  T_MUL,
  T_DIV,
  T_DIVMOD,
  T_LSHIFT,
  T_RSHIFT,
  T_LT,
  T_GT,
  T_AND,
  T_LOGICAL_NOT,
  T_OR,
  T_EQ,
  T_NEQ,
  T_COLON,
  T_SEMICOLON,
  T_CONST,
  T_LET,
  T_MEMORY,
  T_PRINT,
  T_STATIC_ASSERT,
  T_INCLUDE,
  T_FN,
  T_ARROW,
  T_WHILE,
  T_IF,
  T_ELSE,
  T_LEFT_P,
  T_RIGHT_P,
  T_LEFT_BRACKET,
  T_RIGHT_BRACKET,
  T_LEFT_CURLY,
  T_RIGHT_CURLY,
  T_STORE64,
  T_STORE32,
  T_STORE16,
  T_STORE8,
  T_LOAD64,
  T_LOAD32,
  T_LOAD16,
  T_LOAD8,
  T_SIZEOF,
  T_ENUM,
  T_ALIAS,
  T_CAST,
  T_STRUCT,

  // built-in types
  T_NONE,
  T_ANY,
  T_PTR,
  T_UNSIGNED64,
  T_UNSIGNED32,
  T_UNSIGNED16,
  T_UNSIGNED8,
  T_CSTR,

  MAX_TOKEN_TYPE
);

let token_type_str : cstr : MAX_TOKEN_TYPE "";

struct Token (
  buffer   : ptr,
  length   : u64,
  type     : u64,
  v        : u64,
  filename : ptr,
  source   : ptr,
  line     : u64,
  column   : u64
);

let token : Token 0;

// struct Lexer {
let l.filename : cstr "";
let l.source : cstr "";
let l.index : ptr cast ptr 0;
let l.line : u64 0;
let l.column : u64 0;
let l.status : u64 0;
// };

fn token_init(token : any, buffer : any, length : u64, type : u64, filename : any, source : any) -> none {
  store64 + token Token.buffer   buffer;
  store64 + token Token.length   length;
  store64 + token Token.type     type;
  store64 + token Token.v        0;
  store64 + token Token.filename filename;
  store64 + token Token.source   source;
  store64 + token Token.line     1;
  store64 + token Token.column   1;
}

fn copy_token_into_memory(mem : any) -> none {
  store64 + mem Token.buffer   + @token Token.buffer;
  store64 + mem Token.length   + @token Token.length;
  store64 + mem Token.type     + @token Token.type;
  store64 + mem Token.v        + @token Token.v;
  store64 + mem Token.filename + @token Token.filename;
  store64 + mem Token.source   + @token Token.source;
  store64 + mem Token.line     + @token Token.line;
  store64 + mem Token.column   + @token Token.column;
}

fn token_print(token : ptr) -> none {
  let tmp tmp_it;
  let p tmp_push_cstr;

  let buffer cast cstr load64 + token Token.buffer;
  let length : u64 load64 + token Token.length;
  let type : u64 load64 + token Token.type;
  let value : u64 load64 + token Token.v;
  let filename cast cstr load64 + token Token.filename;
  let source cast cstr load64 + token Token.source;
  let line : u64 load64 + token Token.line;
  let column : u64 load64 + token Token.column;

  if eq cast u64 filename 0 store64 @filename "none";

  p("buffer   store64 "); tmp_push_str(buffer, length);
  p("\n");
  p("length   store64 "); tmp_push_u64(length);
  p("\n");
  p("type     store64 "); tmp_push_u64(type);
  p("\n");
  p("filename store64 "); p(filename);
  p("\n");
  p("line     store64 "); tmp_push_u64(line);
  p("\n");
  p("column   store64 "); tmp_push_u64(column);
  p("\n");

  putsn(STDOUT_FILENO, tmp, - tmp_it tmp);
  store64 @tmp_it tmp;
}

fn lexer_token_type -> u64 load64 + @token Token.type;

fn compare(a : cstr, b : cstr, length : u64) -> u64 {
  let result 1;
  let done 0;
  let i 0;
  while and eq done 0 < i length {
    if neq load8 a load8 b {
      store64 @done 1;
      store64 @result 0;
    }
    else {
      store64 @a + 1 a;
      store64 @b + 1 b;
    }
    store64 @i + 1 i;
  }
  and eq result 1 eq load8 b 0;
}

fn lexer_read_symbol -> none {
  while or or or or or
    is_alpha(load8 l.index)
    is_digit(load8 l.index)
    is_extended_ascii(load8 l.index)
    eq load8 l.index '_'
    eq load8 l.index '-'
    eq load8 l.index '.' {
    store64 @l.index + 1 l.index;
    store64 @l.column + 1 l.column;
  }
  store64 + @token Token.length - l.index load64 + @token Token.buffer;

  let buffer cast cstr load64 + @token Token.buffer;
  let length : u64 load64 + @token Token.length;

  if eq 1 compare(buffer, "print", length) {
    store64 + @token Token.type T_PRINT;
  }
  else if eq 1 compare(buffer, "static_assert", length) {
    store64 + @token Token.type T_STATIC_ASSERT;
  }
  else if eq 1 compare(buffer, "include", length) {
    store64 + @token Token.type T_INCLUDE;
  }
  else if eq 1 compare(buffer, "const", length) {
    store64 + @token Token.type T_CONST;
  }
  else if eq 1 compare(buffer, "let", length) {
    store64 + @token Token.type T_LET;
  }
  else if eq 1 compare(buffer, "memory", length) {
    store64 + @token Token.type T_MEMORY;
  }
  else if eq 1 compare(buffer, "fn", length) {
    store64 + @token Token.type T_FN;
  }
  else if eq 1 compare(buffer, "while", length) {
    store64 + @token Token.type T_WHILE;
  }
  else if eq 1 compare(buffer, "if", length) {
    store64 + @token Token.type T_IF;
  }
  else if eq 1 compare(buffer, "else", length) {
    store64 + @token Token.type T_ELSE;
  }
  else if eq 1 compare(buffer, "store64", length) {
    store64 + @token Token.type T_STORE64;
  }
  else if eq 1 compare(buffer, "store32", length) {
    store64 + @token Token.type T_STORE32;
  }
  else if eq 1 compare(buffer, "store16", length) {
    store64 + @token Token.type T_STORE16;
  }
  else if eq 1 compare(buffer, "store8", length) {
    store64 + @token Token.type T_STORE8;
  }
  else if eq 1 compare(buffer, "load64", length) {
    store64 + @token Token.type T_LOAD64;
  }
  else if eq 1 compare(buffer, "load32", length) {
    store64 + @token Token.type T_LOAD32;
  }
  else if eq 1 compare(buffer, "load16", length) {
    store64 + @token Token.type T_LOAD16;
  }
  else if eq 1 compare(buffer, "load8", length) {
    store64 + @token Token.type T_LOAD8;
  }
  else if eq 1 compare(buffer, "and", length) {
    store64 + @token Token.type T_AND;
  }
  else if eq 1 compare(buffer, "not", length) {
    store64 + @token Token.type T_LOGICAL_NOT;
  }
  else if eq 1 compare(buffer, "or", length) {
    store64 + @token Token.type T_OR;
  }
  else if eq 1 compare(buffer, "eq", length) {
    store64 + @token Token.type T_EQ;
  }
  else if eq 1 compare(buffer, "neq", length) {
    store64 + @token Token.type T_NEQ;
  }
  else if eq 1 compare(buffer, "lshift", length) {
    store64 + @token Token.type T_LSHIFT;
  }
  else if eq 1 compare(buffer, "rshift", length) {
    store64 + @token Token.type T_RSHIFT;
  }
  else if eq 1 compare(buffer, "sizeof", length) {
    store64 + @token Token.type T_SIZEOF;
  }
  else if eq 1 compare(buffer, "enum", length) {
    store64 + @token Token.type T_ENUM;
  }
  else if eq 1 compare(buffer, "alias", length) {
    store64 + @token Token.type T_ALIAS;
  }
  else if eq 1 compare(buffer, "cast", length) {
    store64 + @token Token.type T_CAST;
  }
  else if eq 1 compare(buffer, "struct", length) {
    store64 + @token Token.type T_STRUCT;
  }
  else if eq 1 compare(buffer, "none", length) {
    store64 + @token Token.type T_NONE;
  }
  else if eq 1 compare(buffer, "any", length) {
    store64 + @token Token.type T_ANY;
  }
  else if eq 1 compare(buffer, "ptr", length) {
    store64 + @token Token.type T_PTR;
  }
  else if eq 1 compare(buffer, "u64", length) {
    store64 + @token Token.type T_UNSIGNED64;
  }
  else if eq 1 compare(buffer, "u32", length) {
    store64 + @token Token.type T_UNSIGNED32;
  }
  else if eq 1 compare(buffer, "u16", length) {
    store64 + @token Token.type T_UNSIGNED16;
  }
  else if eq 1 compare(buffer, "u8", length) {
    store64 + @token Token.type T_UNSIGNED8;
  }
  else if eq 1 compare(buffer, "cstr", length) {
    store64 + @token Token.type T_CSTR;
  }
  else {
    store64 + @token Token.type T_IDENTIFIER;
  }
}

fn lexer_read_number -> none {
  while or is_hex(load8 l.index) eq load8 l.index 'x' {
    store64 @l.index + 1 l.index;
    store64 @l.column + 1 l.column;
  }
  store64 + @token Token.length - l.index load64 + @token Token.buffer;
  store64 + @token Token.type T_NUMBER;
}

fn lexer_error(message : cstr) -> none {
  if eq l.status NoError {
    let tmp tmp_it;
    // a bit noisey, but this will do for now
    // TODO(lucas): varadic functions to the rescue
    tmp_push_cstr("[lex-error]: ");
    tmp_push_cstr(cast cstr load64 + @token Token.filename);
    tmp_push_cstr(":");
    tmp_push_u64(load64 + @token Token.line);
    tmp_push_cstr(":");
    tmp_push_u64(load64 + @token Token.column);
    tmp_push_cstr(": ");
    tmp_push_cstr(message);
    putsn(STDERR_FILENO, tmp, - tmp_it tmp);
    store64 @tmp_it tmp;
    store64 @l.status Error;
  }
}

fn next -> none {
  store64 + @token Token.buffer l.index;
  store64 + @token Token.length 1;
  store64 + @token Token.line l.line;
  store64 + @token Token.column l.column;
}

fn lexer_next -> none {
  let done 0;
  let ch 0;
  while not done {
    next();
    store64 @ch load8 load64 + @token Token.buffer;
    store64 + @token Token.filename l.filename;
    store64 + @token Token.source l.source;
    store64 + @token Token.column l.column;
    store64 @l.index + 1 l.index;
    store64 @l.column + 1 l.column;

    if eq ch 13 { // `\r`
      store64 @l.column 1;
      if neq 10 load8 l.index {
        store64 @l.line + 1 l.line
      }
      store64 + @token Token.column l.column;
    }
    else if eq ch 10 { // `\n`
      store64 @l.line + 1 l.line;
      store64 @l.column 1;
      store64 + @token Token.column l.column;
    }
    else if eq ch '/' {
      if eq '/' load8 l.index {
        while and neq load8 l.index 10 neq load8 l.index 0 {
          store64 @l.index + 1 l.index;
          store64 @l.column + 1 l.column;
          store64 + @token Token.column l.column;
        }
      }
      else {
        store64 + @token Token.type T_DIV;
        store64 @done 1;
      }
    }
    else if eq ch '"' {
      let delimiter ch;
      let loop_done 0;
      while eq loop_done 0 {
        if eq load8 l.index 0 {
          lexer_error("unfinished string\n");
          store64 + @token Token.type T_EOF;
          store64 @loop_done 1;
          store64 @done 1;
        }
        else if eq load8 l.index 92 { // `\\`
          if eq load8 + l.index 1 '0' {
            store8 l.index 0;
            store64 @l.index + 1 l.index;
          }
          else if eq load8 + l.index 1 'n' { // `\n`
            store8 l.index 10;
            store64 @l.index + 1 l.index;
          }
          store64 @l.index + 1 l.index;
          store64 @l.column + 1 l.column;
        }
        else if eq load8 l.index delimiter {
          store64 @loop_done 1;
        }
        else {
          store64 @l.index + 1 l.index;
          store64 @l.column + 1 l.column;
        }
      }
      store64 + @token Token.buffer + 1 load64 + @token Token.buffer;
      store64 @l.column + 1 l.column;
      store64 + @token Token.type T_CSTRING;
      store64 + @token Token.length - l.index load64 + @token Token.buffer;
      store64 @l.index + 1 l.index;
      store64 @done 1;
    }
    else if eq ch '=' {
      store64 + @token Token.type T_ASSIGN;
      store64 @done 1;
    }
    else if eq ch ',' {
      store64 + @token Token.type T_COMMA;
      store64 @done 1;
    }
    else if eq ch '@' {
      store64 + @token Token.type T_AT;
      store64 @done 1;
    }
    else if eq ch '#' {
      store64 + @token Token.type T_DEREF;
      store64 @done 1;
    }
    else if eq ch '+' {
      store64 + @token Token.type T_ADD;
      store64 @done 1;
    }
    else if eq ch '-' {
      if eq load8 l.index '>' {
        store64 @l.index + 1 l.index;
        store64 @l.column + 1 l.column;
        store64 + @token Token.length + 1 load64 + @token Token.length;
        store64 + @token Token.type T_ARROW;
        store64 @done 1;
      }
      else {
        store64 + @token Token.type T_SUB;
        store64 @done 1;
      }
    }
    else if eq ch '*' {
      store64 + @token Token.type T_MUL;
      store64 @done 1;
    }
    else if eq ch '%' {
      store64 + @token Token.type T_DIVMOD;
      store64 @done 1;
    }
    else if eq ch '<' {
      store64 + @token Token.type T_LT;
      store64 @done 1;
    }
    else if eq ch '>' {
      store64 + @token Token.type T_GT;
      store64 @done 1;
    }
    else if eq ch ':' {
      store64 + @token Token.type T_COLON;
      store64 @done 1;
    }
    else if eq ch ';' {
      store64 + @token Token.type T_SEMICOLON;
      store64 @done 1;
    }
    else if eq ch '(' {
      store64 + @token Token.type T_LEFT_P;
      store64 @done 1;
    }
    else if eq ch ')' {
      store64 + @token Token.type T_RIGHT_P;
      store64 @done 1;
    }
    else if eq ch '[' {
      store64 + @token Token.type T_LEFT_BRACKET;
      store64 @done 1;
    }
    else if eq ch ']' {
      store64 + @token Token.type T_RIGHT_BRACKET;
      store64 @done 1;
    }
    else if eq ch '{' {
      store64 + @token Token.type T_LEFT_CURLY;
      store64 @done 1;
    }
    else if eq ch '}' {
      store64 + @token Token.type T_RIGHT_CURLY;
      store64 @done 1;
    }
    else if or or or eq ch ' ' eq ch 9 eq ch 11 eq ch 12 { // ` `, `\t`, `\v`, `\f`
    }
    else if eq ch 0 {
      store64 + @token Token.type T_EOF;
      store64 @done 1;
    }
    else if eq ch 39 { // `\'`
      store64 @ch load8 l.index;
      store64 + @token Token.buffer l.index;
      store64 @l.index + 1 l.index;
      store64 @l.column + 1 l.column;
      if neq load8 l.index 39 {
        store64 + @token Token.type T_EOF;
        lexer_error("missing closing `'`\n");
      }
      else {
        store64 @l.index + 1 l.index;
        store64 @l.column + 1 l.column;
        store64 + @token Token.v ch;
        store64 + @token Token.type T_NUMBER;
        store64 + @token Token.length 1;
      }
      store64 @done 1;
    }
    else {
      if or or is_alpha(ch) is_extended_ascii(ch) eq ch '_' {
        lexer_read_symbol();
        store64 @done 1;
      }
      else if is_digit(ch) {
        lexer_read_number();
        let number str_to_u64(cast cstr load64 + @token Token.buffer, load64 + @token Token.length);
        store64 + @token Token.v number;
        store64 @done 1;
      }
      else {
        let tmp tmp_it;
        tmp_push_cstr("unrecognized token `");
        tmp_push_str(load64 + @token Token.buffer, load64 + @token Token.length);
        tmp_push_cstr("`\n");
        tmp_push_byte(cast u8 0); // null-terminator
        lexer_error(cast cstr tmp);
        store64 @tmp_it tmp;
        store64 + @token Token.type T_EOF;
        store64 @done 1;
      }
    }
  }
  store64 + @token Token.line l.line;
}

fn lexer_init(filename : any, source : any) -> none {
  // initialize lexer state
  store64 @l.filename filename;
  store64 @l.source source;
  store64 @l.index source;
  store64 @l.line 1;
  store64 @l.column 1;
  store64 @l.status NoError;

  // initialize lexer token
  store64 + @token Token.buffer source;
  store64 + @token Token.length 0;
  store64 + @token Token.type T_EOF;
  store64 + @token Token.v 0;
  store64 + @token Token.filename filename;
  store64 + @token Token.source source;
  store64 + @token Token.line 1;
  store64 + @token Token.column 1;

  store64 + @token_type_str * T_EOF           sizeof cstr "T_EOF";
  store64 + @token_type_str * T_IDENTIFIER    sizeof cstr "T_IDENTIFIER";
  store64 + @token_type_str * T_NUMBER        sizeof cstr "T_NUMBER";
  store64 + @token_type_str * T_CSTRING       sizeof cstr "T_CSTRING";
  store64 + @token_type_str * T_ASSIGN        sizeof cstr "T_ASSIGN";
  store64 + @token_type_str * T_COMMA         sizeof cstr "T_COMMA";
  store64 + @token_type_str * T_AT            sizeof cstr "T_AT";
  store64 + @token_type_str * T_DEREF         sizeof cstr "T_DEREF";
  store64 + @token_type_str * T_ADD           sizeof cstr "T_ADD";
  store64 + @token_type_str * T_SUB           sizeof cstr "T_SUB";
  store64 + @token_type_str * T_MUL           sizeof cstr "T_MUL";
  store64 + @token_type_str * T_DIV           sizeof cstr "T_DIV";
  store64 + @token_type_str * T_DIVMOD        sizeof cstr "T_DIVMOD";
  store64 + @token_type_str * T_LSHIFT        sizeof cstr "T_LSHIFT";
  store64 + @token_type_str * T_RSHIFT        sizeof cstr "T_RSHIFT";
  store64 + @token_type_str * T_LT            sizeof cstr "T_LT";
  store64 + @token_type_str * T_GT            sizeof cstr "T_GT";
  store64 + @token_type_str * T_AND           sizeof cstr "T_AND";
  store64 + @token_type_str * T_LOGICAL_NOT   sizeof cstr "T_LOGICAL_NOT";
  store64 + @token_type_str * T_OR            sizeof cstr "T_OR";
  store64 + @token_type_str * T_EQ            sizeof cstr "T_EQ";
  store64 + @token_type_str * T_NEQ           sizeof cstr "T_NEQ";
  store64 + @token_type_str * T_COLON         sizeof cstr "T_COLON";
  store64 + @token_type_str * T_SEMICOLON     sizeof cstr "T_SEMICOLON";
  store64 + @token_type_str * T_CONST         sizeof cstr "T_CONST";
  store64 + @token_type_str * T_LET           sizeof cstr "T_LET";
  store64 + @token_type_str * T_MEMORY        sizeof cstr "T_MEMORY";
  store64 + @token_type_str * T_PRINT         sizeof cstr "T_PRINT";
  store64 + @token_type_str * T_INCLUDE       sizeof cstr "T_INCLUDE";
  store64 + @token_type_str * T_FN            sizeof cstr "T_FN";
  store64 + @token_type_str * T_ARROW         sizeof cstr "T_ARROW";
  store64 + @token_type_str * T_WHILE         sizeof cstr "T_WHILE";
  store64 + @token_type_str * T_IF            sizeof cstr "T_IF";
  store64 + @token_type_str * T_ELSE          sizeof cstr "T_ELSE";
  store64 + @token_type_str * T_LEFT_P        sizeof cstr "T_LEFT_P";
  store64 + @token_type_str * T_RIGHT_P       sizeof cstr "T_RIGHT_P";
  store64 + @token_type_str * T_LEFT_BRACKET  sizeof cstr "T_LEFT_BRACKET";
  store64 + @token_type_str * T_RIGHT_BRACKET sizeof cstr "T_RIGHT_BRACKET";
  store64 + @token_type_str * T_LEFT_CURLY    sizeof cstr "T_LEFT_CURLY";
  store64 + @token_type_str * T_RIGHT_CURLY   sizeof cstr "T_RIGHT_CURLY";
  store64 + @token_type_str * T_STORE64       sizeof cstr "T_STORE64";
  store64 + @token_type_str * T_STORE32       sizeof cstr "T_STORE32";
  store64 + @token_type_str * T_STORE16       sizeof cstr "T_STORE16";
  store64 + @token_type_str * T_STORE8        sizeof cstr "T_STORE8";
  store64 + @token_type_str * T_LOAD64        sizeof cstr "T_LOAD64";
  store64 + @token_type_str * T_LOAD32        sizeof cstr "T_LOAD32";
  store64 + @token_type_str * T_LOAD16        sizeof cstr "T_LOAD16";
  store64 + @token_type_str * T_LOAD8         sizeof cstr "T_LOAD8";
  store64 + @token_type_str * T_SIZEOF        sizeof cstr "T_SIZEOF";
  store64 + @token_type_str * T_ENUM          sizeof cstr "T_ENUM";
  store64 + @token_type_str * T_ALIAS         sizeof cstr "T_ALIAS";
  store64 + @token_type_str * T_CAST          sizeof cstr "T_CAST";
  store64 + @token_type_str * T_STRUCT        sizeof cstr "T_STRUCT";

  // built-in types
  store64 + @token_type_str * T_NONE          sizeof cstr "T_NONE";
  store64 + @token_type_str * T_ANY           sizeof cstr "T_ANY";
  store64 + @token_type_str * T_PTR           sizeof cstr "T_PTR";
  store64 + @token_type_str * T_UNSIGNED64    sizeof cstr "T_UNSIGNED64";
  store64 + @token_type_str * T_UNSIGNED32    sizeof cstr "T_UNSIGNED32";
  store64 + @token_type_str * T_UNSIGNED16    sizeof cstr "T_UNSIGNED16";
  store64 + @token_type_str * T_UNSIGNED8     sizeof cstr "T_UNSIGNED8";
  store64 + @token_type_str * T_CSTR          sizeof cstr "T_CSTR";
}
