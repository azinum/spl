// common.spl

const TIME_NANOSECONDS_DENOM 1000000;
const NUM_LINES_TO_PRINT 2;

fn HERE dprintf(STDOUT_FILENO, "HERE\n", NULL);

fn err(message : cstr) -> none {
  dprintf(STDERR_FILENO, "[error]: %s", @message);
}

fn error(message : cstr, args : any) -> none {
  dprintf(STDERR_FILENO, "[error]: ", NULL);
  dprintf(STDERR_FILENO, message, args);
}

fn print_info(message : cstr) -> none {
  if load64 + @options Options.verbose {
    dprintf(STDOUT_FILENO, "[info]: ", NULL);
    dprintf(STDOUT_FILENO, message, NULL);
  }
}

fn exec_command_echoed(fd : u64, command_list : ptr) -> none {
  if load64 + @options Options.verbose {
    let it command_list;
    let done : u64 0;
    printf("[cmd]: ", NULL);
    while eq done 0 {
      if eq load64 it NULL {
        store64 @done 1;
      }
      else {
        printf("%s ", it);
        store64 @it + sizeof cstr it;
      }
    }
    printf("\n", NULL);
  }
  exec_command(command_list);
}

// message : cstr, time_start : timespec*, time_end : timespec*
fn print_time_elapsed(message : cstr, time_start : ptr, time_end : ptr) -> none {
  let info tmp_it;
  let args : any (
    message,
    - load64 + time_end timespec.tv_sec load64 + time_start timespec.tv_sec,
    - load64 + time_end timespec.tv_nsec load64 + time_start timespec.tv_nsec
  );
  sprintf(cast ptr info, "%s %d seconds and %d nanoseconds\n", @args);
  print_info(cast cstr info);
}
