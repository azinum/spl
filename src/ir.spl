// ir.spl

// Ir_code
enum u64 (
  I_NOP,
  I_POP,
  I_MOVE_LOCAL, // <size, local_id, x>
  I_STORE64,
  I_STORE32,
  I_STORE16,
  I_STORE8,
  I_LOAD64,
  I_LOAD32,
  I_LOAD16,
  I_LOAD8,
  I_PUSH_ADDR_OF, // <x, id, x>
  I_PUSH_LOCAL_ADDR_OF, // <x, local_id, x>
  I_PUSH, // <type, id, size>
  I_PUSH_LOCAL, // <size, local_id, x>
  I_PUSH_IMM, // <size, imm, x>
  I_ADD,
  I_SUB,
  I_MUL,
  I_LSHIFT,
  I_RSHIFT,
  I_DIV,
  I_DIVMOD,
  I_LT,
  I_GT,
  I_AND,
  I_LOGICAL_NOT,
  I_NOT,
  I_OR,
  I_XOR,
  I_EQ,
  I_NEQ,
  I_RET, // <x, frame_size, x>
  I_NORET, // <x, frame_size, x>
  I_PRINT,
  I_LABEL,
  I_CALL, // <label, argc, rtype>
  I_ADDR_CALL, // <x, argc, rtype>
  I_JMP, // <label, positite_offset, negative_offset>
  I_JZ, // <label, offset, x>
  I_BEGIN_FUNC, // <x, argc, frame_size>
  I_LOOP_LABEL,

  I_SYSCALL0,
  I_SYSCALL1,
  I_SYSCALL2,
  I_SYSCALL3,
  I_SYSCALL4,
  I_SYSCALL5,
  I_SYSCALL6,

  MAX_IR_CODE
);

let ir_code_str = cast cstr[MAX_IR_CODE] "";
let ir_code_count: u64[MAX_IR_CODE] = 0;

fn ir_func_signature(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 NoError;
let _ir_compile = ir_func_signature;

enum u64 (
  TARGET_LINUX_NASM_X86_64,
  MAX_COMPILE_TARGET
);

fn OP(i: u64, op: ptr<Op>) -> none {
  store64 + op Op.i    i;
  store64 + op Op.dest NONE;
  store64 + op Op.src0 NONE;
  store64 + op Op.src1 NONE;
}

fn OP_init(i: u64, dest: u64, src0: u64, src1: u64, op: ptr<Op>) -> none {
  store64 + op Op.i    i;
  store64 + op Op.dest dest;
  store64 + op Op.src0 src0;
  store64 + op Op.src1 src1;
}

fn fetch_op(i: u64) -> ptr<Op> {
  cast ptr<Op> + + c Compile.ins * sizeof Op i;
}

fn ir_compile_warning(message: cstr) -> none {
  if eq load64 + @options Options.enable_warnings 1 {
    dprintf(STDERR_FILENO, "[ir-compile-warning]: %s", @message);
  }
  store64 + c Compile.warning_count + 1 load64 + c Compile.warning_count;
}

fn ir_compile_warning_at(token: ptr, message: cstr) -> none {
  if eq load64 + @options Options.enable_warnings 1 {
    let args: any = (
      load64 + token Token.filename,
      load64 + token Token.line,
      load64 + token Token.column,
      message
    );
    dprintf(STDERR_FILENO, "[ir-compile-warning]: %s:%d:%d: %s", @args);
    printline(STDERR_FILENO, cast cstr load64 + token Token.source, cast cstr load64 + token Token.buffer, load64 + token Token.length, 1, NUM_LINES_TO_PRINT);
  }
  store64 + c Compile.warning_count + 1 load64 + c Compile.warning_count;
}

fn ir_print(fd: u64) -> none {
  puts(fd, "ir_print:\n");
  let i: u64 = 0;
  let count: u64 = load64 + c Compile.ins_count;
  while < i count {
    // op: Op*
    let op = cast ptr + + c Compile.ins * sizeof Op i;
    let message = cast cstr tmp_it;

    let num_digits: u64 = digit_count(i);
    const num_zeros: u64 = 4;
    let j: u64 = 0;
    while < j - num_zeros num_digits {
      tmp_push_cstr("0");
      store64 @j + 1 j;
    }
    let dest: u64 = load64 + op Op.dest;
    let src0: u64 = load64 + op Op.src0;
    let src1: u64 = load64 + op Op.src1;
    tmp_push_u64(i);
    tmp_push_cstr(": ");
    tmp_push_cstr("<");
    tmp_push_cstr(cast cstr load64 + @ir_code_str * sizeof cstr load64 + op Op.i);
    tmp_push_cstr(", ");
    // NOTE(lucas): ugly hack to print UINT64_MAX
    if neq dest UINT64_MAX tmp_push_u64(dest); else tmp_push_cstr("-1");
    tmp_push_cstr(", ");
    if neq src0 UINT64_MAX tmp_push_u64(src0); else tmp_push_cstr("-1");
    tmp_push_cstr(", ");
    if neq src1 UINT64_MAX tmp_push_u64(src1); else tmp_push_cstr("-1");
    tmp_push_cstr(">\n");
    tmp_push_byte(cast u8 0);

    puts(fd, message);
    store64 @tmp_it message;
    store64 @i + 1 i;
  }
}

fn ir_print_html(fd: u64) -> none {
  html_tag(fd, "h1", "IR", null);
  html_single_tag(fd, "table");
    html_single_tag(fd, "tr");
      html_tag(fd, "th", "Index", null);
      html_tag(fd, "th", "Instruction", null);
      html_tag(fd, "th", "Dest", null);
      html_tag(fd, "th", "Src0", null);
      html_tag(fd, "th", "Src1", null);
    html_single_end_tag(fd, "tr");
  let i: u64 = 0;
  let count: u64 = load64 + c Compile.ins_count;
  while < i count {
    let op = fetch_op(i);
    let ins_name = cast cstr load64 + @ir_code_str * sizeof cstr load64 + op Op.i;
    let dest: u64 = load64 + op Op.dest;
    let src0: u64 = load64 + op Op.src0;
    let src1: u64 = load64 + op Op.src1;
    html_single_tag(fd, "tr");
      html_tag(fd, "td", "%d", @i);
      html_tag(fd, "td", "%s", @ins_name);
      if neq dest NONE html_tag(fd, "td", "%d", @dest); else html_tag(fd, "td", "-1", null);
      if neq src0 NONE html_tag(fd, "td", "%d", @src0); else html_tag(fd, "td", "-1", null);
      if neq src1 NONE html_tag(fd, "td", "%d", @src1); else html_tag(fd, "td", "-1", null);
    html_single_end_tag(fd, "tr");
    store64 at i + 1 i;
  }
  html_single_end_tag(fd, "table");
}

fn ir_print_ins_count(fd: u64) -> none {
  dprintf(fd, "ir_print_ins_count:\n", null);
  let i = 0;
  while < i MAX_IR_CODE {
    let ir_str = cast cstr load64 + at ir_code_str * sizeof cstr i;
    let ir_ins_count = load64 + at ir_code_count * sizeof u64 i;
    let args: any = (ir_str, ir_ins_count);
    dprintf(fd, "%s: %d\n", @args);
    store64 at i + 1 i;
  }
}

fn ir_push_ins(op: ptr<Op>, ins_count: ptr<u64>) -> u64 {
  if < load64 + c Compile.ins_count MAX_INS {
    if ins_count {
      store64 ins_count + 1 deref ins_count;
    }
    memcpy(+ + c Compile.ins * sizeof Op load64 + c Compile.ins_count, op, sizeof Op);
    store64 + c Compile.ins_count + 1 load64 + c Compile.ins_count;

    let ir_ins_count = cast ptr<u64> + at ir_code_count * sizeof u64 load64 + op Op.i;
    store64 ir_ins_count + deref ir_ins_count 1;
  }
  else {
    assert(0, "reached instruction capacity\n");
  }
  NoError;
}

fn ir_push_symbol(fs: ptr<Function>, symbol: ptr<Symbol>, id: u64, ins_count: ptr<u64>) -> u64 {
  let sym_type: u64 = load64 + symbol Symbol.sym_type;
  let op: Op = 0;
  let type: Type = 0;
  memcpy(at type, + symbol Symbol.type, sizeof Type);
  let size: u64 = load64 + at type Type.size;

  if eq sym_type SYM_FUNC {
    OP_init(
      I_PUSH,
      type_base(at type),
      id,
      size,
      at op
    );
  }
  else if eq sym_type SYM_LOCAL_VAR {
    if load64 + symbol Symbol.konst {
      OP_init(
        I_PUSH,
        type_base(at type),
        id,
        size,
        at op
      );
    }
    else {
      OP_init(
        I_PUSH_LOCAL,
        size,
        load64 + symbol Symbol.local_id,
        NONE,
        at op
      );
    }
  }
  else if eq sym_type SYM_GLOBAL_VAR {
    OP_init(
      I_PUSH,
      type_base(at type),
      id,
      size,
      at op
    );
  }
  else if eq sym_type SYM_FUNC_ARG {
    let arg_id: u64 = load64 + + symbol Symbol.token Token.v;
    assert(neq arg_id UINT64_MAX, "invalid argument id\n");
    OP_init(
      I_PUSH_LOCAL,
      size,
      * sizeof u64 + 1 arg_id,
      NONE,
      at op
    );
  }
  else {
    assert(0, "symbol type not implemented\n");
  }
  { let _ = ir_push_ins(at op, ins_count); }
  load64 + c Compile.status;
}

fn ir_push_addr_of(fs: ptr<Function>, symbol: ptr<Symbol>, id: u64, ins_count: ptr<u64>) -> u64 {
  let sym_type: u64 = load64 + symbol Symbol.sym_type;
  let op: Op = 0;
  if eq sym_type SYM_FUNC {
    OP_init(
      I_PUSH_ADDR_OF,
      NONE,
      id,
      NONE,
      at op
    );
  }
  else if eq sym_type SYM_LOCAL_VAR {
    if eq load64 + symbol Symbol.konst 1 {
      OP_init(
        I_PUSH_ADDR_OF,
        NONE,
        id,
        NONE,
        at op
      );
    }
    else {
      OP_init(
        I_PUSH_LOCAL_ADDR_OF,
        NONE,
        load64 + symbol Symbol.local_id,
        NONE,
        at op
      );
    }
  }
  else if eq sym_type SYM_GLOBAL_VAR {
    OP_init(
      I_PUSH_ADDR_OF,
      NONE,
      id,
      NONE,
      at op
    );
  }
  else if eq sym_type SYM_FUNC_ARG {
    store64 @id load64 + + symbol Symbol.token Token.v;
    OP_init(
      I_PUSH_LOCAL_ADDR_OF,
      NONE,
      * sizeof u64 + 1 id,
      NONE,
      at op
    );
  }
  else {
    assert(0, "symbol type not implemented\n");
  }

  { let _ = ir_push_ins(at op, ins_count); }
  load64 + c Compile.status;
}

fn ir_compile_nodes(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  let i: u64 = 0;
  let count: u64 = load64 + ast Ast.count;
  let done: u64 = 0;
  while and eq done 0 < i count {
    if neq _ir_compile(fs, cast ptr load64 + + ast Ast.node * sizeof ptr i, ins_count) NoError {
      store64 @done 1;
    }
    store64 @i + 1 i;
  }
  load64 + c Compile.status;
}

fn ir_compile_value(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  let token: ptr = + ast Ast.token;
  let token_type: u64 = load64 + token Token.type;
  if eq token_type T_NUMBER {
    let imm: u64 = compile_push_value(+ token Token.v, sizeof u64);
    if neq imm UINT64_MAX {
      let op: Op = 0;
      OP_init(
        I_PUSH_IMM,
        sizeof u64,
        imm,
        NONE,
        at op
      );
      { let _ = ir_push_ins(at op, ins_count); }
    }
    else {
      assert(0, "out of immediate data memory\n");
    }
  }
  else if eq token_type T_CSTRING {
    let index: u64 = UINT64_MAX;
    let address: u64 = compile_push_cstring(cast ptr load64 + + ast Ast.token Token.buffer, load64 + + ast Ast.token Token.length, @index);
    if neq address UINT64_MAX {
      let op: Op = 0;
      OP_init(
        I_PUSH,
        TypeCString,
        index,
        NONE,
        at op
      );
      { let _ = ir_push_ins(at op, ins_count); }
    }
  }
  else if eq token_type T_IDENTIFIER {
    let id: u64 = load64 + + ast Ast.token Token.v;
    let symbol = cast ptr<Symbol> + + c Compile.symbols * sizeof Symbol id;
    { let _ = ir_push_symbol(fs, symbol, id, ins_count); }
  }
  else if or eq token_type T_AT eq token_type T_AT_WORD {
    let id: u64 = load64 + + ast Ast.token Token.v;
    let symbol = cast ptr<Symbol> + + c Compile.symbols * sizeof Symbol id;
    { let _ = ir_push_addr_of(fs, symbol, id, ins_count); }
  }
  else {
    assert(0, "value type not implemented\n");
  }
  load64 + c Compile.status;
}

fn ir_compile_func_call_args(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  let count: u64 = load64 + ast Ast.count;
  if > count 0 {
    let i: u64 = - count 1;
    let done: u64 = 0;
    while eq done 0 {
      if neq _ir_compile(fs, cast ptr load64 + + ast Ast.node * sizeof ptr i, ins_count) NoError {
        store64 @done 1;
      }
      if eq i 0 {
        store64 @done 1;
      }
      store64 @i - i 1;
    }
  }
  load64 + c Compile.status;
}

fn ir_compile_binop(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  assert(eq load64 + ast Ast.count 2, "expected 2 branches in binary operator expression\n");
  { let _ = _ir_compile(fs, cast ptr load64 + + ast Ast.node * sizeof ptr 0, ins_count); }
  { let _ = _ir_compile(fs, cast ptr load64 + + ast Ast.node * sizeof ptr 1, ins_count); }
  load64 + c Compile.status;
}

fn ir_compile_uop(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  assert(eq load64 + ast Ast.count 1, "expected 1 branch in unary operator expression\n");
  _ir_compile(fs, cast ptr load64 + + ast Ast.node * sizeof ptr 0, ins_count);
}

fn ir_compile_let_statement(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  let id: u64 = load64 + + ast Ast.token Token.v;
  let symbol = cast ptr + + c Compile.symbols * sizeof Symbol id;

  let node = cast ptr load64 + + ast Ast.node * sizeof ptr 0;
  let count: u64 = ast_count(node);
  if eq count 1 {
    memcpy(+ symbol Symbol.token, + node Ast.token, sizeof Token);
  }

  let type = cast ptr<Type> + symbol Symbol.type;

  if eq type_base(type) TypeCString {
    // NOTE(lucas): we change type from cstr -> ptr<cstr> because symbol is pointing to a string
    // TODO(lucas): ir code generator should not be responsible for this
    const count = 2;
    let contract: Type[count] = 0;
    type_init(cast ptr<Type> + at contract * sizeof Type 0, TypePtr, 0, sizeof ptr, 1);
    memcpy(cast ptr<Type> + at contract * sizeof Type 1, type, sizeof Type);
    let _ = type_from_contract(cast ptr<Type> at contract, count, TYPE_CONTRACT_CREATE, type); // TODO(lucas): handle error
  }
  // NOTE(lucas): completely ignore the rhs of the let statement if it is in the global scope
  // TODO(lucas): figure out how to deal with globals when it comes to their value assignment(s)
  if fs {
      let type_id: u64 = type_lookup(type);
      assert(neq type_id UINT64_MAX, "invalid type\n"); // should not fail, but let's keep this here for now
      let type_size: u64 = compile_type_size(type_id);
      assert(neq type_size 0, "invalid size of type\n");
      let size: u64 = load64 + symbol Symbol.size;
      let num_elements: u64 = / load64 + symbol Symbol.size type_size;
      let num_elements_init: u64 = load64 + symbol Symbol.num_elements_init;
      const BOUNDARY_ALIGNMENT = 8;
      let frame_size = align(size, BOUNDARY_ALIGNMENT);

      let effective_frame_size = * num_elements_init type_size;
      // ir code generation for let statements (in a function with 0 arguments)
      // example:
      //   let a: u64 = 1, 2, 3;
      //
      // FRAME:
      //   ELEM IDX   | OFFSET     | NOTES
      //   -          | 8  -> 0    | spill due to boundary alignment
      //   2          | 16 -> 8    | bottom
      //   1          | 24 -> 16   |
      //   0          | 32 -> 24   | top
      //
      // element 0 is located at the `top` of the frame
      //
      // boundary_size = 16
      // frame_size = align(3*8, boundary_size) = 32

      let frame_absolute_bottom = load64 + fs Function.locals_offset;
      let args_size = * sizeof u64 load64 + fs Function.argc;
      let frame_bottom = + args_size + frame_absolute_bottom - frame_size effective_frame_size;

      let local_index = + frame_bottom type_size;
      if and neq type_base(type) TypeStruct neq type_base(type) TypeUnion {
        if eq ir_compile_nodes(fs, ast, ins_count) NoError {
          let i = 0;
          let count = num_elements_init;
          while < i count {
            let op: Op = 0;
            OP_init(
              I_MOVE_LOCAL,
              type_size,
              local_index,
              NONE,
              at op
            );
            { let _ = ir_push_ins(at op, ins_count); }
            store64 @i + 1 i;
            if < i count {
              store64 @local_index + local_index type_size;
            }
          }
        }
      }
      store64 + symbol Symbol.local_id local_index;
      store64 + fs Function.locals_offset + frame_absolute_bottom frame_size;
  }
  load64 + c Compile.status;
}

fn ir_compile_func(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  let body = cast ptr load64 + + ast Ast.node * sizeof ptr 1;
  let id: u64 = load64 + + ast Ast.token Token.v;
  assert(neq id UINT64_MAX, "bad function id\n");

  let symbol = cast ptr<Symbol> + + c Compile.symbols * sizeof Symbol id;
  let ref_count: u64 = load64 + symbol Symbol.ref_count;

  if not and eq ref_count 0 eq load64 + @options Options.disable_dce 0 {
    let func = cast ptr<Function> + + symbol Symbol.value Value.func;
    let type = cast ptr<Type> + symbol Symbol.type;
    let func_sig = func_signature_from_id(type_sub_id(type));
    let argc = load64 + func_sig Func_signature.argc;

    let op: Op = 0;
    OP_init(
      I_LABEL,
      id,
      NONE,
      NONE,
      at op
    );
    { let _ = ir_push_ins(at op, ins_count); }
    store64 + func Function.ir_address load64 + c Compile.ins_count;

    let begin_func_address: u64 = load64 + c Compile.ins_count; // we don't know how many local variables there are in this function until the function body is compiled, therefore we store the index to the I_BEGIN_FUNC instruction so that we can change it later when we do.
    OP_init(
      I_BEGIN_FUNC,
      NONE,
      argc,
      0,
      at op
    );
    { let _ = ir_push_ins(at op, ins_count); }

    let func_size: u64 = 0;
    { let _ = ir_compile_nodes(func, body, at func_size); }
    store64 + func Function.ir_body_size func_size;

    let begin_func = cast ptr<Op> + + c Compile.ins * sizeof Op begin_func_address;
    let frame_size: u64 = + load64 + func Function.locals_offset * sizeof u64 argc;
    const FRAME_ALIGNMENT = 8;
    store64 @frame_size align(frame_size, FRAME_ALIGNMENT);
    store64 + begin_func Op.src1 frame_size;
    let ret_op: u64 = I_RET;
    let rtype = cast ptr<Type> + func_sig Func_signature.rtype;
    if eq type_base(rtype) TypeNone {
      store64 @ret_op I_NORET;
    }
    OP_init(
      ret_op,
      NONE,
      frame_size,
      NONE,
      at op
    );
    { let _ = ir_push_ins(at op, ins_count); }
  }
  load64 + c Compile.status;
}

fn ir_compile_func_call(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  let id: u64 = load64 + + ast Ast.token Token.v;
  let symbol = cast ptr + + c Compile.symbols * sizeof Symbol id;

  let func = cast ptr<Function> + + symbol Symbol.value Value.func;
  let args = cast ptr load64 + + ast Ast.node * sizeof ptr 0;
  if eq ir_compile_func_call_args(fs, args, ins_count) NoError { // compile function arguments in reverse order
    let type: Type = 0;
    memcpy(at type, + symbol Symbol.type, sizeof Type);

    let func_sig = func_signature_from_id(type_sub_id(at type));

    let rtype: Type = 0;
    memcpy(at rtype, + func_sig Func_signature.rtype, sizeof Type);

    let op: Op = 0;
    if or eq type_base(at type) TypeAny eq type_base(at type) TypeFunc {

      let sym_type: u64 = load64 + symbol Symbol.sym_type;
      let rvalue: u64 = NONE;
      let argc: u64 = load64 + func_sig Func_signature.argc;

      if neq type_base(at rtype) TypeNone {
        store64 @rvalue 0;
      }
      if eq sym_type SYM_FUNC {
        OP_init(
          I_CALL,
          id,
          argc,
          rvalue,
          at op
        );
        { let _ = ir_push_ins(at op, ins_count); }
      }
      else if eq sym_type SYM_LOCAL_VAR {
        assert(eq load64 + symbol Symbol.konst 0, "something went very wrong\n");
        OP_init(
          I_PUSH_LOCAL,
          load64 + at type Type.size,
          load64 + symbol Symbol.local_id,
          NONE,
          at op
        );
        { let _ = ir_push_ins(at op, ins_count); }
        OP_init(
          I_ADDR_CALL,
          NONE,
          argc,
          rvalue,
          at op
        );
        { let _ = ir_push_ins(at op, ins_count); }
      }
      else if eq sym_type SYM_GLOBAL_VAR {
        OP_init(
          I_PUSH,
          type_base(at type),
          id,
          load64 + at type Type.size,
          at op
        );
        { let _ = ir_push_ins(at op, ins_count); }
        OP(I_LOAD64, at op); // NOTE(lucas): dereference the variable and get access to the function pointer
        { let _ = ir_push_ins(at op, ins_count); }
        OP_init(
          I_ADDR_CALL,
          NONE,
          argc,
          rvalue,
          at op
        );
        { let _ = ir_push_ins(at op, ins_count); }
      }
      else if eq sym_type SYM_FUNC_ARG {
        OP_init(
          I_PUSH_LOCAL,
          load64 + at type Type.size,
          load64 + symbol Symbol.local_id,
          NONE,
          at op
        );
        { let _ = ir_push_ins(at op, ins_count); }
        OP_init(
          I_ADDR_CALL,
          NONE,
          argc,
          rvalue,
          at op
        );
        { let _ = ir_push_ins(at op, ins_count); }
      }
      else {
        assert(0, "function call of this symbol type is not implemented\n");
      }
    }
    else if eq type_base(at type) TypeSyscallFunc {
      const syscall_map: u64 = (
        I_SYSCALL0,
        I_SYSCALL1,
        I_SYSCALL2,
        I_SYSCALL3,
        I_SYSCALL4,
        I_SYSCALL5,
        I_SYSCALL6
      );
      let func_sig = func_signature_from_id(type_sub_id(at type));
      OP(load64 + @syscall_map * sizeof u64 - load64 + func_sig Func_signature.argc 1, at op);
      { let _ = ir_push_ins(at op, ins_count); }
    }
    else {
      compile_error_at(+ ast Ast.token, "not a function and can not be called\n");
    }
  }
  load64 + c Compile.status;
}

fn ir_compile_assignment(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  if eq ir_compile_binop(fs, ast, ins_count) NoError {
    let type_context_id = load64 + ast Ast.type_context_id;
    assert(neq type_context_id UINT64_MAX, "ir_compile_assignment: bad context id\n");
    let type_context = type_context_from_id(type_context_id);
    let type = cast ptr<Type> + type_context Type_context.type;
    let size = load64 + type Type.size;
    let store_ins = I_STORE64;
    if eq size 0 {
      assert(0, "ir_compile_assignment: bad assignment size\n");
    }
    else if < size 2 { // <= 1
      store64 at store_ins I_STORE8;
    }
    else if < size 3 { // <= 2
      store64 at store_ins I_STORE16;
    }
    else if < size 5 { // <= 4
      store64 at store_ins I_STORE32;
    }
    else if < size 9 { // <= 8
      store64 at store_ins I_STORE64;
    }
    else {
      assert(0, "ir_compile_assignment: bad assignment size\n");
    }
    let op: Op = 0;
    OP(store_ins, at op);
    { let _ = ir_push_ins(at op, ins_count); }
  }
  load64 + c Compile.status;
}

fn ir_compile_store(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  if eq ir_compile_binop(fs, ast, ins_count) NoError {
    let type: u64 = load64 + + ast Ast.token Token.type;
    let op: Op = 0;
    if eq type T_STORE64 {
      OP(I_STORE64, at op);
    }
    else if eq type T_STORE32 {
      OP(I_STORE32, at op);
    }
    else if eq type T_STORE16 {
      OP(I_STORE16, at op);
    }
    else if eq type T_STORE8 {
      OP(I_STORE8, at op);
    }
    else {
      assert(0, "store operator not implemented\n");
    }
    { let _ = ir_push_ins(at op, ins_count); }
  }
  load64 + c Compile.status;
}

fn ir_compile_while_statement(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  assert(eq load64 + ast Ast.count 2, "invalid while statement construction\n");
  let loop_label: u64 = load64 + c Compile.label_count;
  store64 + c Compile.label_count + 1 load64 + c Compile.label_count;
  let cond_size: u64 = 0;
  let body_size: u64 = 0;
  let op: Op = 0;
  OP_init(
    I_LOOP_LABEL,
    loop_label,
    NONE,
    NONE,
    at op
  );
  { let _ = ir_push_ins(at op, at cond_size); }

  let cond = cast ptr load64 + + ast Ast.node * sizeof ptr 0;
  let body = cast ptr load64 + + ast Ast.node * sizeof ptr 1;

  if eq ir_compile_nodes(fs, cond, at cond_size) NoError {
    let body_start_address: u64 = load64 + c Compile.ins_count;
    let loop_end_label: u64 = load64 + c Compile.label_count;
    store64 + c Compile.label_count + 1 load64 + c Compile.label_count;
    OP_init(
      I_JZ, // conditional jump if zero
      loop_end_label,
      0,
      0,
      at op
    );
    { let _ = ir_push_ins(at op, at body_size); }

    if eq ir_compile_nodes(fs, body, at body_size) NoError {
      OP_init(
        I_JMP,
        loop_label,
        NONE,
        + cond_size body_size,
        at op
      );
      { let _ = ir_push_ins(at op, at body_size); }

      OP_init(
        I_LOOP_LABEL,
        loop_end_label,
        NONE,
        NONE,
        at op
      );
      { let _ = ir_push_ins(at op, at body_size); }
      // jz: Op*
      let jz = cast ptr + + c Compile.ins * sizeof Op body_start_address;
      store64 + jz Op.src0 body_size;
      if ins_count {
        store64 ins_count + deref ins_count + cond_size body_size;
      }
    }
  }
  load64 + c Compile.status;
}

fn ir_compile_if_statement(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  assert(or eq load64 + ast Ast.count 2 eq load64 + ast Ast.count 3, "invalid if statement construction\n");
  let cond_size: u64 = 0;
  let body_size: u64 = 0;
  let else_body_size: u64 = 0;
  let cond = cast ptr load64 + + ast Ast.node * sizeof ptr 0;
  let body = cast ptr load64 + + ast Ast.node * sizeof ptr 1;
  let op: Op = 0;

  if eq ir_compile_nodes(fs, cond, at cond_size) NoError {
    let body_start_address: u64 = load64 + c Compile.ins_count;
    let end_label: u64 = load64 + c Compile.label_count;
    store64 + c Compile.label_count + 1 load64 + c Compile.label_count;
    OP_init(
      I_JZ,
      end_label,
      0,
      0,
      at op
    );
    { let _ = ir_push_ins(at op, at body_size); }
    if eq ir_compile_nodes(fs, body, at body_size) NoError {
      if eq load64 + ast Ast.count 3 { // else body
        let else_body = cast ptr load64 + + ast Ast.node * sizeof ptr 2;
        let else_label: u64 = load64 + c Compile.label_count;
        store64 + c Compile.label_count + 1 load64 + c Compile.label_count;
        let else_start_address: u64 = load64 + c Compile.ins_count;

        OP_init(
          I_JMP,
          else_label,
          NONE,
          NONE,
          at op
        );
        { let _ = ir_push_ins(at op, at body_size); }

        OP_init(
          I_LOOP_LABEL,
          end_label,
          NONE,
          NONE,
          at op
        );
        { let _ = ir_push_ins(at op, at else_body_size); }
        if eq ir_compile_nodes(fs, else_body, at else_body_size) NoError {
          OP_init(
            I_LOOP_LABEL,
            else_label,
            NONE,
            NONE,
            at op
          );
          { let _ = ir_push_ins(at op, at else_body_size); }
          // jz: Op*
          let jz = cast ptr + + c Compile.ins * sizeof Op body_start_address;
          // else_jmp: Op*
          let else_jmp = cast ptr + + c Compile.ins * sizeof Op else_start_address;
          store64 + jz Op.src0 else_body_size;
          store64 + else_jmp Op.src0 else_body_size;
        }
      }
      else {
        OP_init(
          I_LOOP_LABEL,
          end_label,
          NONE,
          NONE,
          at op
        );
        { let _ = ir_push_ins(at op, at body_size); }
        // jz: Op*
        let jz = cast ptr + + c Compile.ins * sizeof Op body_start_address;
        store64 + jz Op.src0 body_size;
      }
    }
    if ins_count {
      store64 ins_count + deref ins_count + + cond_size body_size else_body_size;
    }
  }
  load64 + c Compile.status;
}

fn ir_compile_sizeof(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  let imm: u64 = compile_push_value(+ + ast Ast.token Token.v, sizeof u64);
  if neq imm UINT64_MAX {
    let op: Op = 0;
    OP_init(
      I_PUSH_IMM,
      sizeof u64,
      imm,
      NONE,
      at op
    );
    { let _ = ir_push_ins(at op, ins_count); }
  }
  load64 + c Compile.status;
}

fn ir_compile_field_access(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  let type_context_id = load64 + ast Ast.type_context_id;
  let type_context = type_context_from_id(type_context_id);
  let symbol_id = load64 + type_context Type_context.symbol_id;
  if neq symbol_id UINT64_MAX {
    let symbol: Symbol = 0;
    memcpy(at symbol, + + c Compile.symbols * sizeof Symbol symbol_id, sizeof Symbol);
    memcpy(+ at symbol Symbol.type, + type_context Type_context.type, sizeof Type);
    store64 + at symbol Symbol.local_id - load64 + at symbol Symbol.local_id load64 + type_context Type_context.offset;
    { let _ = ir_push_symbol(fs, at symbol, symbol_id, ins_count); }
  }
  else {
    compile_error_at(+ ast Ast.token, "invalid symbol in field access expression\n");
    assert(0, "ir_compile_field_access()\n");
  }
  load64 + c Compile.status;
}

fn ir_compile(fs: ptr<Function>, ast: ptr, ins_count: ptr<u64>) -> u64 {
  let ast_type: u64 = load64 + ast Ast.type;

  if eq ast_type AstNone {
    // for collapsed branches
  }
  if eq ast_type AstValue {
    { let _ = ir_compile_value(fs, ast, ins_count); }
  }
  else if or or or
      eq ast_type AstExpression
      eq ast_type AstExprList
      eq ast_type AstStatement
      eq ast_type AstStatementList {
    { let _ = ir_compile_nodes(fs, ast, ins_count); }
  }
  else if eq ast_type AstBinopExpression {
    let op: Op = 0;
    if eq ir_compile_binop(fs, ast, ins_count) NoError {
      let token_type: u64 = load64 + + ast Ast.token Token.type;
      if eq token_type T_ADD {
        OP(I_ADD, at op);
      }
      else if eq token_type T_SUB {
        OP(I_SUB, at op);
      }
      else if eq token_type T_MUL {
        OP(I_MUL, at op);
      }
      else if eq token_type T_DIV {
        OP(I_DIV, at op);
      }
      else if eq token_type T_DIVMOD {
        OP(I_DIVMOD, at op);
      }
      else if eq token_type T_LSHIFT {
        OP(I_LSHIFT, at op);
      }
      else if eq token_type T_RSHIFT {
        OP(I_RSHIFT, at op);
      }
      else if eq token_type T_LT {
        OP(I_LT, at op);
      }
      else if eq token_type T_GT {
        OP(I_GT, at op);
      }
      else if eq token_type T_AND {
        OP(I_AND, at op);
      }
      else if eq token_type T_OR {
        OP(I_OR, at op);
      }
      else if eq token_type T_XOR {
        OP(I_XOR, at op);
      }
      else if eq token_type T_EQ {
        OP(I_EQ, at op);
      }
      else if eq token_type T_NEQ {
        OP(I_NEQ, at op);
      }
      else {
        assert(0, "binary operator not implemented\n");
      }
      { let _ = ir_push_ins(at op, ins_count); }
    }
  }
  else if eq ast_type AstUopExpression {
    if eq ir_compile_uop(fs, ast, ins_count) NoError {
      let type: u64 = load64 + + ast Ast.token Token.type;
      let op: Op = 0;
      if eq type T_PRINT {
        OP(I_PRINT, at op);
      }
      else if eq type T_DEREF {
        OP(I_LOAD64, at op);
      }
      else if eq type T_DEREF_WORD {
        OP(I_LOAD64, at op);
      }
      else if eq type T_LOAD64 {
        OP(I_LOAD64, at op);
      }
      else if eq type T_LOAD32 {
        OP(I_LOAD32, at op);
      }
      else if eq type T_LOAD16 {
        OP(I_LOAD16, at op);
      }
      else if eq type T_LOAD8 {
        OP(I_LOAD8, at op);
      }
      else if eq type T_LOGICAL_NOT {
        OP(I_LOGICAL_NOT, at op);
      }
      else if eq type T_NOT {
        OP(I_NOT, at op);
      }
      else {
        assert(0, "unary operator not implemented\n");
      }
      { let _ = ir_push_ins(at op, ins_count); }
    }
  }
  else if eq ast_type AstConstStatement {
    // NOTE(lucas): value has already been defined in the type-checking phase
  }
  else if eq ast_type AstLetStatement {
    { let _ = ir_compile_let_statement(fs, ast, ins_count); }
  }
  else if eq ast_type AstFuncDefinition {
    assert(or eq load64 + ast Ast.count 2 eq load64 + ast Ast.count 3, "invalid number of nodes in AstFuncDefinition branch\n");
    { let _ = ir_compile_func(fs, ast, ins_count); }
  }
  else if eq ast_type AstParamList {
    assert(0, "something went very wrong\n");
  }
  else if eq ast_type AstFuncCall {
    { let _ = ir_compile_func_call(fs, ast, ins_count); }
  }
  else if eq ast_type AstBlockStatement {
    { let _ = ir_compile_nodes(fs, ast, ins_count); }
  }
  else if eq ast_type AstAssignment {
    { let _ = ir_compile_assignment(fs, ast, ins_count); }
  }
  else if eq ast_type AstStore {
    { let _ = ir_compile_store(fs, ast, ins_count); }
  }
  else if eq ast_type AstWhileStatement {
    { let _ = ir_compile_while_statement(fs, ast, ins_count); }
  }
  else if eq ast_type AstIfStatement {
    { let _ = ir_compile_if_statement(fs, ast, ins_count); }
  }
  else if eq ast_type AstSizeof {
    { let _ = ir_compile_sizeof(fs, ast, ins_count); }
  }
  else if or or or or
      eq ast_type AstEnum
      eq ast_type AstStruct
      eq ast_type AstUnion
      eq ast_type AstType
      eq ast_type AstStaticAssert {
    // NOTE(lucas): this is handled in the type checking phase
  }
  else if eq ast_type AstCastExpression {
    { let _ = ir_compile(fs, cast ptr load64 + + ast Ast.node * sizeof ptr 1, ins_count); }
  }
  else if eq ast_type AstFieldAccess {
    { let _ = ir_compile_field_access(fs, ast, ins_count); }
  }
  else {
    assert(0, "invalid or unhandled AST branch type\n");
  }
  load64 + c Compile.status;
}

fn ir_start_compile(ast: ptr) -> u64 {
  let time_start: Timespec = 0;
  let time_end: Timespec = 0;
  get_time(at time_start);

  if neq load64 + c Compile.entry_point 1 {
    compile_error("missing entry point `main`\n");
  }

  store64 @_ir_compile ir_compile;

  { let _ = ir_compile(cast ptr<Function> null, cast ptr load64 + + ast Ast.node * sizeof ptr 0, cast ptr<u64> null); }

  get_time(at time_end);

  print_time_elapsed("ir code generation took", at time_start, at time_end);

  load64 + c Compile.status;
}
