// info.spl

fn symbol_info_print(fd: u64) -> none {
  dprintf(fd, "print_symbol_info:\n", null);
  let message = cast cstr tmp_it;
  let count: u64 = load64 + c Compile.symbol_count;
  let i: u64 = 0;
  while < i count {
    let symbol = + + c Compile.symbols * sizeof Symbol i;
    let name = cast cstr + symbol Symbol.name;
    let type: Type = 0;
    memcpy(at type, + symbol Symbol.type, sizeof Type);
    let num_i_digits: u64 = digit_count(i);
    let j: u64 = 0;

    if neq type_base(at type) TypeSyscallFunc {
      while < j - 3 num_i_digits {
        dprintf(fd, "0", null);
        store64 @j + 1 j;
      }
      dprintf(fd, "%d: ", @i);
      if eq type_base(at type) TypeFunc {
        let func_sig = func_signature_from_id(type_sub_id(at type));
        dprintf(fd, "%s", @name);
        func_signature_print(fd, func_sig);
      }
      else {
        let args: any = name;
        dprintf(fd, "%s : ", @args);
        type_print(fd, at type);
      }
      let args: any = (
        load64 + symbol Symbol.size,
        load64 + symbol Symbol.konst,
        load64 + + symbol Symbol.value Value.konst,
        load64 + symbol Symbol.ref_count,
        load64 + symbol Symbol.local_id
      );
      dprintf(fd, " (size = %d, konst = %d, value.konst = %d, ref_count = %d, local_id = %d)\n", @args);
    }
    store64 @i + 1 i;
  }
  store64 @tmp_it message;
}
