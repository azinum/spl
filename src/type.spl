// type.spl

enum u64 (
  TypeNone,
  TypeAny,
  TypePtr,
  TypeUnsigned64,
  TypeUnsigned32,
  TypeUnsigned16,
  TypeUnsigned8,
  TypeCString,
  TypeFunc,
  TypeSyscallFunc,
  TypeStruct,

  MAX_PRIMITIVE_TYPE
);

struct Type (
  type : u32,
  id : u32
);

const MAX_COMPILE_TYPE = 1024;

// symbol types
enum u64 (
  SYM_FUNC_ARG,
  SYM_FUNC,
  SYM_LOCAL_VAR,
  SYM_GLOBAL_VAR
);

// t : Type*
fn type_init(t : ptr, type : u64, id : u64) -> none {
  store32 + t Type.type type;
  store32 + t Type.id id;
}

fn type_create(type : u64, id : u64) -> Type {
  let result : Type = 0;
  type_init(@result, type, id);
  result;
}

// t : Type*
fn type_value(t : ptr) -> u64 {
  load32 + t Type.type;
}

// t : Type*
fn type_id(t : ptr) -> u64 {
  load32 + t Type.id;
}

fn types_are_equal(a : Type, b : Type) -> u64 {
  and
    eq load32 + @a Type.type load32 + @b Type.type
    eq load32 + @a Type.id   load32 + @b Type.id;
}
