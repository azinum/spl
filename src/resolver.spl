// resolver.spl
// resolve names, types, and scopes/blocks
// NOTE: blocks are handled in the define phase, everything in declare happens on the global block anyways

const MAX_TYPE_CONTRACT_SIZE = 8;

struct Resolver (
  blocks: Block[MAX_BLOCK],
  block_count: u64,
  global: ptr<Block>, // points to Compile.global
  type_contract: Type[MAX_TYPE_CONTRACT_SIZE],
  type_contract_size: u64,
);

let resolver = cast ptr<Resolver> null;

fn resolver_func(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 Error;
let _resolver_define = resolver_func;

fn resolver_state_init(r: ptr<Resolver>) -> u64 {
  let result = NoError;

  store64 + r Resolver.block_count 0;
  store64 + r Resolver.type_contract_size 0;
  store64 + r Resolver.global + c Compile.global;

  result;
}

fn resolver_block_push(r: ptr<Resolver>, parent: ptr<Block>) -> ptr<Block> {
  let block = cast ptr<Block> null;
  let block_count = cast ptr<u64> + r Resolver.block_count;
  if < deref block_count MAX_BLOCK {
    store64 @block + + r Resolver.blocks * sizeof Block deref block_count;
    block_init(block, parent);
    store64 block_count + 1 deref block_count;
  }
  else {
    assert(0, "resolver_block_push: block stack overflow\n");
  }
  block;
}

fn resolver_block_pop(r: ptr<Resolver>) -> none {
  let block_count = cast ptr<u64> + r Resolver.block_count;
  if > deref block_count 0 {
    store64 block_count - deref block_count 1;
  }
  else {
    assert(0, "resolver_block_pop: block stack underflow\n");
  }
}

fn resolver_type_contract_push(r: ptr<Resolver>, type: ptr<Type>) -> u64 {
  let result = Error;
  let size = cast ptr<u64> + r Resolver.type_contract_size;
  if < deref size MAX_TYPE_CONTRACT_SIZE {
    memcpy(+ + r Resolver.type_contract * sizeof Type deref size, type, sizeof Type);
    store64 size + 1 deref size;
    store64 @result NoError;
  }
  result;
}

fn resolver_type_contract_reset(r: ptr<Resolver>) -> none {
  store64 + r Resolver.type_contract_size 0;
}

fn resolver_type_from_node_token(r: ptr<Resolver>, node: ptr, block: ptr<Block>, type_out: ptr<Type>) -> u64 {
  let result = NoError;

  let token = cast ptr<Token> + node Ast.token;
  type_init_primitive(type_out, TypeError);

  if token_is(token, T_NONE) {
    type_init_primitive(type_out, TypeNone);
  }
  else if token_is(token, T_ANY) {
    type_init_primitive(type_out, TypeAny);
  }
  else if token_is(token, T_PTR) {
    type_init_primitive(type_out, TypePtr);
  }
  else if token_is(token, T_UNSIGNED64) {
    type_init_primitive(type_out, TypeUnsigned64);
  }
  else if token_is(token, T_UNSIGNED32) {
    type_init_primitive(type_out, TypeUnsigned32);
  }
  else if token_is(token, T_UNSIGNED16) {
    type_init_primitive(type_out, TypeUnsigned16);
  }
  else if token_is(token, T_UNSIGNED8) {
    type_init_primitive(type_out, TypeUnsigned8);
  }
  else if token_is(token, T_CSTR) {
    type_init_primitive(type_out, TypeCString);
  }
  else if token_is(token, T_IDENTIFIER) {
    let symbol = cast ptr<Symbol> null;
    let name: Buffer = 0;
    buffer_init(
      at name,
      cast ptr load64 + token Token.buffer,
      load64 + token Token.length
    );
    if eq compile_lookup_value(block, @name, at symbol, null, null) NoError {
      memcpy(type_out, + symbol Symbol.type, sizeof Type);
    }
  }
  result;
}

fn resolver_collect_types_from_node(r: ptr<Resolver>, node: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;
  if node {
    let type: Type = 0;
    store64 @result resolver_type_from_node_token(r, node, block, at type);
    if eq result NoError {
      let array_specifier_node = ast_node_from_index(node, 0);
      if not ast_is(array_specifier_node, AstNone) {
        store64 @result _resolver_define(r, array_specifier_node, block);
        let array_specifier_value: Value = 0;
        if eq result NoError {
          store64 @result const_eval(array_specifier_node, block, at array_specifier_value);
          if eq result NoError {
            store64 + at type Type.count load64 + at array_specifier_value Value.num;
          }
          else {
            compile_error_at(cast ptr ast_token(array_specifier_node), "array size specifiers are required to be constant\n", null);
          }
        }
      }
      if eq resolver_type_contract_push(r, at type) NoError {
        let sub_node = ast_node_from_index(node, 1);
        store64 @result resolver_collect_types_from_node(r, sub_node, block);
      }
    }
  }
  result;
}

fn resolver_type_from_node(r: ptr<Resolver>, node: ptr, block: ptr<Block>, type_contract_mode: u64, type: ptr<Type>) -> u64 {
  type_init_primitive(type, TypeNone);
  let result = resolver_collect_types_from_node(r, node, block);
  if eq result NoError {
    let contract = cast ptr<Type> + r Resolver.type_contract;
    let contract_size = load64 + r Resolver.type_contract_size;
    store64 @result type_from_contract(contract, contract_size, type_contract_mode, type);
    resolver_type_contract_reset(r);
  }
  result;
}

fn resolver_declare_func_signature(r: ptr<Resolver>, node: ptr, block: ptr<Block>, symbol: ptr<Symbol>) -> u64 {
  let result = NoError;
  let params = ast_node_from_index(node, 0);
  let rtype_node = ast_node_from_index(node, 2);

  let func_sig: Func_signature = 0;
  func_signature_init(at func_sig);

  let func_type: Type = 0;
  type_init(at func_type, TypeFunc, 0, sizeof ptr, 1);

  let return_type: Type = 0;
  type_init(at return_type, TypeNone, 0, 0, 1);

  if neq rtype_node null {
    if neq resolver_type_from_node(r, rtype_node, block, TYPE_CONTRACT_LOOKUP, at return_type) NoError {
      compile_error_at(cast ptr ast_token(rtype_node), "invalid or unknown return type\n", null);
      store64 @result Error;
    }
    else {
      func_signature_set_rtype(at func_sig, at return_type);
    }
  }

  let argc = ast_child_count(params);
  if and eq result NoError < argc + MAX_FUNC_ARGC 1 { // argc <= MAX_FUNC_ARGC
    let i = 0;
    while and eq result NoError < i argc {
      let arg_node = ast_node_from_index(params, i);
      let arg_token = ast_token(arg_node);
      let arg_type_node = ast_node_from_index(arg_node, 0);
      let arg_type = node_info_get_type(node_get_info(arg_node));

      if eq resolver_type_from_node(r, arg_type_node, block, TYPE_CONTRACT_LOOKUP, arg_type) NoError {
        let type_size = load64 + arg_type Type.size;
        if > type_size MAX_PUSH_SIZE {
          let args: any = MAX_PUSH_SIZE;
          compile_error_at(cast ptr ast_token(arg_type_node), "can not use a type with a size greater than %d\n", @args);
          store64 @result Error;
        }
        else {
          { let _ = func_signature_add_arg(at func_sig, arg_type, 0); }
        }
      }
      else {
        compile_error_at(cast ptr ast_token(arg_type_node), "invalid or unknown type\n", null);
        store64 @result Error;
      }
      store64 @i + 1 i;
    }
    if eq result NoError {
      let func_sig_id = func_signature_push(at func_sig);
      let func_sig_type = func_signature_from_id(func_sig_id);
      store64 + at func_type Type.sub_id func_sig_id;
      let new_type_id = type_commit_new(at func_type);
      memcpy(+ symbol Symbol.type, at func_type, sizeof Type);
    }
  }
  else {
    compile_error_at(cast ptr ast_token(params), "function parameter limit count reached\n", null);
    store64 @result Error;
  }
  result;
}

fn resolver_func_init(r: ptr<Resolver>, symbol: ptr<Symbol>, symbol_id: u64, argc: u64) -> none {
  store64 + symbol Symbol.imm UINT64_MAX;
  store64 + symbol Symbol.size sizeof ptr;
  store64 + symbol Symbol.konst false;
  store64 + symbol Symbol.sym_type SYM_FUNC;

  let value = cast ptr<Value> + symbol Symbol.value;
  value_init(value, 0, 0);
  let func = cast ptr<Function> + value Value.func;
  function_init(func);
  store64 + func Function.label symbol_id;
  store64 + func Function.argc argc;
  store64 + func Function.locals_offset 0;
}

fn resolver_declare_func(r: ptr<Resolver>, node: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;
  let params = ast_node_from_index(node, 0);
  let argc = ast_child_count(params);

  let name_token = + node Ast.token;
  let symbol = cast ptr<Symbol> null;
  let symbol_id = UINT64_MAX;
  let global_block = + c Compile.global;
  let node_info = cast ptr<Node_info> + node Ast.info;
  node_info_init(node_info);

  if eq global_block block {
    if eq compile_declare_value(block, cast ptr name_token, at symbol, @symbol_id) NoError {
      store64 + node Ast.symbol_id symbol_id;
      store64 @result resolver_declare_func_signature(r, node, block, symbol);
      resolver_func_init(r, symbol, symbol_id, argc);
      if eq strncmp(cast cstr + symbol Symbol.name, "main", MAX_NAME_SIZE) 0 {
        let ref_count = cast ptr<u64> + symbol Symbol.ref_count;
        let entry_point = cast ptr<u64> + c Compile.entry_point;
        store64 ref_count + 1 deref ref_count;
        store64 entry_point + 1 deref entry_point;
      }
    }
    else {
      compile_error_at(name_token, "symbol already exists\n", null);
      store64 @result Error;
    }
  }
  else {
    compile_error_at(name_token, "functions are only permitted to be defined in the global block\n", null);
    store64 @result Error;
  }
  result;
}

fn resolver_declare_statements(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;

  let count = ast_child_count(ast);
  let i = 0;
  while and eq result NoError < i count {
    let node = ast_node_from_index(ast, i);
    if ast_is(node, AstFuncDefinition) {
      store64 @result resolver_declare_func(r, node, block);
    }
    else if ast_is(node, AstStatementList) {
      store64 @result resolver_declare_statements(r, node, block);
    }
    store64 @i + 1 i;
  }
  result;
}

fn resolver_declare(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;

  let count = ast_child_count(ast);
  let i = 0;
  while and eq result NoError < i count {
    let node = ast_node_from_index(ast, i);
    if ast_is(node, AstStatementList) {
      store64 @result resolver_declare_statements(r, node, block);
    }
    store64 @i + 1 i;
  }

  result;
}

fn resolver_define_value(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;
  let token = cast ptr<Token> + ast Ast.token;
  if token_is(token, T_NUMBER) {
    store64 + ast Ast.konst 1;
    let type = node_info_get_type(node_get_info(ast));
    type_init_primitive(cast ptr<Type> type, TypeUnsigned64);
    let value = cast ptr<Value> + ast Ast.value;
    let num = load64 + token Token.v;
    value_init(value, num, 1);
  }
  else if token_is(token, T_CSTRING) {
    let type = node_info_get_type(node_get_info(ast));
    // this really should be a pointer to a cstr
    type_init_primitive(cast ptr<Type> type, TypeCString);
  }
  else if token_is(token, T_IDENTIFIER) {
    let symbol = cast ptr<Symbol> null;
    let symbol_id = UINT64_MAX;
    let name: Buffer = 0;
    buffer_init(
      at name,
      cast ptr load64 + token Token.buffer,
      load64 + token Token.length
    );
    if eq compile_lookup_value(block, @name, at symbol, @symbol_id, null) NoError {
      let node_info = node_get_info(ast);
      let type = node_info_get_type(node_info);

      // store symbol id in ast
      store64 + ast Ast.symbol_id symbol_id;

      // store type in ast
      memcpy(type, + symbol Symbol.type, sizeof Type);
      let value = cast ptr<Value> + ast Ast.value;
      memcpy(value, + symbol Symbol.value, sizeof Value);

      // increment ref count
      let ref_count = cast ptr<u64> + symbol Symbol.ref_count;
      store64 ref_count + 1 deref ref_count;
    }
    else {
      let args: any = load64 + at name Buffer.length, load64 + at name Buffer.data;
      compile_error_at(cast ptr token, "symbol `%*s` not defined\n", @args);
      store64 @result Error;
    }
  }
  else if or token_is(token, T_AT) token_is(token, T_AT_WORD) {
    // TODO: implement
  }
  else {
    assert(0, "resolver_define_value: invalid token type in node\n");
  }
  result;
}

fn resolver_define_binop(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;

  let left = ast_node_from_index(ast, 0);
  let right = ast_node_from_index(ast, 1);
  assert(neq 0 left, "resolver_define_binop: left node is null\n");
  assert(neq 0 right, "resolver_define_binop: right node is null\n");

  let left_value = cast ptr<Value> + left Ast.value;
  let right_value = cast ptr<Value> + right Ast.value;

  let value = cast ptr<Value> + ast Ast.value;

  store64 @result _resolver_define(r, left, block);
  store64 @result _resolver_define(r, right, block);

  store64 + value Value.konst and value_konst(left_value) value_konst(right_value);

  result;
}

fn resolver_define_uop(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 {
  let operand = ast_node_from_index(ast, 0);
  assert(neq 0 operand, "resolver_define_uop: operand node is null\n");
  _resolver_define(r, operand, block);
}

fn resolver_define_const_statement(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;

  let is_global = eq block load64 + r Resolver.global;
  let name_token = ast_token(ast);
  let rhs = ast_node_from_index(ast, 0);
  let type_node = ast_node_from_index(ast, 1);

  if neq type_node null {
    let type = node_info_get_type(node_get_info(type_node));
    store64 @result resolver_type_from_node(r, type_node, block, TYPE_CONTRACT_CREATE, type);
  }

  let value = cast ptr<Value> + rhs Ast.value;
  { let _ = _resolver_define(r, rhs, block); } // first visit the rhs to then be able to const evaluate it
  if eq const_eval(rhs, block, value) NoError {
    let symbol = cast ptr<Symbol> null;
    let symbol_id = cast ptr<u64> + ast Ast.symbol_id;
    if eq compile_declare_value(block, cast ptr name_token, at symbol, cast ptr symbol_id) NoError {
      if is_global {
        store64 + symbol Symbol.sym_type SYM_GLOBAL_VAR;
      }
      else {
        store64 + symbol Symbol.sym_type SYM_LOCAL_VAR;
      }
    }
    else {
      compile_error_at(cast ptr name_token, "symbol already exists\n", null);
      store64 @result Error;
    }
  }
  else {
    compile_error_at(cast ptr name_token, "tried to bind a non-constant to a constant\n", null);
    store64 @result Error;
  }

  result;
}

fn resolver_define_func_params(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;
  let i = 0;
  let count = ast_child_count(ast);
  while and eq result NoError < i count {
    let node = ast_node_from_index(ast, i);
    let node_token = ast_token(node);

    let node_info = node_get_info(node);
    let type = node_info_get_type(node_info);
    let size = load64 + type Type.size;

    let symbol = cast ptr<Symbol> null;
    let symbol_id = cast ptr<u64> + node Ast.symbol_id;
    if eq compile_declare_value(block, cast ptr node_token, at symbol, cast ptr symbol_id) NoError {
      store64 + symbol Symbol.imm UINT64_MAX;
      store64 + symbol Symbol.size size;
      store64 + symbol Symbol.konst false;
      store64 + symbol Symbol.local_id + sizeof ptr * sizeof ptr i;
      store64 + symbol Symbol.sym_type SYM_FUNC_ARG;
      memcpy(+ symbol Symbol.type, type, sizeof Type);
      memcpy(+ symbol Symbol.token, node_token, sizeof Token);
      store64 + + symbol Symbol.token Token.v i; // TODO(lucas): make sure local_id is used instead of this
    }
    else {
      compile_error_at(cast ptr node_token, "symbol already exists\n", null);
      store64 @result Error;
    }
    store64 @i + 1 i;
  }
  result;
}

fn resolver_define_func(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;
  let params = ast_node_from_index(ast, 0);
  let body   = ast_node_from_index(ast, 1);

  // NOTE(lucas): return type is already resolved by resolver_declare_func_signature

  let local_block = resolver_block_push(r, block);
  store64 @result resolver_define_func_params(r, params, local_block);
  if eq result NoError {
    store64 @result _resolver_define(r, body, local_block);
  }
  resolver_block_pop(r); // local_block
  result;
}

fn resolver_define_enum(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;
  let enum_type_node = ast_node_from_index(ast, 0);
  let is_global = eq block load64 + r Resolver.global;
  let type: Type = 0;
  if eq resolver_type_from_node(r, enum_type_node, block, TYPE_CONTRACT_CREATE, at type) NoError {
    let enum_type = node_info_get_type(node_get_info(enum_type_node));
    memcpy(enum_type, at type, sizeof Type);
    let enum_node = ast_node_from_index(ast, 1);
    let enum_node_count = ast_child_count(enum_node);
    let i = 0;
    while and eq result NoError < i enum_node_count {
      let ident_node = ast_node_from_index(enum_node, i);
      let ident_token = cast ptr<Token> + ident_node Ast.token;

      let symbol = cast ptr<Symbol> null;
      let symbol_id = cast ptr<u64> + ident_node Ast.symbol_id;
      if eq compile_declare_value(block, cast ptr ident_token, at symbol, cast ptr symbol_id) NoError {
        if is_global {
          store64 + symbol Symbol.sym_type SYM_GLOBAL_VAR;
        }
        else {
          store64 + symbol Symbol.sym_type SYM_LOCAL_VAR;
        }
      }
      else {
        compile_error_at(cast ptr ident_token, "symbol already exists\n", null);
        store64 @result Error;
      }
      store64 @i + 1 i;
    }
  }
  result;
}

fn resolver_define_nodes(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;
  let count = ast_child_count(ast);
  let i = 0;
  while and eq result NoError < i count {
    let node = ast_node_from_index(ast, i);
    store64 @result _resolver_define(r, node, block);
    store64 @i + 1 i;
  }
  result;
}

fn resolver_define(r: ptr<Resolver>, ast: ptr, block: ptr<Block>) -> u64 {
  let result = NoError;
  if neq ast null {
    if ast_is(ast, AstNone) {
    }
    else if ast_is(ast, AstValue) {
      store64 @result resolver_define_value(r, ast, block);
    }
    else if ast_is(ast, AstExpression) {
      store64 @result resolver_define(r, ast_node_from_index(ast, 0), block);
    }
    else if ast_is(ast, AstExprList) {
      store64 @result resolver_define_nodes(r, ast, block);
    }
    else if ast_is(ast, AstStatementList) {
      store64 @result resolver_define_nodes(r, ast, block);
    }
    else if ast_is(ast, AstBlockStatement) {
      let local_block = resolver_block_push(r, block);
      store64 @result resolver_define_nodes(r, ast, local_block);
      resolver_block_pop(r); // local_block
    }
    else if ast_is(ast, AstBinopExpression) {
      store64 @result resolver_define_binop(r, ast, block);
    }
    else if ast_is(ast, AstUopExpression) {
      store64 @result resolver_define_uop(r, ast, block);
    }
    else if ast_is(ast, AstConstStatement) {
      store64 @result resolver_define_const_statement(r, ast, block);
    }
    else if ast_is(ast, AstLetStatement) {
      // TODO: implement
    }
    else if ast_is(ast, AstFuncDefinition) {
      store64 @result resolver_define_func(r, ast, block);
    }
    else if ast_is(ast, AstFuncCall) {
      // TODO: implement
    }
    else if ast_is(ast, AstAssignment) {
      // TODO: implement
    }
    else if ast_is(ast, AstStore) {
      // TODO: implement
    }
    else if ast_is(ast, AstWhileStatement) {
      // TODO: implement
    }
    else if ast_is(ast, AstIfStatement) {
      // TODO: implement
    }
    else if ast_is(ast, AstSizeof) {
      // TODO: implement
    }
    else if ast_is(ast, AstEnum) {
      store64 @result resolver_define_enum(r, ast, block);
    }
    else if ast_is(ast, AstStruct) {
      // TODO: implement
    }
    else if ast_is(ast, AstUnion) {
      // TODO: implement
    }
    else if ast_is(ast, AstCastExpression) {
      // TODO: implement
    }
    else if ast_is(ast, AstStaticAssert) {
      // TODO: implement
    }
    else {
      let args: any = ast_node_str(ast);
      compile_error_at(+ ast Ast.token, "resolver_define: invalid AST node (%s)\n", @args);
      assert(0, "");
    }
  }
  result;
}

fn resolver_init(ast: ptr) -> u64 {
  let result = NoError;
  store64 @resolver memory_alloc(sizeof Resolver);

  store64 + c Compile.should_collapse_nodes 0; // temporary

  let time_start: Timespec = 0;
  let time_end: Timespec = 0;
  get_time(at time_start);

  store64 @_resolver_define resolver_define;

  store64 @result resolver_state_init(resolver);
  if eq result NoError {
    let global_block = cast ptr<Block> load64 + resolver Resolver.global;

    store64 @result resolver_declare(resolver, ast, global_block);
    if eq result NoError {
      store64 @result resolver_define_nodes(resolver, ast_node_from_index(ast, 0), global_block);
    }
  }
  get_time(at time_end);
  print_time_elapsed("resolver took", at time_start, at time_end);
  result;
}

fn resolver_free -> none {
  memory_free(cast ptr resolver);
}
