// compile.spl

fn compile_create_syscall(name : cstr, argc : u64) -> u64 {
  let result = NoError;
  let block = cast ptr<Block> + c Compile.global;
  let token : Token = 0;
  store64 + @token Token.buffer name;
  store64 + @token Token.length strnlen(name, MAX_NAME_SIZE);
  store64 + @token Token.type T_IDENTIFIER;
  store64 + @token Token.filename "internal";
  store64 + @token Token.source "";
  store64 + @token Token.line 0;
  store64 + @token Token.column 0;

  let symbol : ptr = NULL;
  let symbol_index = UINT64_MAX;
  if eq compile_declare_value(block, NULL, @token, @symbol, @symbol_index) NoError {
    store64 + symbol Symbol.size compile_type_size(TypeSyscallFunc);
    store64 + symbol Symbol.sym_type SYM_FUNC;
    type_init(cast ptr<Type> + symbol Symbol.type, TypeSyscallFunc, 0, sizeof ptr, 1);
    store64 + + symbol Symbol.token Token.v symbol_index;
    store64 + symbol Symbol.ref_count 1;
    let func = + + symbol Symbol.value Value.func;
    store64 + func Function.ir_address UINT64_MAX;
    store64 + func Function.label UINT64_MAX;
    store64 + func Function.argc + 1 argc;
    store64 + func Function.locals_offset 0;
    type_init(cast ptr<Type> + func Function.rtype, TypeUnsigned64, 0, sizeof u64, 1);
  }
  else {
    compile_error("symbol already exists\n");
    store64 @result Error;
  }
  result;
}

// name : cstr, value : Value*, type : Type
fn compile_create_value(name : cstr, value : ptr<Value>, type : ptr<Type>) -> u64 {
  let result = NoError;
  let block = cast ptr<Block> + c Compile.global;
  let token : Token = 0;
  store64 + @token Token.buffer name;
  store64 + @token Token.length strnlen(name, MAX_NAME_SIZE);
  store64 + @token Token.type T_IDENTIFIER;
  store64 + @token Token.filename "internal";
  store64 + @token Token.source "";
  store64 + @token Token.line 0;
  store64 + @token Token.column 0;

  let imm : u64 = compile_push_value(+ value Value.num, sizeof u64);
  if neq imm UINT64_MAX {
    let symbol : ptr = NULL;
    let symbol_index = UINT64_MAX;
    if eq compile_declare_value(block, NULL, @token, @symbol, @symbol_index) NoError {
      let type_id = type_lookup(type);
      store64 + symbol Symbol.imm imm;
      store64 + symbol Symbol.size compile_type_size(type_id);
      store64 + symbol Symbol.konst 1;
      store64 + symbol Symbol.sym_type SYM_GLOBAL_VAR;
      memcpy(+ symbol Symbol.type, type, sizeof Type);
      store64 + + symbol Symbol.token Token.v symbol_index;
      memcpy(+ symbol Symbol.value, value, sizeof Value);
      store64 + symbol Symbol.ref_count 1;
    }
    else {
      compile_error("symbol already exists\n");
      store64 @result Error;
    }
  }
  else {
    compile_error("out of immediate data memory\n");
    store64 @result Error;
  }

  result;
}

fn compile(target : u64, output_file_path : cstr) -> u64 {
  let result = NoError;
  let fd = ERROR;

  let time_start : timespec = 0;
  let time_end : timespec = 0;
  { let _ = clock_gettime(CLOCK_MONOTONIC, @time_start); }

  if eq target TARGET_LINUX_NASM_X86_64 {
    let path : u8 : MAX_PATH_SIZE = cast u8 0;
    sprintf(@path, "%s.spl.asm", @output_file_path);
    let mode : u64 = 434; // 0662
    let flags : u64 = or or O_CREAT O_TRUNC O_WRONLY;
    store64 @fd open(cast cstr @path, flags, mode);
    if neq fd ERROR {
      store64 @result compile_linux_nasm_x86_64(fd);
      { let _ = clock_gettime(CLOCK_MONOTONIC, @time_end); }

      if eq result NoError {
        let o_path : u8 : MAX_PATH_SIZE = cast u8 0;
        let args : any = output_file_path;
        sprintf(@o_path, "%s.o", @args);
        {
          let command : cstr = (
            "/usr/bin/nasm",
            "-g",
            "-F dwarf",
            "-f elf64",
            cast cstr @path,
            "-o",
            cast cstr @o_path,
            cast cstr NULL
          );
          exec_command_echoed(STDOUT_FILENO, @command);
        }
        {
          let command : cstr = (
            "/usr/bin/ld",
            "-arch",
            "x86_64",
            cast cstr @o_path,
            "-o",
            output_file_path,
            cast cstr NULL
          );
          exec_command_echoed(STDOUT_FILENO, @command);
        }
      }
    }
  }
  else {
    assert(0, "invalid compile target\n");
  }
  close(fd);

  if eq load64 + c Compile.status NoError {
    print_time_elapsed("code generation took", @time_start, @time_end);
  }

  result;
}

fn compile_print_final_info(fd : u64) -> none {
  let args : any = (
    load64 + c Compile.warning_count,
    load64 + c Compile.error_count,
    load64 + @p Parser.line_count,
    load64 + @p Parser.source_count
  );
  dprintf(fd,
"  warnings: %d
   errors:   %d
   lines:    %d
   files:    %d\n\n", @args);
}

fn compile_print_final -> none {
  if eq load64 + c Compile.status Error {
    printf("compilation failed:\n", NULL);
    compile_print_final_info(STDERR_FILENO);
  }
  if load64 + @options Options.verbose {
    if eq load64 + c Compile.status NoError {
      printf("compilation succeeded:\n", NULL);
      compile_print_final_info(STDOUT_FILENO);
    }
  }
}

fn compile_state_init -> u64 {
  store64 @c memory_alloc(sizeof Compile);
  assert(cast u64 c, "memory allocation of compile state failed\n");
  store64 + c Compile.ins_count 0;
  store64 + c Compile.imm_index 0;
  store64 + c Compile.symbol_count 0;
  store64 + c Compile.cstring_count 0;
  block_init(+ c Compile.global, NULL);
  store64 + c Compile.block_count 0;
  store64 + c Compile.block_count_largest 0;
  store64 + c Compile.label_count 0;
  store64 + c Compile.status NoError;
  store64 + c Compile.entry_point 0;
  store64 + c Compile.ts_count 0;
  store64 + c Compile.vs_count 0;
  store64 + c Compile.type_count MAX_PRIMITIVE_TYPE;
  store64 + c Compile.warning_count 0;
  store64 + c Compile.error_count 0;
  store64 + c Compile.struct_id 1;

  debug_info_init(cast ptr<Debug_info> + c Compile.info);

  store64 + @ir_code_str * I_NOP                sizeof cstr "I_NOP";
  store64 + @ir_code_str * I_POP                sizeof cstr "I_POP";
  store64 + @ir_code_str * I_MOVE               sizeof cstr "I_MOVE";
  store64 + @ir_code_str * I_MOVE_LOCAL         sizeof cstr "I_MOVE_LOCAL";
  store64 + @ir_code_str * I_STORE64            sizeof cstr "I_STORE64";
  store64 + @ir_code_str * I_STORE32            sizeof cstr "I_STORE32";
  store64 + @ir_code_str * I_STORE16            sizeof cstr "I_STORE16";
  store64 + @ir_code_str * I_STORE8             sizeof cstr "I_STORE8";
  store64 + @ir_code_str * I_LOAD64             sizeof cstr "I_LOAD64";
  store64 + @ir_code_str * I_LOAD32             sizeof cstr "I_LOAD32";
  store64 + @ir_code_str * I_LOAD16             sizeof cstr "I_LOAD16";
  store64 + @ir_code_str * I_LOAD8              sizeof cstr "I_LOAD8";
  store64 + @ir_code_str * I_PUSH_ADDR_OF       sizeof cstr "I_PUSH_ADDR_OF";
  store64 + @ir_code_str * I_PUSH_LOCAL_ADDR_OF sizeof cstr "I_PUSH_LOCAL_ADDR_OF";
  store64 + @ir_code_str * I_PUSH               sizeof cstr "I_PUSH";
  store64 + @ir_code_str * I_PUSH_LOCAL         sizeof cstr "I_PUSH_LOCAL";
  store64 + @ir_code_str * I_PUSH_IMM           sizeof cstr "I_PUSH_IMM";
  store64 + @ir_code_str * I_ADD                sizeof cstr "I_ADD";
  store64 + @ir_code_str * I_SUB                sizeof cstr "I_SUB";
  store64 + @ir_code_str * I_MUL                sizeof cstr "I_MUL";
  store64 + @ir_code_str * I_LSHIFT             sizeof cstr "I_LSHIFT";
  store64 + @ir_code_str * I_RSHIFT             sizeof cstr "I_RSHIFT";
  store64 + @ir_code_str * I_DIV                sizeof cstr "I_DIV";
  store64 + @ir_code_str * I_DIVMOD             sizeof cstr "I_DIVMOD";
  store64 + @ir_code_str * I_LT                 sizeof cstr "I_LT";
  store64 + @ir_code_str * I_GT                 sizeof cstr "I_GT";
  store64 + @ir_code_str * I_AND                sizeof cstr "I_AND";
  store64 + @ir_code_str * I_LOGICAL_NOT        sizeof cstr "I_LOGICAL_NOT";
  store64 + @ir_code_str * I_NOT                sizeof cstr "I_NOT";
  store64 + @ir_code_str * I_OR                 sizeof cstr "I_OR";
  store64 + @ir_code_str * I_XOR                sizeof cstr "I_XOR";
  store64 + @ir_code_str * I_EQ                 sizeof cstr "I_EQ";
  store64 + @ir_code_str * I_NEQ                sizeof cstr "I_NEQ";
  store64 + @ir_code_str * I_RET                sizeof cstr "I_RET";
  store64 + @ir_code_str * I_NORET              sizeof cstr "I_NORET";
  store64 + @ir_code_str * I_PRINT              sizeof cstr "I_PRINT";
  store64 + @ir_code_str * I_LABEL              sizeof cstr "I_LABEL";
  store64 + @ir_code_str * I_CALL               sizeof cstr "I_CALL";
  store64 + @ir_code_str * I_ADDR_CALL          sizeof cstr "I_ADDR_CALL";
  store64 + @ir_code_str * I_JMP                sizeof cstr "I_JMP";
  store64 + @ir_code_str * I_JZ                 sizeof cstr "I_JZ";
  store64 + @ir_code_str * I_BEGIN_FUNC         sizeof cstr "I_BEGIN_FUNC";
  store64 + @ir_code_str * I_LOOP_LABEL         sizeof cstr "I_LOOP_LABEL";
  store64 + @ir_code_str * I_SYSCALL0           sizeof cstr "I_SYSCALL0";
  store64 + @ir_code_str * I_SYSCALL1           sizeof cstr "I_SYSCALL1";
  store64 + @ir_code_str * I_SYSCALL2           sizeof cstr "I_SYSCALL2";
  store64 + @ir_code_str * I_SYSCALL3           sizeof cstr "I_SYSCALL3";
  store64 + @ir_code_str * I_SYSCALL4           sizeof cstr "I_SYSCALL4";
  store64 + @ir_code_str * I_SYSCALL5           sizeof cstr "I_SYSCALL5";
  store64 + @ir_code_str * I_SYSCALL6           sizeof cstr "I_SYSCALL6";

  store64 + @compile_type_str * TypeNone           sizeof cstr "none";
  store64 + @compile_type_str * TypeAny            sizeof cstr "any";
  store64 + @compile_type_str * TypePtr            sizeof cstr "ptr";
  store64 + @compile_type_str * TypeUnsigned64     sizeof cstr "u64";
  store64 + @compile_type_str * TypeUnsigned32     sizeof cstr "u32";
  store64 + @compile_type_str * TypeUnsigned16     sizeof cstr "u16";
  store64 + @compile_type_str * TypeUnsigned8      sizeof cstr "u8";
  store64 + @compile_type_str * TypeCString        sizeof cstr "cstr";
  store64 + @compile_type_str * TypeFunc           sizeof cstr "func";
  store64 + @compile_type_str * TypeSyscallFunc    sizeof cstr "syscallfunc";
  store64 + @compile_type_str * TypeStruct         sizeof cstr "struct";
  store64 + @compile_type_str * MAX_PRIMITIVE_TYPE sizeof cstr "";

  type_init(cast ptr<Type> + + c Compile.types * sizeof Type TypeNone, TypeNone, 0, 0, 1);
  type_init(cast ptr<Type> + + c Compile.types * sizeof Type TypeAny, TypeAny, 0, sizeof any, 1);
  type_init(cast ptr<Type> + + c Compile.types * sizeof Type TypePtr, TypePtr, 0, sizeof ptr, 1);
  type_init(cast ptr<Type> + + c Compile.types * sizeof Type TypeUnsigned64, TypeUnsigned64, 0, sizeof u64, 1);
  type_init(cast ptr<Type> + + c Compile.types * sizeof Type TypeUnsigned32, TypeUnsigned32, 0, sizeof u32, 1);
  type_init(cast ptr<Type> + + c Compile.types * sizeof Type TypeUnsigned16, TypeUnsigned16, 0, sizeof u16, 1);
  type_init(cast ptr<Type> + + c Compile.types * sizeof Type TypeUnsigned8, TypeUnsigned8, 0, sizeof u8, 1);
  type_init(cast ptr<Type> + + c Compile.types * sizeof Type TypeCString, TypeCString, 0, sizeof cstr, 1);
  type_init(cast ptr<Type> + + c Compile.types * sizeof Type TypeFunc, TypeFunc, 0, sizeof ptr, 1);
  type_init(cast ptr<Type> + + c Compile.types * sizeof Type TypeSyscallFunc, TypeSyscallFunc, 0, sizeof ptr, 1);
  type_init(cast ptr<Type> + + c Compile.types * sizeof Type TypeStruct, TypeStruct, 0, 1, 1); // why is empty struct size 1?

  { let _ = compile_create_syscall("syscall0", 0); }
  { let _ = compile_create_syscall("syscall1", 1); }
  { let _ = compile_create_syscall("syscall2", 2); }
  { let _ = compile_create_syscall("syscall3", 3); }
  { let _ = compile_create_syscall("syscall4", 4); }
  { let _ = compile_create_syscall("syscall5", 5); }
  { let _ = compile_create_syscall("syscall6", 6); }

  {
    const count = 2;
    let contract : Type : count = 0;
    type_init(cast ptr<Type> + at contract * sizeof Type 0, TypePtr, 0, sizeof ptr, 1);
    type_init(cast ptr<Type> + at contract * sizeof Type 1, TypeCString, 0, sizeof cstr, 1);
    let result : Type = 0;
    let _ = type_from_contract(cast ptr<Type> at contract, count, TYPE_CONTRACT_CREATE, at result);
  }
  {
    let value : Value = 0;
    store64 + @value Value.num load64 + @p Parser.source_hash;
    store64 + @value Value.konst 1;
    let type : Type = 0;
    type_init(at type, TypeUnsigned64, 0, sizeof u64, 1);
    let _ = compile_create_value("VERSION_ID", at value, at type);
  }
  {
    let value : Value = 0;
    store64 + @value Value.num 0;
    store64 + @value Value.konst 1;
    let type : Type = 0;
    type_init(at type, TypePtr, 0, sizeof ptr, 1);
    let _ = compile_create_value("NULL", at value, at type);
  }
  NoError;
}

fn compile_state_free -> none {
  memory_free(c);
}
