// noise.spl

include "lib/common.spl"
include "lib/random.spl"

fn main -> none {
  common_init();
  random_init(RANDOM_LC, time());

  let mode: u64 = 434; // 0662
  let path: cstr = "noise.ppm";
  let fd = open(path, or or O_CREAT O_TRUNC O_WRONLY, mode);
  if neq fd ERROR {
    let w: u64 = 128;
    let h: u64 = 128;
    const max_value: u64 = 255;
    // write ppm header
    let args: any = (
      path,
      w,
      h,
      max_value
    );
    dprintf(fd, "P3\n# `%s`\n%d %d\n%d\n", @args);

    // generate and write pixels to ppm file
    let y: u64 = 0;
    while < y h {
      let x: u64 = 0;
      while < x w {
        let color: u64 = random_range(0, max_value);
        let args: any = color, color, color;
        dprintf(fd, " %d %d %d ", @args);
        if not % x 4 dprintf(fd, "\n", null);
        store64 @x + 1 x;
      }
      dprintf(fd, "\n", null);
      store64 @y + 1 y;
    }
    close(fd);
  }
}
