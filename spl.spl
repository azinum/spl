//
// spl.spl - simple programming language
//
// self hosted implementation of spl in spl
//

struct Options (
  compile         : u64,
  run             : u64,
  debug           : u64,
  filename        : cstr,
  enable_warnings : u64,
  disable_dce     : u64,
  dce_all         : u64,
  no_verbose      : u64
);

let options : Options 0;

include "lib/common.spl"
include "common.spl"
include "lexer.spl"
include "ast.spl"
include "parser.spl"
include "ir.spl"
include "compile.spl"
include "typecheck.spl"

fn usage(prog : any) -> none {
  let tmp tmp_it;
  let p tmp_push_cstr;
  p("Usage; ");
  p(prog);
  p(" [OPTIONS]\n\nOPTIONS:\n");
  p("  <filename>      - path to file\n");
  p("  run             - run program directly\n");
  p("  no-com          - do not compile target executable\n");
  p("  no-debug        - do not write debug information\n");
  p("  enable-warnings - enable basic warnings\n");
  p("  disable-dce     - disable dead code elimination\n");
  p("  dce-all         - eliminate all dead code, including all symbols\n");
  p("  no-verbose      - disable verbose output\n");
  putsn(STDOUT_FILENO, tmp, - tmp_it tmp);
  = @tmp_it tmp;
}

fn spl_options_init -> none {
  = + @options Options.compile 1;
  = + @options Options.run 0;
  = + @options Options.debug 1;
  = + @options Options.filename NULL;
  = + @options Options.enable_warnings 0;
  = + @options Options.disable_dce 0;
  = + @options Options.dce_all 0;
  = + @options Options.no_verbose 0;
}

fn spl_start(filename : any) -> u64 {
  let result NoError;

  let fd open(filename, 0, O_RDONLY);
  if neq fd ERROR {
    let source tmp_it;
    let size read_file_into_buffer_and_null_terminate(fd, source);
    = @tmp_it + size tmp_it;
    if eq parser_init(filename, source) NoError {
      ast_push(
        cast ptr load64 + @p Parser.ast,
        parse()
      );
      if and eq load64 + @p Parser.status NoError eq l.status NoError {
        // ast_print(load64 + @p Parser.ast, 0, STDOUT_FILENO);
        if eq compile_state_init() NoError {
          if eq typecheck_program(cast ptr load64 + @p Parser.ast) NoError {
            if eq ir_start_compile(cast ptr load64 + @p Parser.ast) NoError {
              if load64 + @options Options.debug {
                // TODO: implement
              }
              if load64 + @options Options.compile {
                // TODO: implement
                let message cast cstr tmp_it;
                tmp_push_cstr("total compilation time was ? seconds (");
                tmp_push_u64(load64 + @p Parser.line_count);
                tmp_push_cstr(" loc, ");
                tmp_push_u64(load64 + @p Parser.source_count);
                tmp_push_cstr(" file(s))\n");
                tmp_push_byte(0);
                print_info(message);
                = @tmp_it message;

                compile_print_symbol_info(STDOUT_FILENO);
              }
            }
          }
          compile_state_free();
        }
      }
      else {
        // TODO: handle
      }
      parser_free();
    }
    else {
      // TODO: handle
    }
    close(fd);
  }
  else {
    let message tmp_it;
    tmp_push_cstr("failed to open file `");
    tmp_push_cstr(filename);
    tmp_push_cstr("`\n");
    tmp_push_byte(0);
    err(message);
    = @tmp_it message;
  }
  result;
}

fn main(argc : u64, argv : any) -> none {
  common_init();
  ast_init();
  spl_options_init();

  let arg argv;
  let i 0;
  if < argc 2 {
    usage(#arg);
  }
  else {
    = @arg + sizeof any arg;
    while neq load64 arg NULL {
      let argument cast cstr load64 arg;
      if eq 0 strcmp(argument, "run") {
        = + @options Options.run 1;
      }
      else if eq 0 strcmp(argument, "no-com") {
        = + @options Options.compile 0;
      }
      else if eq 0 strcmp(argument, "no-debug") {
        = + @options Options.debug 0;
      }
      else if eq 0 strcmp(argument, "enable-warnings") {
        = + @options Options.enable_warnings 1;
      }
      else if eq 0 strcmp(argument, "disable-dce") {
        = + @options Options.disable_dce 1;
      }
      else if eq 0 strcmp(argument, "dce-all") {
        = + @options Options.dce_all 1;
      }
      else if eq 0 strcmp(argument, "no-verbose") {
        = + @options Options.no_verbose 1;
      }
      else {
        = + @options Options.filename argument;
      }
      = @arg + sizeof any arg;
    }
    if neq load64 + @options Options.filename 0 {
      let result spl_start(load64 + @options Options.filename);
    }
    else {
      err("no input file was specified\n");
    }
  }
}
