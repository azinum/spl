// compile.spl

fn symbol_init(symbol : ptr) -> none {
  memset(symbol, 0, sizeof Symbol);
  store64 + symbol Symbol.imm UINT64_MAX;
  store64 + symbol Symbol.size 0;
  store64 + symbol Symbol.num_elements_init 0;
  store64 + symbol Symbol.konst 0;
  store64 + symbol Symbol.sym_type SYM_LOCAL_VAR;
  store64 + symbol Symbol.type TypeNone;
  store64 + symbol Symbol.ref_count 0;
}

fn symbol_print(symbol : ptr) -> none {
  assert(0, "symbol_print(): not implemented yet\n");
}

fn block_init(block : ptr, parent : ptr) -> none {
  store64 + block Block.symbol_count 0;
  store64 + block Block.parent parent;
}

// block : Block*, fs : Function*, name : Buffer*, symbol : Symbol**, symbol_index : u64*, levels_descend : u64*
fn compile_lookup_value(block : ptr, fs : ptr, name : ptr, symbol : ptr, symbol_index : ptr, levels_descend : ptr) -> u64 {
  let result Error;
  if and < load64 + name Buffer.length MAX_NAME_SIZE neq cast u64 block NULL {
    let copy : u8 : MAX_NAME_SIZE cast u8 0;
    memset(@copy, 0, MAX_NAME_SIZE);
    strncpy(cast cstr @copy, cast cstr load64 + name Buffer.data, load64 + name Buffer.length);
    let i 0;
    let count load64 + block Block.symbol_count;
    let found 0;
    let done 0;
    while and eq done 0 < i count {
      let index : u64 load64 + + block Block.symbols * sizeof u64 i;
      let sym + + @c Compile.symbols * sizeof Symbol index;
      if eq 0 strncmp(cast cstr + sym Symbol.name, cast cstr @copy, MAX_NAME_SIZE) {
        if neq cast u64 symbol NULL {
          store64 symbol sym;
        }
        if neq cast u64 symbol_index NULL {
          store64 symbol_index index;
        }
        store64 @result NoError;
        store64 @done 1;
        store64 @found 1;
      }
      store64 @i + 1 i;
    }
    if eq found 0 {
      if neq cast u64 levels_descend NULL {
        store64 levels_descend + 1 load64 levels_descend;
      }
      store64 @result compile_lookup_value(cast ptr load64 + block Block.parent, fs, name, symbol, symbol_index, levels_descend);
    }
  }
  result;
}

// block : Block*, fs : Function*, token : Token*, symbol : Symbol**, symbol_index : u64*
fn compile_declare_value(block : ptr, fs : ptr, token : ptr, symbol : ptr, symbol_index : ptr) -> u64 {
  let result Error;
  if < load64 + token Token.length MAX_NAME_SIZE {
    if < load64 + block Block.symbol_count MAX_SYMBOL {
      let levels 0; // how many levels did we descend before we found a symbol?
      let token_buffer : Buffer 0;
      store64 + @token_buffer Buffer.data   load64 + token Token.buffer;
      store64 + @token_buffer Buffer.length load64 + token Token.length;

      // we are only allowed to create a new symbol if none was found in the current block
      let lookup_result compile_lookup_value(block, fs, @token_buffer, symbol, NULL, @levels);
      if and eq lookup_result NoError eq levels 0 {
        let message cast cstr tmp_it;
        tmp_push_cstr("symbol `");
        tmp_push_str(load64 + token Token.buffer, load64 + token Token.length);
        tmp_push_cstr("` already exists\n");
        tmp_push_byte(0);
        compile_error(message);
        store64 @tmp_it message;
      }
      else {
        let index load64 + @c Compile.symbol_count;
        if neq cast u64 symbol_index NULL {
          store64 symbol_index index;
        }
        let block_index_address * load64 + block Block.symbol_count sizeof u64;
        // block->symbols[block->symbol_count] store64 index;
        store64 + + block Block.symbols block_index_address index;
        // *symbol store64 &c->symbols[index];
        store64 symbol + + @c Compile.symbols * sizeof Symbol index;

        store64 + @c Compile.symbol_count + 1 load64 + @c Compile.symbol_count;
        store64 + block Block.symbol_count + 1 load64 + block Block.symbol_count;

        let s cast ptr load64 symbol;
        symbol_init(s);
        memcpy(+ s Symbol.token, token, sizeof Token);
        memcpy(+ s Symbol.name, load64 + token Token.buffer, load64 + token Token.length);
        store64 @result NoError;
      }
    }
    else {
      assert(0, "symbol capacity in block reached\n");
    }
  }
  else {
    assert(0, "value name too long\n");
  }
  result;
}

fn compile_create_syscall(name : cstr, argc : u64) -> u64 {
  let result NoError;
  let block + @c Compile.global;
  let token : Token 0;
  store64 + @token Token.buffer name;
  store64 + @token Token.length strnlen(name, MAX_NAME_SIZE);
  store64 + @token Token.type T_IDENTIFIER;
  store64 + @token Token.filename NULL;
  store64 + @token Token.source NULL;
  store64 + @token Token.line 0;
  store64 + @token Token.column 0;

  let symbol : ptr NULL;
  let symbol_index UINT64_MAX;
  if eq compile_declare_value(block, NULL, @token, @symbol, @symbol_index) NoError {
    store64 + symbol Symbol.size load64 + @compile_type_size * sizeof u64 TypeSyscallFunc;
    store64 + symbol Symbol.sym_type SYM_FUNC;
    store64 + symbol Symbol.type TypeSyscallFunc;
    store64 + + symbol Symbol.token Token.v symbol_index;
    store64 + symbol Symbol.ref_count 1;
    let func + + symbol Symbol.value Value.func;
    store64 + func Function.ir_address UINT64_MAX;
    store64 + func Function.label UINT64_MAX;
    store64 + func Function.argc + 1 argc;
    store64 + func Function.locals_offset_counter 0;
    store64 + func Function.rtype TypeUnsigned64;
  }
  else {
    compile_error("symbol already exists\n");
    store64 @result Error;
  }
  result;
}

// TODO(lucas): fully implement
fn compile_print_symbol_info(fd : u64) -> none {
  let message tmp_it;
  let count : u64 load64 + @c Compile.symbol_count;
  let i : u64 0;
  while < i count {
    let symbol + + @c Compile.symbols * sizeof Symbol i;
    let type load64 + symbol Symbol.type;
    let num_i_digits : u64 digit_count(i);
    let j : u64 0;

    if neq type TypeSyscallFunc {
      while < j - 3 num_i_digits {
        tmp_push_cstr("0");
        store64 @j + 1 j;
      }
      tmp_push_u64(i);
      tmp_push_cstr(": ");
      if eq type TypeFunc {
        let func cast ptr + + symbol Symbol.value Value.func;
        tmp_push_cstr("`");
        tmp_push_cstr(cast cstr + symbol Symbol.name);
        tmp_push_cstr("` (");

        // iterate args
        let arg_index : u64 0;
        let arg_count : u64 load64 + func Function.argc;
        while < arg_index arg_count {
          // Symbol* arg = &c->symbols[func->args[arg_index]];
          let arg cast ptr + + @c Compile.symbols * sizeof Symbol load64 + + func Function.args * sizeof u64 arg_index;
          let num_elements : u64 / (load64 + arg Symbol.size) (load64 + @compile_type_size * sizeof u64 load64 + arg Symbol.type);
          tmp_push_cstr(cast cstr load64 + @compile_type_str * sizeof cstr load64 + arg Symbol.type);

          if > num_elements 1 {
            tmp_push_cstr(" : ");
            tmp_push_u64(num_elements);
          }

          if neq arg_index - arg_count 1 {
            tmp_push_cstr(", ");
          }
          store64 @arg_index + 1 arg_index;
        }
        tmp_push_cstr(") -> ");
        tmp_push_cstr(cast cstr load64 + @compile_type_str * sizeof u64 load64 + func Function.rtype);
      }
      else {
        tmp_push_cstr("`");
        tmp_push_cstr(cast cstr + symbol Symbol.name);
        tmp_push_cstr("` (type = ");
        tmp_push_u64(load64 + symbol Symbol.type);
        tmp_push_cstr(", size = ");
        tmp_push_u64(load64 + symbol Symbol.size);
        tmp_push_cstr(")");
      }
      tmp_push_cstr(" - ");
      tmp_push_cstr(load64 + + symbol Symbol.token Token.filename);
      tmp_push_cstr(":");
      tmp_push_u64(load64 + + symbol Symbol.token Token.line);
      tmp_push_cstr(":");
      tmp_push_u64(load64 + + symbol Symbol.token Token.column);
      tmp_push_cstr("\n");
    }
    store64 @i + 1 i;
  }
  tmp_push_byte(0);
  puts(fd, message);
  store64 @tmp_it message;
}

// fd : u64, block : Block*
fn compile_print_block(fd : u64, block : ptr) -> none {
  let count load64 + block Block.symbol_count;
  let i 0;
  puts(fd, "compile_print_block:\n");
  while < i count {
    let index : u64 load64 + + block Block.symbols * sizeof u64 i;
    print index;
    store64 @i + 1 i;
  }
}

fn compile_linux_nasm_x86_64(fd : u64) -> u64 {
  // TODO(lucas): implement
  NoError;
}

fn compile(target : u64, fd : u64) -> u64 {
  let result NoError;
  let time_start : timespec 0;
  let time_end : timespec 0;
  { let _ clock_gettime(CLOCK_MONOTONIC, @time_start); }

  if eq target TARGET_LINUX_NASM_X86_64 {
    store64 @result compile_linux_nasm_x86_64(fd);
  }
  else {
    assert(0, "invalid compile target\n");
  }

  { let _ clock_gettime(CLOCK_MONOTONIC, @time_end); }

  if eq load64 + @c Compile.status NoError {
    let message cast cstr tmp_it;
    tmp_push_cstr("code generation took ");
    tmp_push_u64(- load64 + @time_end timespec.tv_sec load64 + @time_start timespec.tv_sec);
    tmp_push_cstr(".");
    tmp_push_u64(/ - load64 + @time_end timespec.tv_nsec load64 + @time_start timespec.tv_nsec 10000000);
    tmp_push_cstr(" seconds\n");
    tmp_push_byte(0);
    print_info(message);
    store64 @tmp_it message;
  }

  result;
}

fn compile_state_init -> u64 {
  store64 + @c Compile.ins_count 0;
  store64 + @c Compile.imm_index 0;
  store64 + @c Compile.symbol_count 0;
  store64 + @c Compile.cstring_count 0;
  block_init(+ @c Compile.global, NULL);
  store64 + @c Compile.label_count 0;
  store64 + @c Compile.status NoError;
  store64 + @c Compile.entry_point 0;
  store64 + @c Compile.ts_count 0;
  store64 + @c Compile.vs_count 0;
  store64 + @c Compile.type_count MAX_PRIMITIVE_TYPE;

  store64 + @ir_code_str * I_NOP                sizeof cstr "I_NOP";
  store64 + @ir_code_str * I_POP                sizeof cstr "I_POP";
  store64 + @ir_code_str * I_MOVE               sizeof cstr "I_MOVE";
  store64 + @ir_code_str * I_MOVE_LOCAL         sizeof cstr "I_MOVE_LOCAL";
  store64 + @ir_code_str * I_STORE64            sizeof cstr "I_STORE64";
  store64 + @ir_code_str * I_STORE32            sizeof cstr "I_STORE32";
  store64 + @ir_code_str * I_STORE16            sizeof cstr "I_STORE16";
  store64 + @ir_code_str * I_STORE8             sizeof cstr "I_STORE8";
  store64 + @ir_code_str * I_LOAD64             sizeof cstr "I_LOAD64";
  store64 + @ir_code_str * I_LOAD32             sizeof cstr "I_LOAD32";
  store64 + @ir_code_str * I_LOAD16             sizeof cstr "I_LOAD16";
  store64 + @ir_code_str * I_LOAD8              sizeof cstr "I_LOAD8";
  store64 + @ir_code_str * I_PUSH_ADDR_OF       sizeof cstr "I_PUSH_ADDR_OF";
  store64 + @ir_code_str * I_PUSH_LOCAL_ADDR_OF sizeof cstr "I_PUSH_LOCAL_ADDR_OF";
  store64 + @ir_code_str * I_PUSH               sizeof cstr "I_PUSH";
  store64 + @ir_code_str * I_PUSH_LOCAL         sizeof cstr "I_PUSH_LOCAL";
  store64 + @ir_code_str * I_PUSH_IMM           sizeof cstr "I_PUSH_IMM";
  store64 + @ir_code_str * I_ADD                sizeof cstr "I_ADD";
  store64 + @ir_code_str * I_SUB                sizeof cstr "I_SUB";
  store64 + @ir_code_str * I_MUL                sizeof cstr "I_MUL";
  store64 + @ir_code_str * I_LSHIFT             sizeof cstr "I_LSHIFT";
  store64 + @ir_code_str * I_RSHIFT             sizeof cstr "I_RSHIFT";
  store64 + @ir_code_str * I_DIV                sizeof cstr "I_DIV";
  store64 + @ir_code_str * I_DIVMOD             sizeof cstr "I_DIVMOD";
  store64 + @ir_code_str * I_LT                 sizeof cstr "I_LT";
  store64 + @ir_code_str * I_GT                 sizeof cstr "I_GT";
  store64 + @ir_code_str * I_AND                sizeof cstr "I_AND";
  store64 + @ir_code_str * I_LOGICAL_NOT        sizeof cstr "I_LOGICAL_NOT";
  store64 + @ir_code_str * I_OR                 sizeof cstr "I_OR";
  store64 + @ir_code_str * I_EQ                 sizeof cstr "I_EQ";
  store64 + @ir_code_str * I_NEQ                sizeof cstr "I_NEQ";
  store64 + @ir_code_str * I_RET                sizeof cstr "I_RET";
  store64 + @ir_code_str * I_NORET              sizeof cstr "I_NORET";
  store64 + @ir_code_str * I_PRINT              sizeof cstr "I_PRINT";
  store64 + @ir_code_str * I_LABEL              sizeof cstr "I_LABEL";
  store64 + @ir_code_str * I_CALL               sizeof cstr "I_CALL";
  store64 + @ir_code_str * I_ADDR_CALL          sizeof cstr "I_ADDR_CALL";
  store64 + @ir_code_str * I_JMP                sizeof cstr "I_JMP";
  store64 + @ir_code_str * I_JZ                 sizeof cstr "I_JZ";
  store64 + @ir_code_str * I_BEGIN_FUNC         sizeof cstr "I_BEGIN_FUNC";
  store64 + @ir_code_str * I_LOOP_LABEL         sizeof cstr "I_LOOP_LABEL";
  store64 + @ir_code_str * I_SYSCALL0           sizeof cstr "I_SYSCALL0";
  store64 + @ir_code_str * I_SYSCALL1           sizeof cstr "I_SYSCALL1";
  store64 + @ir_code_str * I_SYSCALL2           sizeof cstr "I_SYSCALL2";
  store64 + @ir_code_str * I_SYSCALL3           sizeof cstr "I_SYSCALL3";
  store64 + @ir_code_str * I_SYSCALL4           sizeof cstr "I_SYSCALL4";
  store64 + @ir_code_str * I_SYSCALL5           sizeof cstr "I_SYSCALL5";
  store64 + @ir_code_str * I_SYSCALL6           sizeof cstr "I_SYSCALL6";

  store64 + @compile_type_str * TypeNone           sizeof cstr "None";
  store64 + @compile_type_str * TypeAny            sizeof cstr "Any";
  store64 + @compile_type_str * TypePtr            sizeof cstr "Ptr";
  store64 + @compile_type_str * TypeUnsigned64     sizeof cstr "Unsigned64";
  store64 + @compile_type_str * TypeUnsigned32     sizeof cstr "Unsigned32";
  store64 + @compile_type_str * TypeUnsigned16     sizeof cstr "Unsigned16";
  store64 + @compile_type_str * TypeUnsigned8      sizeof cstr "Unsigned8";
  store64 + @compile_type_str * TypeCString        sizeof cstr "CString";
  store64 + @compile_type_str * TypeFunc           sizeof cstr "Func";
  store64 + @compile_type_str * TypeSyscallFunc    sizeof cstr "SyscallFunc";
  store64 + @compile_type_str * TypeStruct         sizeof cstr "Struct";
  store64 + @compile_type_str * MAX_PRIMITIVE_TYPE sizeof cstr "";

  store64 + @compile_type_size * TypeNone           sizeof u64 0;
  store64 + @compile_type_size * TypeAny            sizeof u64 sizeof ptr;
  store64 + @compile_type_size * TypePtr            sizeof u64 sizeof ptr;
  store64 + @compile_type_size * TypeUnsigned64     sizeof u64 sizeof u64;
  store64 + @compile_type_size * TypeUnsigned32     sizeof u64 sizeof u32;
  store64 + @compile_type_size * TypeUnsigned16     sizeof u64 sizeof u16;
  store64 + @compile_type_size * TypeUnsigned8      sizeof u64 sizeof u8;
  store64 + @compile_type_size * TypeCString        sizeof u64 sizeof ptr;
  store64 + @compile_type_size * TypeFunc           sizeof u64 sizeof ptr;
  store64 + @compile_type_size * TypeSyscallFunc    sizeof u64 sizeof ptr;
  store64 + @compile_type_size * TypeStruct         sizeof u64 1;
  store64 + @compile_type_size * MAX_PRIMITIVE_TYPE sizeof u64 0;

  { let _ compile_create_syscall("syscall0", 0); }
  { let _ compile_create_syscall("syscall1", 1); }
  { let _ compile_create_syscall("syscall2", 2); }
  { let _ compile_create_syscall("syscall3", 3); }
  { let _ compile_create_syscall("syscall4", 4); }
  { let _ compile_create_syscall("syscall5", 5); }
  { let _ compile_create_syscall("syscall6", 6); }

  NoError;
}

fn compile_state_free -> none {

}
