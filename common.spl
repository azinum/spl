// common.spl

// temporary `scratch` buffer
const TMP_SIZE * 8 32768;
memory tmp TMP_SIZE;
let tmp_it 0;
let tmp_end 0;

fn err(message : any) -> none {
  puts(STDERR_FILENO, "[error]: ");
  puts(STDERR_FILENO, message);
}

fn error(message : any) -> none {
  err(message);
  exit(1);
}

fn print_info(message : cstr) -> none {
  if not load64 + @options Options.no_verbose {
    puts(STDOUT_FILENO, "[info]: ");
    puts(STDOUT_FILENO, message);
  }
}

fn assert(cond : u64, message : cstr) -> none {
  if eq 0 cond {
    puts(STDERR_FILENO, "[assertion failed]: ");
    puts(STDERR_FILENO, message);
    exit(1);
  }
}

fn HERE puts(STDOUT_FILENO, "HERE\n");

fn common_init -> none {
  store64 @tmp_it @tmp;
  store64 @tmp_end + @tmp TMP_SIZE;
  store64 @NULL 0;
}

// TODO(lucas): handle escape sequences
fn tmp_push_cstr(str : any) -> none {
  let length : u64 strlen(cast cstr str);
  if > length 0 {
    if < (+ tmp_it length) tmp_end {
        memcpy(tmp_it, str, length);
        store64 @tmp_it + length tmp_it;
    }
    else {
      puts(STDOUT_FILENO, "tried to push: `");
      puts(STDOUT_FILENO, str);
      puts(STDOUT_FILENO, "`\n");
      error("tmp_push_cstr: out of scratch memory\n");
    }
  }
}

fn tmp_push_str(str : any, length : u64) -> none {
  if > length 0 {
    if < (+ tmp_it length) tmp_end {
      if > length 0 {
        memcpy(tmp_it, str, length);
        store64 @tmp_it + length tmp_it;
      }
    }
    else {
      error("tmp_push_str: out of scratch memory\n");
    }
  }
}

fn tmp_push_byte(byte : u64) -> none {
  if < (+ tmp_it 1) tmp_end {
    memcpy(tmp_it, @byte, 1);
    store64 @tmp_it + 1 tmp_it;
  }
  else {
    error("tmp_push_byte: out of scratch memory\n");
  }
}

fn tmp_push_u64(n : u64) -> none {
  const max_size 128;
  let buf : u8 : max_size cast u8 0;
  let length digit_count(n);
  u64_to_str(n, @buf, max_size);
  tmp_push_str(@buf, length);
}
