// test.spl
// basic test suite for a subset of language features

include "lib/common.spl"

let test_count = 0;
let test_passed = 0;
let test_failed = 0;

fn test_init -> none {
  store64 @test_count 0;
  store64 @test_passed 0;
  store64 @test_failed 0;
}

fn assert_equal(a: u64, b: u64, message: cstr) -> none {
  store64 @test_count + 1 test_count;
  if neq a b {
    let args: any = (a, b, message);
    dprintf(STDERR_FILENO, "assert_equal (%d != %d): %s\n", @args);
    store64 @test_failed + 1 test_failed;
  }
  else {
    store64 @test_passed + 1 test_passed;
  }
}

fn assert_not_equal(a: u64, b: u64, message: cstr) -> none {
  store64 @test_count + 1 test_count;
  if eq a b {
    let args: any = (a, b, message);
    dprintf(STDERR_FILENO, "assert_not_equal failed (%d == %d): %s\n", @args);
    store64 @test_failed + 1 test_failed;
  }
  else {
    store64 @test_passed + 1 test_passed;
  }
}

include "tests/core/arith.spl"
include "tests/core/sizeof.spl"
include "tests/core/bitwise.spl"
include "tests/core/function.spl"
include "tests/core/struct.spl"
include "tests/core/array.spl"
include "tests/core/const.spl"

include "tests/lib/common.spl"

fn test_start -> none {
  printf("running tests...\n", null);
  test_arith();
  test_sizeof();
  test_bitwise();
  test_function();
  test_struct();
  test_array();
  test_const();

  test_lib_common();
}

fn test_finalize -> none {
  let args: any = test_passed, test_failed, test_count;
  printf("tests complete: %d passed, %d failed, %d total\n", @args);
}

fn main -> none {
  test_init();
  test_start();
  test_finalize();
}
