// memory.spl

// memory map allocation layout:
// [ header | data ]
// where header contains the size of the mapped memory

fn memory_alloc(size: u64) -> ptr {
  let data = null;

  let prot: u64 = or PROT_READ PROT_WRITE;
  let flags: u64 = or MAP_PRIVATE MAP_ANONYMOUS;
  store64 @data mmap(null, + sizeof u64 size, prot, flags, 0, 0);
  if data {
    store64 data size;
    store64 @data + sizeof u64 data;
  }
  data;
}

fn memory_realloc(mem: ptr, new_size: u64) -> ptr {
  let data = null;

  let old_size: u64 = load64 - mem sizeof u64;
  let flags: u64 = MREMAP_MAYMOVE;
  store64 @data mremap(- mem sizeof u64, + sizeof u64 old_size, + sizeof u64 new_size, flags, null);
  if data {
    store64 data new_size;
    store64 @data + sizeof u64 data;
  }
  data;
}

fn memory_free(mem: ptr) -> none {
  if mem {
    let size: u64 = load64 - mem sizeof u64;
    munmap(- mem sizeof u64, + sizeof u64 size);
  }
}
