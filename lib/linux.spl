// linux.spl

const STDIN_FILENO = 0;
const STDOUT_FILENO = 1;
const STDERR_FILENO = 2;

const SYS_read = 0;
const SYS_write = 1;
const SYS_open = 2;
const SYS_close = 3;
const SYS_stat = 4;
const SYS_fstat = 5;
const SYS_lstat = 6;
const SYS_poll = 7;
const SYS_lseek = 8;
const SYS_mmap = 9;
const SYS_mprotect = 10;
const SYS_munmap = 11;
const SYS_brk = 12;
const SYS_rt_sigaction = 13;
const SYS_rt_sigprocmask = 14;
const SYS_rt_sigreturn = 15;
const SYS_ioctl = 16;
const SYS_pread64 = 17;
const SYS_pwrite64 = 18;
const SYS_readv = 19;
const SYS_writev = 20;
const SYS_access = 21;
const SYS_pipe = 22;
const SYS_select = 23;
const SYS_sched_yield = 24;
const SYS_mremap = 25;
const SYS_msync = 26;
const SYS_mincore = 27;
const SYS_madvise = 28;
const SYS_shmget = 29;
const SYS_shmat = 30;
const SYS_shmctl = 31;
const SYS_dup = 32;
const SYS_dup2 = 33;
const SYS_pause = 34;
const SYS_nanosleep = 35;
const SYS_getitimer = 36;
const SYS_alarm = 37;
const SYS_setitimer = 38;
const SYS_getpid = 39;
const SYS_sendfile = 40;
const SYS_socket = 41;
const SYS_connect = 42;
const SYS_accept = 43;
const SYS_sendto = 44;
const SYS_recvfrom = 45;
const SYS_sendmsg = 46;
const SYS_recvmsg = 47;
const SYS_shutdown = 48;
const SYS_bind = 49;
const SYS_listen = 50;
const SYS_getsockname = 51;
const SYS_getpeername = 52;
const SYS_socketpair = 53;
const SYS_setsockopt = 54;
const SYS_getsockopt = 55;
const SYS_clone = 56;
const SYS_fork = 57;
const SYS_vfork = 58;
const SYS_execve = 59;
const SYS_exit = 60;
const SYS_wait4 = 61;
const SYS_kill = 62;
const SYS_uname = 63;
const SYS_semget = 64;
const SYS_semop = 65;
const SYS_semctl = 66;
const SYS_shmdt = 67;
const SYS_msgget = 68;
const SYS_msgsnd = 69;
const SYS_msgrcv = 70;
const SYS_msgctl = 71;
const SYS_fcntl = 72;
const SYS_flock = 73;
const SYS_fsync = 74;
const SYS_fdatasync = 75;
const SYS_truncate = 76;
const SYS_ftruncate = 77;
const SYS_getdents = 78;
const SYS_getcwd = 79;
const SYS_chdir = 80;
const SYS_fchdir = 81;
const SYS_rename = 82;
const SYS_mkdir = 83;
const SYS_rmdir = 84;
const SYS_creat = 85;
const SYS_link = 86;
const SYS_unlink = 87;
const SYS_symlink = 88;
const SYS_readlink = 89;
const SYS_chmod = 90;
const SYS_fchmod = 91;
const SYS_chown = 92;
const SYS_fchown = 93;
const SYS_lchown = 94;
const SYS_umask = 95;
const SYS_gettimeofday = 96;
const SYS_getrlimit = 97;
const SYS_getrusage = 98;
const SYS_sysinfo = 99;
const SYS_times = 100;
const SYS_ptrace = 101;
const SYS_getuid = 102;
const SYS_syslog = 103;
const SYS_getgid = 104;
const SYS_setuid = 105;
const SYS_setgid = 106;
const SYS_geteuid = 107;
const SYS_getegid = 108;
const SYS_setpgid = 109;
const SYS_getppid = 110;
const SYS_getpgrp = 111;
const SYS_setsid = 112;
const SYS_setreuid = 113;
const SYS_setregid = 114;
const SYS_getgroups = 115;
const SYS_setgroups = 116;
const SYS_setresuid = 117;
const SYS_getresuid = 118;
const SYS_setresgid = 119;
const SYS_getresgid = 120;
const SYS_getpgid = 121;
const SYS_setfsuid = 122;
const SYS_setfsgid = 123;
const SYS_getsid = 124;
const SYS_capget = 125;
const SYS_capset = 126;
const SYS_rt_sigpending = 127;
const SYS_rt_sigtimedwait = 128;
const SYS_rt_sigqueueinfo = 129;
const SYS_rt_sigsuspend = 130;
const SYS_sigaltstack = 131;
const SYS_utime = 132;
const SYS_mknod = 133;
const SYS_uselib = 134;
const SYS_personality = 135;
const SYS_ustat = 136;
const SYS_statfs = 137;
const SYS_fstatfs = 138;
const SYS_sysfs = 139;
const SYS_getpriority = 140;
const SYS_setpriority = 141;
const SYS_sched_setparam = 142;
const SYS_sched_getparam = 143;
const SYS_sched_setscheduler = 144;
const SYS_sched_getscheduler = 145;
const SYS_sched_get_priority_max = 146;
const SYS_sched_get_priority_min = 147;
const SYS_sched_rr_get_interval = 148;
const SYS_mlock = 149;
const SYS_munlock = 150;
const SYS_mlockall = 151;
const SYS_munlockall = 152;
const SYS_vhangup = 153;
const SYS_modify_ldt = 154;
const SYS_pivot_root = 155;
const SYS__sysctl = 156;
const SYS_prctl = 157;
const SYS_arch_prctl = 158;
const SYS_adjtimex = 159;
const SYS_setrlimit = 160;
const SYS_chroot = 161;
const SYS_sync = 162;
const SYS_acct = 163;
const SYS_settimeofday = 164;
const SYS_mount = 165;
const SYS_umount2 = 166;
const SYS_swapon = 167;
const SYS_swapoff = 168;
const SYS_reboot = 169;
const SYS_sethostname = 170;
const SYS_setdomainname = 171;
const SYS_iopl = 172;
const SYS_ioperm = 173;
const SYS_create_module = 174;
const SYS_init_module = 175;
const SYS_delete_module = 176;
const SYS_get_kernel_syms = 177;
const SYS_query_module = 178;
const SYS_quotactl = 179;
const SYS_nfsservctl = 180;
const SYS_getpmsg = 181;
const SYS_putpmsg = 182;
const SYS_afs_syscall = 183;
const SYS_tuxcall = 184;
const SYS_security = 185;
const SYS_gettid = 186;
const SYS_readahead = 187;
const SYS_setxattr = 188;
const SYS_lsetxattr = 189;
const SYS_fsetxattr = 190;
const SYS_getxattr = 191;
const SYS_lgetxattr = 192;
const SYS_fgetxattr = 193;
const SYS_listxattr = 194;
const SYS_llistxattr = 195;
const SYS_flistxattr = 196;
const SYS_removexattr = 197;
const SYS_lremovexattr = 198;
const SYS_fremovexattr = 199;
const SYS_tkill = 200;
const SYS_time = 201;
const SYS_futex = 202;
const SYS_sched_setaffinity = 203;
const SYS_sched_getaffinity = 204;
const SYS_set_thread_area = 205;
const SYS_io_setup = 206;
const SYS_io_destroy = 207;
const SYS_io_getevents = 208;
const SYS_io_submit = 209;
const SYS_io_cancel = 210;
const SYS_get_thread_area = 211;
const SYS_lookup_dcookie = 212;
const SYS_epoll_create = 213;
const SYS_epoll_ctl_old = 214;
const SYS_epoll_wait_old = 215;
const SYS_remap_file_pages = 216;
const SYS_getdents64 = 217;
const SYS_set_tid_address = 218;
const SYS_restart_syscall = 219;
const SYS_semtimedop = 220;
const SYS_fadvise64 = 221;
const SYS_timer_create = 222;
const SYS_timer_settime = 223;
const SYS_timer_gettime = 224;
const SYS_timer_getoverrun = 225;
const SYS_timer_delete = 226;
const SYS_clock_settime = 227;
const SYS_clock_gettime = 228;
const SYS_clock_getres = 229;
const SYS_clock_nanosleep = 230;
const SYS_exit_group = 231;
const SYS_epoll_wait = 232;
const SYS_epoll_ctl = 233;
const SYS_tgkill = 234;
const SYS_utimes = 235;
const SYS_vserver = 236;
const SYS_mbind = 237;
const SYS_set_mempolicy = 238;
const SYS_get_mempolicy = 239;
const SYS_mq_open = 240;
const SYS_mq_unlink = 241;
const SYS_mq_timedsend = 242;
const SYS_mq_timedreceive = 243;
const SYS_mq_notify = 244;
const SYS_mq_getsetattr = 245;
const SYS_kexec_load = 246;
const SYS_waitid = 247;
const SYS_add_key = 248;
const SYS_request_key = 249;
const SYS_keyctl = 250;
const SYS_ioprio_set = 251;
const SYS_ioprio_get = 252;
const SYS_inotify_init = 253;
const SYS_inotify_add_watch = 254;
const SYS_inotify_rm_watch = 255;
const SYS_migrate_pages = 256;
const SYS_openat = 257;
const SYS_mkdirat = 258;
const SYS_mknodat = 259;
const SYS_fchownat = 260;
const SYS_futimesat = 261;
const SYS_newfstatat = 262;
const SYS_unlinkat = 263;
const SYS_renameat = 264;
const SYS_linkat = 265;
const SYS_symlinkat = 266;
const SYS_readlinkat = 267;
const SYS_fchmodat = 268;
const SYS_faccessat = 269;
const SYS_pselect6 = 270;
const SYS_ppoll = 271;
const SYS_unshare = 272;
const SYS_set_robust_list = 273;
const SYS_get_robust_list = 274;
const SYS_splice = 275;
const SYS_tee = 276;
const SYS_sync_file_range = 277;
const SYS_vmsplice = 278;
const SYS_move_pages = 279;
const SYS_utimensat = 280;
const SYS_epoll_pwait = 281;
const SYS_signalfd = 282;
const SYS_timerfd_create = 283;
const SYS_eventfd = 284;
const SYS_fallocate = 285;
const SYS_timerfd_settime = 286;
const SYS_timerfd_gettime = 287;
const SYS_accept4 = 288;
const SYS_signalfd4 = 289;
const SYS_eventfd2 = 290;
const SYS_epoll_create1 = 291;
const SYS_dup3 = 292;
const SYS_pipe2 = 293;
const SYS_inotify_init1 = 294;
const SYS_preadv = 295;
const SYS_pwritev = 296;
const SYS_rt_tgsigqueueinfo = 297;
const SYS_perf_event_open = 298;
const SYS_recvmmsg = 299;
const SYS_fanotify_init = 300;
const SYS_fanotify_mark = 301;
const SYS_prlimit64 = 302;
const SYS_name_to_handle_at = 303;
const SYS_open_by_handle_at = 304;
const SYS_clock_adjtime = 305;
const SYS_syncfs = 306;
const SYS_sendmmsg = 307;
const SYS_setns = 308;
const SYS_getcpu = 309;
const SYS_process_vm_readv = 310;
const SYS_process_vm_writev = 311;
const SYS_kcmp = 312;
const SYS_finit_module = 313;

const O_RDONLY = 0;
const O_WRONLY = 1;
const O_CREAT = 64;
const O_TRUNC = 512;

// https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/bits/mman-linux.h.html
const PROT_READ      = 0x1;
const PROT_WRITE     = 0x2;
const PROT_EXEC      = 0x4;
const PROT_NONE      = 0x0;
const PROT_GROWSDOWN = 0x01000000;
const PROT_GROWSUP   = 0x02000000;

const MAP_SHARED     = 0x01;
const MAP_PRIVATE    = 0x02;
const MAP_FIXED      = 0x10;
const MAP_ANONYMOUS  = 0x20;
const MAP_ANON       = MAP_ANONYMOUS;

const MREMAP_MAYMOVE   = 0x1;
const MREMAP_FIXED     = 0x2;
const MREMAP_DONTUNMAP = 0x4;

const SOCK_DGRAM      = 1;
const SOCK_STREAM     = 2;
const SOCK_RAW        = 3;
const SOCK_RDM        = 4;
const SOCK_SEQPACKET  = 5;
const SOCK_DCCP	      = 6;
const SOCK_PACKET     = 10;

const AF_INET = 2;

const INADDR_ANY = 0;

struct sockaddr (
  sa_family: u16,
  sa_data: u8[14]
);

struct in_addr (
  s_addr: u32
);

struct sockaddr_in (
  sin_family: u16,
  sin_port: u16,
  sin_addr: in_addr,
  sin_zero: u8[8]
);

fn read(fd: u64, buf: any, count: u64) -> u64 {
  syscall3(SYS_read, fd, buf, count);
}

fn write(fd: u64, buf: any, count: u64) -> none {
  let _ = syscall3(SYS_write, fd, buf, count);
}

fn open(path: any, flags: u64, mode: u64) -> u64 {
  syscall3(SYS_open, path, flags, mode);
}

fn close(fd: u64) -> none {
  let _ = syscall1(SYS_close, fd);
}

fn exit(error_code: u64) -> none {
  let _ = syscall1(SYS_exit, error_code);
}

fn time -> u64 {
  syscall1(SYS_time, 0);
}

fn fsync(fd: u64) -> none {
  let _ = syscall1(SYS_fsync, fd);
}

fn clock_gettime(clock_id: u64, spec: ptr<Timespec>) -> u64 {
  syscall2(SYS_clock_gettime, clock_id, spec);
}

fn nanosleep(req: ptr<timespec>, remaining: ptr<Timespec>) -> none {
  let _ = syscall2(SYS_nanosleep, req, remaining);
}

fn mmap(start: ptr, length: u64, prot: u64, flags: u64, fd: u64, offset: u64) -> ptr {
  cast ptr syscall6(SYS_mmap, start, length, prot, flags, fd, offset);
}

fn mremap(start: ptr, old_size: u64, new_size: u64, flags: u64, new_start: ptr) -> ptr {
  cast ptr syscall5(SYS_mremap, start, old_size, new_size, flags, new_start);
}

fn munmap(start: ptr, length: u64) -> none {
  let _ = syscall2(SYS_munmap, start, length);
}

fn execve(command: cstr, argv: ptr, envp: ptr) -> none {
  let _ = syscall3(SYS_execve, command, argv, envp);
}

fn fork -> u64 {
  syscall0(SYS_fork);
}

// pid: u64, stat_addr: u64*, options: u64, ru: rusage*
fn wait4(pid: u64, stat_addr: ptr, options: u64, ru: ptr) -> u64 {
  syscall4(SYS_wait4, pid, stat_addr, options, ru);
}

fn WEXITSTATUS(status: u64) -> u64 {
  rshift and status 0xff00 8;
}

fn WIFEXITED(status: u64) -> u64 {
  eq 0 and status 0x7f;
}

fn exec_command(command_list: ptr) -> none {
  let pid: u64 = fork();
  if eq pid 0 { // child process
    execve(cast cstr load64 command_list, command_list, NULL);
  }
  else if > pid 0 { // parent
    let done: u64 = 0;
    while eq done 0 {
      let wstatus: u64 = 0;
      if > wait4(- 0 1, @wstatus, 0, NULL) 0 {
        store64 @done 1;
      }
      if WIFEXITED(wstatus) {
        store64 @done 1;
      }
    }
  }
}

fn socket(family: u64, type: u64, protocol: u64) -> u64 {
  syscall3(SYS_socket, family, type, protocol);
}
