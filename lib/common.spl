// common.spl
// platform independent common/standard library

const ERROR - 0 2;
const NONE - 0 2;
const NoError 0;
const Error 1;
let NULL cast ptr 0;

const UINT64_MAX 0xffffffffffffffff;
const INT64_MAX  0x7fffffffffffffff;
const UINT32_MAX 0xffffffff;
const INT32_MAX  0x7fffffff;
const UINT16_MAX 0xffff;
const INT16_MAX  0x7fff;
const UINT8_MAX  0xff;
const INT8_MAX   0x7f;

const u64.max UINT64_MAX;
const i64.max INT64_MAX;
const u32.max UINT32_MAX;
const i32.max INT32_MAX;
const u16.max UINT16_MAX;
const i16.max INT16_MAX;
const u8.max  UINT8_MAX;
const i8.max  INT8_MAX;

struct Buffer (
  data : ptr,
  length : u64
);

fn buffer_init(buffer : ptr, data : ptr, length : u64) -> none {
  store64 + buffer Buffer.data data;
  store64 + buffer Buffer.length length;
}

fn strlen(str : cstr) -> u64 {
  let length : u64 0;
  while < 0 load8 str {
    store64 @length + 1 length;
    store64 @str    + 1 str;
  }
  length;
}

fn strnlen(str : cstr, max_length : u64) -> u64 {
  let length : u64 0;
  while and < length max_length < 0 load8 str{
    store64 @length + 1 length;
    store64 @str    + 1 str;
  }
  length;
}

fn strcmp(a : cstr, b : cstr) -> u64 {
  let result 0;
  let done 0;
  while eq done 0 {
    let a_ch load8 a;
    let b_ch load8 b;
    if neq a_ch b_ch {
      store64 @result 1;
      store64 @done 1;
    }
    else if or eq a_ch 0 eq b_ch 0 {
      store64 @done 1;
    }
    store64 @a + 1 a;
    store64 @b + 1 b;
  }
  result;
}

fn strncmp(a : cstr, b : cstr, count : u64) -> u64 {
  let result 0;
  let i 0;
  let done 0;
  while and < i count eq done 0 {
    let a_ch load8 a;
    let b_ch load8 b;
    if neq a_ch b_ch {
      store64 @result 1;
      store64 @done 1;
    }
    else if or eq a_ch 0 eq b_ch 0 {
      store64 @done 1;
    }
    store64 @a + 1 a;
    store64 @b + 1 b;
    store64 @i + 1 i;
  }
  result;
}

fn strncpy(dest : cstr, src : cstr, n : u64) -> none {
  let count : u64 0;
  let length strlen(src);
  while and < count length < count n {
    store8 cast ptr dest load8 cast ptr src;
    store64 @dest  + 1 dest;
    store64 @src   + 1 src;
    store64 @count + 1 count;
  }
  store8 cast ptr dest 0;
}

fn memset(mem : ptr, c : u64, n : u64) -> none {
  let count : u64 0;
  while < count n {
    store8 mem c;
    store64 @mem   + 1 mem;
    store64 @count + 1 count;
  }
}

fn memset64(mem : any, c : u64, n : u64) -> none {
  let count : u64 0;
  while < count n {
    store64 mem c;
    store64 @mem   + sizeof u64 mem;
    store64 @count + sizeof u64 count;
  }
}

fn memcpy(dest : any, src : any, n : u64) -> none {
  let count : u64 0;
  while < count n {
    store8 dest load8 src;
    store64 @dest  + 1 dest;
    store64 @src   + 1 src;
    store64 @count + 1 count;
  }
}

fn digit_count(n : u64) -> u64 {
  const base : u64 10;
  let count : u64 1;
  while > n 9 {
    store64 @n / n base;
    store64 @count + 1 count;
  }
  count;
}

fn u64_to_str(n : u64, str : any, max_size : u64) -> none {
  const base : u64 10;
  let count : u64 digit_count(n);
  let i : u64 0;

  store64 @str + str - count 1;

  while and (< i count) (< i max_size) {
    let index % n base;
    store8 str load8 + index "0123456789abcdef";
    store64 @n   / n base;
    store64 @str - str 1;
    store64 @i   + 1 i;
  }
}

fn is_digit(ch : u64) -> u64 {
  and > ch - '0' 1 < ch + '9' 1;
}

fn is_hex(ch : u64) -> u64 {
  or or is_digit(ch) (and > ch - 'a' 1 < ch + 'f' 1) (and > ch - 'A' 1 < ch + 'F' 1);
}

fn is_alpha(ch : u64) -> u64 {
  or (and > ch - 'a' 1 < ch + 'z' 1) (and > ch - 'A' 1 < ch + 'Z' 1);
}

fn is_extended_ascii(ch : u64) -> u64 {
  and > ch 127 < ch 255;
}

fn to_lower(ch : u64) -> u64 {
  if and > ch - 'A' 1 < ch + 'Z' 1 {
    store64 @ch + 32 ch;
  }
  ch;
}

fn str_to_u64(str : cstr, length : u64) -> u64 {
  let result   : u64 0;
  let base     : u64 10;
  let i        : u64 0;
  let done     : u64 0;
  let hex_done : u64 0;

  if > length 2 {
    if eq strncmp(str, "0x", 2) 0 {
      store64 @base 16;
      store64 @i 2;
      while and < i length not hex_done {
        let ch to_lower(load8 + str i);
        if is_digit(ch) {
          store64 @result + * result base - ch '0';
        }
        else if is_hex(ch) {
          store64 @result + * result base + 10 - ch 'a';
        }
        else {
          store64 @result UINT64_MAX;
          store64 @hex_done 1;
        }
        store64 @i + 1 i;
      }
      store64 @done 1;
    }
  }
  if not done {
    store64 @i 0;
    while < i length {
      let ch load8 + str i;
      store64 @result + * result base - ch '0';
      store64 @i + 1 i;
    }
  }
  result;
}

include "lib/linux.spl"
