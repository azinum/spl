// common.spl
// platform independent common/standard library

const ERROR = - 0 2;
const NoError = 0;
const Error = 1;

// https://www.asciitable.com/
enum u8 (
  ASCII_NUL, // null
  ASCII_SOH, // start of heading
  ASCII_STX, // start of text
  ASCII_ETX, // end of text
  ASCII_EOT, // end of transmission
  ASCII_ENQ, // enquiry
  ASCII_ACK, // acknowledge
  ASCII_BEL, // bell
  ASCII_BS,  // backspace
  ASCII_TAB, // horizontal tab
  ASCII_LF,  // line feed
  ASCII_VT,  // vertical tab
  ASCII_FF,  // form feed, new page
  ASCII_CR,  // carriage return
  ASCII_SO,  // shift out
  ASCII_SI,  // shift in
  ASCII_DLE, // data link escape
  ASCII_DC1, // device control 1
  ASCII_DC2, // device control 2
  ASCII_DC3, // device control 3
  ASCII_DC4, // device control 4
  ASCII_NAK, // negative acknowledge
  ASCII_SYN, // synchronous idle
  ASCII_ETB, // end of transmission block
  ASCII_CAN, // cancel
  ASCII_EM,  // end of medium
  ASCII_SUB, // substitute
  ASCII_ESC, // escape
  ASCII_FS,  // file separator
  ASCII_GS,  // group separator
  ASCII_RS,  // record separator
  ASCII_US   // unit separator
);

// temporary `scratch` buffer
const TMP_SIZE = 1048576; // 1 mb
let tmp: u8[TMP_SIZE] = 0;
let tmp_it = 0;
let tmp_end = 0;

const UINT64_MAX: u64 = 0xffffffffffffffff;
const INT64_MAX:  u64 = 0x7fffffffffffffff;
const UINT32_MAX: u32 = 0xffffffff;
const INT32_MAX:  u32 = 0x7fffffff;
const UINT16_MAX: u16 = 0xffff;
const INT16_MAX:  u16 = 0x7fff;
const UINT8_MAX:  u8 = 0xff;
const INT8_MAX:   u8 = 0x7f;

const u64.max = UINT64_MAX;
const i64.max = INT64_MAX;
const u32.max = UINT32_MAX;
const i32.max = INT32_MAX;
const u16.max = UINT16_MAX;
const i16.max = INT16_MAX;
const u8.max  = UINT8_MAX;
const i8.max  = INT8_MAX;

const NONE = UINT64_MAX;

const MAX_PATH_SIZE = 512;

struct Buffer (
  data: ptr,
  length: u64
);

fn buffer_init(buffer: ptr<Buffer>, data: ptr, length: u64) -> none {
  store64 + buffer Buffer.data data;
  store64 + buffer Buffer.length length;
}

fn common_init -> none {
  store64 @tmp_it @tmp;
  store64 @tmp_end + @tmp TMP_SIZE;
}

// TODO(lucas): branchless version
fn align(n: u64, alignment: u64) -> u64 {
  let result: u64 = 0;
  if eq 0 % n alignment {
    store64 @result n;
  }
  else {
    store64 @result - + n alignment % n alignment;
  }
  result;
}

fn strlen(str: cstr) -> u64 {
  let length: u64 = 0;
  while neq 0 load8 str {
    store64 @length + 1 length;
    store64 @str    + 1 str;
  }
  length;
}

fn strnlen(str: cstr, max_length: u64) -> u64 {
  let length: u64 = 0;
  while and < length max_length neq 0 load8 str {
    store64 @length + 1 length;
    store64 @str    + 1 str;
  }
  length;
}

fn strcmp(a: cstr, b: cstr) -> u64 {
  let result = 0;
  let done = 0;
  while eq done 0 {
    let a_ch = load8 a;
    let b_ch = load8 b;
    if neq a_ch b_ch {
      store64 @result 1;
      store64 @done 1;
    }
    else if or eq a_ch 0 eq b_ch 0 {
      store64 @done 1;
    }
    store64 @a + 1 a;
    store64 @b + 1 b;
  }
  result;
}

fn strncmp(a: cstr, b: cstr, count: u64) -> u64 {
  let result = 0;
  let i = 0;
  let done = 0;
  while and < i count eq done 0 {
    let a_ch = load8 a;
    let b_ch = load8 b;
    if neq a_ch b_ch {
      store64 @result 1;
      store64 @done 1;
    }
    else if or eq a_ch 0 eq b_ch 0 {
      store64 @done 1;
    }
    store64 @a + 1 a;
    store64 @b + 1 b;
    store64 @i + 1 i;
  }
  result;
}

fn strncpy(dest: cstr, src: cstr, n: u64) -> none {
  let count: u64 = 0;
  while < count n {
    store8 cast ptr dest load8 cast ptr src;
    store64 @dest  + 1 dest;
    store64 @src   + 1 src;
    store64 @count + 1 count;
  }
  store8 cast ptr dest 0;
}

fn memset(mem: any, c: u64, n: u64) -> none {
  let count: u64 = 0;
  while < count n {
    store8 mem c;
    store64 @mem   + 1 mem;
    store64 @count + 1 count;
  }
}

fn memset64(mem: any, c: u64, n: u64) -> none {
  let count: u64 = 0;
  while < count n {
    store64 mem c;
    store64 @mem   + sizeof u64 mem;
    store64 @count + sizeof u64 count;
  }
}

fn memcpy(dest: any, src: any, n: u64) -> none {
  let count: u64 = 0;
  while < count n {
    store8 dest load8 src;
    store64 @dest  + 1 dest;
    store64 @src   + 1 src;
    store64 @count + 1 count;
  }
}

fn digit_count(n: u64) -> u64 {
  const base: u64 = 10;
  let count: u64 = 0;
  let done: u64 = 0;
  while eq done 0 {
    store64 @n / n 10;
    store64 @count + 1 count;
    if eq n 0 {
      store64 @done 1;
    }
  }
  count;
}

// TODO(lucas): this function is a bit broken when passing certain max_sizes. u64_to_str(1234, @buff, 2) for instance yields 61, but should yield 12.
fn u64_to_str(n: u64, str: any, max_size: u64) -> none {
  const base: u64 = 10;
  let count: u64 = digit_count(n);
  let i: u64 = 0;

  if < max_size count {
    let diff: u64 = - count max_size;
    store64 @count max_size;
    store64 @n / n * base diff;
  }

  store64 @str + str - count 1;

  while < i count {
    let index = % n base;
    store8 str load8 + index "0123456789abcdef";
    store64 @n   / n base;
    store64 @str - str 1;
    store64 @i   + 1 i;
  }
}

fn u64_to_str2(n: u64, str: any) -> none {
  const max_size = 20;
  u64_to_str(n, str, max_size);
}

fn is_digit(ch: u64) -> u64 {
  and > ch - '0' 1 < ch + '9' 1;
}

fn is_bin(ch: u64) -> u64 {
  or eq ch '0' eq ch '1';
}

fn is_hex(ch: u64) -> u64 {
  or or is_digit(ch) (and > ch - 'a' 1 < ch + 'f' 1) (and > ch - 'A' 1 < ch + 'F' 1);
}

fn is_alpha(ch: u64) -> u64 {
  or (and > ch - 'a' 1 < ch + 'z' 1) (and > ch - 'A' 1 < ch + 'Z' 1);
}

fn is_extended_ascii(ch: u64) -> u64 {
  and > ch 127 < ch 255;
}

fn to_lower(ch: u64) -> u64 {
  if and > ch - 'A' 1 < ch + 'Z' 1 {
    store64 @ch + 32 ch;
  }
  ch;
}

const DIGIT_SEPARATOR: u64 = '_';

fn str_to_u64(str: cstr, length: u64) -> u64 {
  let result:   u64 = 0;
  let base:     u64 = 10;
  let i:        u64 = 0;
  let done:     u64 = 0;
  let hex_done: u64 = 0;
  let bin_done: u64 = 0;

  if > length 2 {
    if eq strncmp(str, "0x", 2) 0 {
      store64 @base 16;
      store64 @i 2;
      while and < i length not hex_done {
        let ch = to_lower(load8 + str i);
        if is_digit(ch) {
          store64 @result + * result base - ch '0';
        }
        else if is_hex(ch) {
          store64 @result + * result base + 10 - ch 'a';
        }
        else if neq ch DIGIT_SEPARATOR {
          store64 @result UINT64_MAX;
          store64 @hex_done 1;
        }
        store64 @i + 1 i;
      }
      store64 @done 1;
    }
    else if eq strncmp(str, "0b", 2) 0 {
      store64 @base 2;
      store64 @i 2;
      while and < i length not bin_done {
        let ch = to_lower(load8 + str i);
        if is_bin(ch) {
          store64 @result + * result base - ch '0';
        }
        else if neq ch DIGIT_SEPARATOR {
          store64 @result UINT64_MAX;
          store64 @bin_done 1;
        }
        store64 @i + 1 i;
      }
      store64 @done 1;
    }
  }
  if not done {
    store64 @i 0;
    while < i length {
      let ch = load8 + str i;
      if neq ch DIGIT_SEPARATOR {
        store64 @result + * result base - ch '0';
      }
      store64 @i + 1 i;
    }
  }
  result;
}

fn cstr_to_u64(str: cstr) -> u64 {
  str_to_u64(str, strlen(str));
}

// standard write functions
fn write_cstr(mem: ptr, str: cstr) -> u64 {
  let length = strlen(str);
  memcpy(mem, str, length);
  length;
}

fn write_str(mem: ptr, str: ptr, length: u64) -> u64 {
  memcpy(mem, str, length);
  length;
}

fn write_u64(mem: ptr, n: u64) -> u64 {
  let count = digit_count(n);
  u64_to_str(n, mem, count);
  count;
}

fn write_u8(mem: ptr, n: u8) -> u64 {
  const length = sizeof n;
  memcpy(mem, @n, length);
  length;
}

// bounded write functions
fn bwrite_str(mem: ptr, end: ptr, str: cstr, length: u64) -> u64 {
  let result: u64 = 0;
  if > length 0 {
    if eq end null {
      store64 @result write_str(mem, cast ptr str, length);
    }
    else {
      if < mem end {
        let diff = cast u64 - end mem;
        if < length diff {
          memcpy(mem, str, length);
          store64 @result length;
        }
        else {
          memcpy(mem, str, diff);
          store64 @result diff;
        }
      }
    }
  }
  result;
}

fn bwrite_cstr(mem: ptr, end: ptr, str: cstr) -> u64 {
  let result: u64 = 0;
  if str {
    store64 @result bwrite_str(mem, end, str, strlen(str));
  }
  result;
}

fn bwrite_u64(mem: ptr, end: ptr, n: u64) -> u64 {
  let result: u64 = 0;
  let count: u64 = digit_count(n);
  if eq end null {
    u64_to_str(n, mem, count);
    store64 @result count;
  }
  else {
    if < mem end {
      let diff = cast u64 - end mem;
      if < count diff {
        u64_to_str(n, mem, count);
        store64 @result count;
      }
      else {
        u64_to_str(n, mem, diff);
        store64 @result diff;
      }
    }
  }
  result;
}

fn bwrite_u8(mem: ptr, end: ptr, n: u8) -> u64 {
  let result: u64 = 0;
  const length: u64 = sizeof n;
  if eq end null {
    memcpy(mem, @n, length);
    store64 @result length;
  }
  else if < mem end {
    memcpy(mem, @n, length);
    store64 @result length;
  }
  result;
}

// TODO(lucas): handle escape sequences
fn tmp_push_cstr(str: cstr) -> none {
  let length: u64 = strlen(str);
  if > length 0 {
    if < (+ tmp_it length) tmp_end {
        memcpy(tmp_it, str, length);
        store64 @tmp_it + length tmp_it;
    }
    else {
      // TODO(lucas): handle error
    }
  }
}

fn tmp_push_str(str: any, length: u64) -> none {
  if > length 0 {
    if < (+ tmp_it length) tmp_end {
      if > length 0 {
        memcpy(tmp_it, str, length);
        store64 @tmp_it + length tmp_it;
      }
    }
    else {
      // TODO(lucas): handle error
    }
  }
}

fn tmp_push_u64(n: u64) -> none {
  const MAX_LENGTH = 32;
  let buf: u8[* sizeof u64 MAX_LENGTH] = 0;
  let length = digit_count(n);
  u64_to_str(n, @buf, MAX_LENGTH);
  tmp_push_str(@buf, length);
}

fn tmp_push_byte(byte: u8) -> none {
  if < (+ tmp_it 1) tmp_end {
    memcpy(tmp_it, @byte, sizeof byte);
    store64 @tmp_it + 1 tmp_it;
  }
  else {
    // TODO(lucas): handle error
  }
}

fn first_dot(str: cstr) -> cstr {
  let it = str;
  let done: u64 = 0;
  while eq done 0 {
    let ch: u64 = load8 it;
    if or eq ch '.' eq ch 0 {
      store64 @done 1;
    }
    else {
      store64 @it + 1 it;
    }
  }
  it;
}

fn filename_from_path(path: cstr) -> cstr {
  let length = strlen(path);
  let filename = path;
  if > length 0 {
    store64 @filename cast cstr + - length 1 path;
    let i = length;
    let done = 0;
    while not done {
      store64 @i - i 1;
      let ch = load8 + path i;
      if eq ch '/' {
        store64 @i + i 1;
        store64 @done 1;
      }
      if eq i 0 {
        store64 @done 1;
      }
    }
    store64 @filename + path i;
  }
  filename;
}

include "lib/platform.spl"
include "lib/memory.spl"
