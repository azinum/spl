// platform.spl
// basic platform layer

// platforms
enum u64 (
  PLATFORM_LINUX,
  PLATFORM_OSX
);

struct Timespec (
  tv_sec : u64,
  tv_nsec : u64
);

// https://code.woboq.org/gcc/include/bits/time.h.html
const CLOCK_REALTIME = 0;
const CLOCK_MONOTONIC = 1;
const CLOCK_PROCESS_CPUTIME_ID = 2;
const CLOCK_THREAD_CPUTIME_ID = 3;
const CLOCK_MONOTONIC_RAW = 4;
const CLOCK_REALTIME_COARSE = 5;
const CLOCK_MONOTONIC_COARSE = 6;
const CLOCK_BOOTTIME = 7;
const CLOCK_REALTIME_ALARM = 8;
const CLOCK_BOOTTIME_ALARM = 9;
const CLOCK_TAI = 11;

if eq PLATFORM PLATFORM_LINUX {
  include "lib/linux.spl"
}
else if eq PLATFORM PLATFORM_OSX {
  include "lib/osx.spl"
}

const MAX_BUFFER_SIZE = 1024;

fn puts(fd: u64, str: cstr) -> none {
  write(fd, str, strlen(str));
}

fn put(str: cstr) -> none {
  write(STDOUT_FILENO, str, strlen(str));
}

fn putu(fd: u64, n: u64) -> none {
  const MAX_BUFF_SIZE = 512;
  let buff: u8[MAX_BUFF_SIZE] = 0;
  u64_to_str(n, @buff, MAX_BUFF_SIZE);
  puts(fd, cast cstr @buff);
}

fn read_file_into_buffer(fd: u64, buf: any) -> u64 {
  let n = 0;
  while neq 0 read(fd, buf, 1) {
    store64 @buf + 1 buf;
    store64 @n   + 1 n;
  }
  n;
}

fn read_file_into_buffer_and_null_terminate(fd: u64, buf: any) -> u64 {
  let n = 0;
  while neq 0 read(fd, buf, 1) {
    store64 @buf + 1 buf;
    store64 @n   + 1 n;
  }
  store8 buf 0;
  store64 @n + 1 n;
  n;
}

fn putc(fd: u64, ch: u8) -> none {
  write(fd, @ch, sizeof ch);
}

fn putsn(fd: u64, str: any, n: u64) -> none {
  write(fd, str, n);
}

fn snprintf(str: ptr, size: u64, format: cstr, args: any) -> u64 {
  let result = 0;
  let it = str; // string iterator
  let end = null;
  if neq size UINT64_MAX {
    store64 @end + + it size 0; // + 1 for null terminator NOTE(lucas): changed this (to + 0) because it wrote one more character than specified in the asprintf and asnprintf functions.
  }
  let fit = format; // format iterator
  let arg: ptr = cast ptr args;
  let done: u64 = 0;
  while eq done 0 {
    let it_diff = it;
    let ch = cast u64 load8 fit;
    if eq ch 0 {
      store64 @it + it bwrite_u8(it, end, cast u8 ch);
      store64 @done 1;
    }
    else if eq ch 92 { // `\`
      store64 @fit + 1 fit;
      store8 @ch load8 fit;
      if eq ch 't' {
        store64 @it + it bwrite_u8(it, end, cast u8 ASCII_TAB);
      }
      else if eq ch 'b' {
        store64 @it + it bwrite_u8(it, end, cast u8 ASCII_BS);
      }
      else if eq ch 'n' {
        store64 @it + it bwrite_u8(it, end, cast u8 ASCII_LF);
      }
      else if eq ch 'r' {
        store64 @it + it bwrite_u8(it, end, cast u8 ASCII_CR);
      }
      else if eq ch 'f' {
        store64 @it + it bwrite_u8(it, end, cast u8 ASCII_FF);
      }
      else if eq ch 39 {
        store64 @it + it bwrite_u8(it, end, cast u8 39);
      }
    }
    else if eq ch '%' {
      store64 @fit + 1 fit;
      store8 @ch load8 fit;
      if eq ch 's' {
        store64 @it + it bwrite_cstr(it, end, cast cstr load64 arg);
        store64 @arg + sizeof ptr arg;
      }
      else if eq ch 'c' {
        store64 @it + it bwrite_u8(it, end, cast u8 load8 arg);
        store64 @arg + sizeof ptr arg;
      }
      else if eq ch 'd' {
        store64 @it + it bwrite_u64(it, end, cast u64 load64 arg);
        store64 @arg + sizeof ptr arg;
      }
      else if eq ch 'i' {
        store64 @it + it bwrite_u64(it, end, cast u64 load64 arg);
        store64 @arg + sizeof ptr arg;
      }
      else if eq ch '*' {
        let length: u64 = load64 arg;
        store64 @arg + sizeof ptr arg;
        store64 @fit + 1 fit;
        store8 @ch load8 fit;
        if eq ch 's' {
          store64 @it + it bwrite_str(it, end, cast cstr load64 arg, length);
        }
        else {
          // ignore
        }
        store64 @arg + sizeof ptr arg;
      }
      else {
        store64 @it + it bwrite_u8(it, end, cast u8 ch);
      }
    }
    else {
      store64 @it + it bwrite_u8(it, end, cast u8 ch);
    }
    store64 @fit + 1 fit;
    store64 @it_diff - cast u64 it it_diff;
    if and neq cast u64 end null eq cast u64 it_diff 0 {
      let _ = write_u8(it, cast u8 0);
      store64 @done 1;
    }
  }
  store64 @result - cast u64 it str;
  if > result 0 {
    store64 @result - result 1;
  }
  result; // return number of characters written, excluding null terminator
}

fn _sprintf(str: ptr, format: cstr, args: any) -> u64 {
  snprintf(str, cast u64 UINT32_MAX, format, args);
}

fn sprintf(str: ptr, format: cstr, args: any) -> none {
  { let _ = _sprintf(str, format, args); }
}

fn sprintf2(str: ptr, format: cstr, args: any) -> u64 {
  _sprintf(str, format, args);
}

fn dprintf(fd: u64, format: cstr, args: any) -> none {
  let buffer: u8[MAX_BUFFER_SIZE] = 0;
  let n = snprintf(cast ptr @buffer, sizeof buffer, format, args);
  write(fd, cast ptr @buffer, n);
}

fn dnprintf(fd: u64, size: u64, format: cstr, args: any) -> none {
  let buffer: u8[MAX_BUFFER_SIZE] = 0;
  let n = snprintf(cast ptr @buffer, size, format, args);
  write(fd, cast ptr @buffer, n);
}

fn printf(format: cstr, args: any) -> none {
  dprintf(STDOUT_FILENO, format, args);
}

// appending sprintf
fn asprintf(buffer: ptr<ptr>, format: cstr, args: any) -> none {
  let n = snprintf(cast ptr deref buffer, UINT64_MAX, format, args);
  store64 buffer + n deref buffer;
}

// bounded and appending sprintf
fn asnprintf(buffer: ptr<ptr>, size: ptr<u64>, format: cstr, args: any) -> none {
  if > deref size 0 {
    let n = snprintf(deref buffer, deref size, format, args);
    store64 buffer + n deref buffer;
    if eq n 0 {
      store64 size 0;
    }
    if < n deref size {
      store64 size - deref size n;
    }
    else {
      store64 size 0;
    }
  }
}

fn assert(cond: u64, message: cstr) -> none {
  if eq 0 cond {
    dprintf(STDERR_FILENO, "[assertion failed]: %s", @message);
    exit(1);
  }
}

fn open_file_writable(path: cstr) -> u64 {
  let mode: u64 = 434; // 0662
  let flags: u64 = or or O_CREAT O_TRUNC O_WRONLY;
  open(path, flags, mode);
}
