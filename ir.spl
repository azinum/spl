// ir.spl

// Ir_code
enum u64 (
  I_NOP,
  I_POP,
  I_MOVE, // <id, offset, x>
  I_MOVE_LOCAL, // <local_id, x, x>
  I_STORE64,
  I_STORE32,
  I_STORE16,
  I_STORE8,
  I_LOAD64,
  I_LOAD32,
  I_LOAD16,
  I_LOAD8,
  I_PUSH_ADDR_OF, // <type, id, x>
  I_PUSH_LOCAL_ADDR_OF, // <type, local_id, x>
  I_PUSH, // <type, id, x>
  I_PUSH_LOCAL, // <type, local_id, x>
  I_PUSH_IMM, // <type, imm, x>
  I_ADD,
  I_SUB,
  I_MUL,
  I_LSHIFT,
  I_RSHIFT,
  I_DIV,
  I_DIVMOD,
  I_LT,
  I_GT,
  I_AND,
  I_LOGICAL_NOT,
  I_OR,
  I_EQ,
  I_NEQ,
  I_RET, // <x, frame_size, x>
  I_NORET, // <x, frame_size, x>
  I_PRINT,
  I_LABEL,
  I_CALL, // <label, argc, rtype>
  I_ADDR_CALL, // <x, argc, rtype>
  I_JMP,
  I_JZ, // <label, offset, x>
  I_BEGIN_FUNC, // <x, argc, frame_size>
  I_LOOP_LABEL,

  I_SYSCALL0,
  I_SYSCALL1,
  I_SYSCALL2,
  I_SYSCALL3,
  I_SYSCALL4,
  I_SYSCALL5,
  I_SYSCALL6,

  MAX_IR_CODE
);

enum u64 (
  TypeNone,
  TypeAny,
  TypePtr,
  TypeUnsigned64,
  TypeUnsigned32,
  TypeUnsigned16,
  TypeUnsigned8,
  TypeCString,
  TypeFunc,
  TypeSyscallFunc,
  TypeStruct,

  MAX_PRIMITIVE_TYPE
);

const MAX_COMPILE_TYPE 255;

// symbol types
enum u64 (
  SYM_FUNC_ARG,
  SYM_FUNC,
  SYM_LOCAL_VAR,
  SYM_GLOBAL_VAR
);

const MAX_FUNC_ARGC 6; // TODO(lucas): temp

struct Function (
  ir_address            : u64,
  label                 : u64,
  argc                  : u64,
  locals_offset_counter : u64,
  rtype                 : u64,
  args                  : u64 : MAX_FUNC_ARGC
);

struct Value (
  func  : Function,
  num   : u64,
  konst : u64
);

const MAX_NAME_SIZE 64;

struct Symbol (
  name                : u8 : MAX_NAME_SIZE,
  imm                 : u64,
  size                : u64,
  num_elements_init   : u64,
  konst               : u64,
  local_id            : u64,
  sym_type            : u64,
  type                : u64,
  token               : Token,
  value               : Value,
  ref_count           : u64
);

const MAX_SYMBOL 2048;
const MAX_STATIC_DATA * 32 1024;
const MAX_CSTRING 512;
const MAX_SYSCALL_FUNCTION 7;

struct Block (
  symbols      : u64 : MAX_SYMBOL, // index into compile state symbols
  symbol_count : u64,
  parent       : ptr
);

struct Op (
  i    : u64,
  dest : u64,
  src0 : u64,
  src1 : u64
);

const MAX_TYPE_STACK 256;
const MAX_INS * 32 1024;  // TODO(lucas): temp

struct Compile (
  ins              : Op : MAX_INS,
  ins_count        : u64,

  imm              : u8 : MAX_STATIC_DATA,
  imm_index        : u64,

  symbols          : Symbol : MAX_SYMBOL,
  symbol_count     : u64,

  cstrings         : u64 : MAX_CSTRING,
  cstring_count    : u64,

  global           : Block,

  label_count      : u64,  // labels that are used for branching

  status           : u64,
  entry_point      : u64,

  ts               : u64 : MAX_TYPE_STACK, // type stack
  ts_count         : u64, // this should be signed integer, but that is not implemented yet, so type stack overflow will be detected by using UINT64_MAX.

  vs               : Value : MAX_TYPE_STACK, // value stack. sometimes we need to grab values in the type checking phase. it also allows for some basic compile time evaluation of stuff.
  vs_count         : u64,

  type_count       : u64  // how many types are there, including primitive and user defined types?
);

let ir_code_str : cstr : MAX_IR_CODE "";
let compile_type_str : cstr : MAX_COMPILE_TYPE "";
let compile_type_size : u64 : MAX_COMPILE_TYPE 0;

enum u64 (
  TARGET_LINUX_NASM_X86_64,
  MAX_COMPILE_TARGET
);

let c : Compile 0;

fn OP(i : u64, op : ptr) -> none {
  store64 + op Op.i    i;
  store64 + op Op.dest NONE;
  store64 + op Op.src0 NONE;
  store64 + op Op.src1 NONE;
}

fn OP_init(i : u64, dest : u64, src0 : u64, src1 : u64, op : ptr) -> none {
  store64 + op Op.i    i;
  store64 + op Op.dest dest;
  store64 + op Op.src0 src0;
  store64 + op Op.src1 src1;
}

fn compile_error(message : cstr) -> none {
  if eq load64 + @c Compile.status NoError {
    let tmp tmp_it;
    tmp_push_cstr("[compile-error]: ");
    tmp_push_cstr(message);
    tmp_push_byte(0);
    puts(STDERR_FILENO, tmp);
    store64 @tmp_it tmp;
    store64 + @c Compile.status Error;
  }
}

// token : Token*
fn compile_error_at(token : ptr, message : cstr) -> none {
  if eq load64 + @c Compile.status NoError {
    let tmp tmp_it;
    tmp_push_cstr("[compile-error]: ");
    tmp_push_cstr(load64 + token Token.filename);
    tmp_push_cstr(":");
    tmp_push_u64(load64 + token Token.line);
    tmp_push_cstr(":");
    tmp_push_u64(load64 + token Token.column);
    tmp_push_cstr(": ");
    tmp_push_cstr(message);
    tmp_push_byte(0);
    puts(STDERR_FILENO, tmp);
    store64 @tmp_it tmp;
    store64 + @c Compile.status Error;
  }
}

fn ir_compile_warning(message : cstr) -> none {
  if eq load64 + @options Options.enable_warnings 1 {
    let tmp tmp_it;
    tmp_push_cstr("[ir-compile-warning]: ");
    tmp_push_cstr(message);
    tmp_push_byte(0);
    puts(STDERR_FILENO, tmp);
    store64 @tmp_it tmp;
  }
}

fn ir_compile_warning_at(token : ptr, message : cstr) -> none {
  if eq load64 + @options Options.enable_warnings 1 {
    let tmp tmp_it;
    tmp_push_cstr("[ir-compile-warning]: ");
    tmp_push_cstr(load64 + token Token.filename);
    tmp_push_cstr(":");
    tmp_push_u64(load64 + token Token.line);
    tmp_push_cstr(":");
    tmp_push_u64(load64 + token Token.column);
    tmp_push_cstr(": ");
    tmp_push_cstr(message);
    tmp_push_byte(0);
    puts(STDERR_FILENO, tmp);
    store64 @tmp_it tmp;
  }
}

fn ir_print(fd : u64) -> none {
  puts(fd, "ir_print:\n");
  let i : u64 0;
  let count : u64 load64 + @c Compile.ins_count;
  while < i count {
    // op : Op*
    let op cast ptr + + @c Compile.ins * sizeof Op i;
    let message cast cstr tmp_it;

    let num_digits : u64 digit_count(i);
    const num_zeros : u64 4;
    let j : u64 0;
    while < j - num_zeros num_digits {
      tmp_push_cstr("0");
      store64 @j + 1 j;
    }
    tmp_push_u64(i);
    tmp_push_cstr(": ");
    tmp_push_cstr("<");
    tmp_push_cstr(load64 + @ir_code_str * sizeof cstr load64 + op Op.i);
    tmp_push_cstr(", ");
    tmp_push_u64(load64 + op Op.dest);
    tmp_push_cstr(", ");
    tmp_push_u64(load64 + op Op.src0);
    tmp_push_cstr(", ");
    tmp_push_u64(load64 + op Op.src1);
    tmp_push_cstr(">\n");
    tmp_push_byte(0);

    puts(fd, message);
    store64 @tmp_it message;
    store64 @i + 1 i;
  }
}

fn ir_push_ins(op : ptr, ins_count : ptr) -> u64 {
  assert(0, "ir_push_ins(): not implemented yet\n");
  NoError;
}

fn ir_pop_ins(op : ptr, ins_count : ptr) -> u64 {
  assert(0, "ir_pop_ins(): not implemented yet\n");
  NoError;
}

fn ir_push_value(value : ptr, size : u64) -> u64 {
  let result : u64 NoError;
  let address : u64 load64 + @c Compile.imm_index;
  if < + address size MAX_STATIC_DATA {
    memcpy(+ + @c Compile.imm address, value, size);
    store64 + @c Compile.imm_index + load64 + @c Compile.imm_index size;
  }
  else {
    assert(0, "out of immediate data memory\n");
    store64 @result Error;
  }
  result;
}

fn ir_push_cstring(buffer : ptr, length : u64, index : ptr) -> u64 {
  assert(0, "ir_push_cstring(): not implemented yet\n");
  NoError;
}

fn ir_push_symbol(fs : ptr, symbol : ptr, id : u64, ins_count : ptr) -> u64 {
  assert(0, "ir_push_symbol(): not implemented yet\n");
  NoError;
}

fn ir_compile_stmts(block : ptr, fs : ptr, ast : ptr, ins_count : ptr) -> u64 {
  assert(0, "ir_compile_stmts(): not implemented yet\n");
  NoError;
}

fn ir_compile_func_args(block : ptr, fs : ptr, ast : ptr, ins_count : ptr) -> u64 {
  assert(0, "ir_compile_func_args(): not implemented yet\n");
  NoError;
}

fn ir_compile_binop(block : ptr, fs : ptr, ast : ptr, ins_count : ptr) -> u64 {
  assert(0, "ir_compile_binop(): not implemented yet\n");
  NoError;
}

fn ir_compile_uop(block : ptr, fs : ptr, ast : ptr, ins_count : ptr) -> u64 {
  assert(0, "ir_compile_uop(): not implemented yet\n");
  NoError;
}

fn ir_compile_func(block : ptr, fs : ptr, ast : ptr, ins_count : ptr) -> u64 {
  assert(0, "ir_compile_func(): not implemented yet\n");
  NoError;
}

fn ir_compile(block : ptr, fs : ptr, ast : ptr, ins_count : ptr) -> u64 {
  let type : u64 load64 + ast Ast.type;

  if eq type AstValue {
  }
  else if or or or
      eq type AstExpression
      eq type AstExprList
      eq type AstStatement
      eq type AstStatementList {
  }
  else if eq type AstBinopExpression {
  }
  else if eq type AstUopExpression {
  }
  else if eq type AstNone {
  }
  else if eq type AstConstStatement {
  }
  else if eq type AstLetStatement {
  }
  else if eq type AstFuncDefinition {
  }
  else if eq type AstParamList {
    assert(0, "something went very wrong\n");
  }
  else if eq type AstFuncCall {
  }
  else if eq type AstBlockStatement {
  }
  else if eq type AstMemoryStatement {
    // NOTE(lucas): this is handled in the type checking phase
  }
  else if eq type AstAssignment {
  }
  else if eq type AstWhileStatement {
  }
  else if eq type AstIfStatement {
  }
  else if eq type AstSizeof {
  }
  else if or or or
      eq type AstEnum
      eq type AstStruct
      eq type AstType
      eq type AstStaticAssert {
  }
  else if eq type AstCastExpression {
  }
  else {
    compile_error_at(+ ast Ast.token, "invalid or unhandled AST branch type\n");
  }
  load64 + @c Compile.status;
}

fn ir_start_compile(ast : ptr) -> u64 {
  let time_start : timespec 0;
  let time_end : timespec 0;
  { let _ clock_gettime(CLOCK_MONOTONIC, @time_start); }

  if neq load64 + @c Compile.entry_point 1 {
    compile_error("missing entry point `main`\n");
  }

  let block cast ptr + @c Compile.global;
  let i : u64 0;
  let count : u64 load64 + ast Ast.count;
  let done : u64 0;
  while and eq done 0 < i count {
    if neq ir_compile(block, NULL, cast ptr load64 + + ast Ast.node * sizeof ptr 0, NULL) NoError {
      store64 @done 1;
    }
    store64 @i + 1 i;
  }

  { let _ clock_gettime(CLOCK_MONOTONIC, @time_end); }

  let message cast cstr tmp_it;
  tmp_push_cstr("ir code generation took ");
  tmp_push_u64(- load64 + @time_end timespec.tv_sec load64 + @time_start timespec.tv_sec);
  tmp_push_cstr(".");
  tmp_push_u64(/ - load64 + @time_end timespec.tv_nsec load64 + @time_start timespec.tv_nsec TIME_NANOSECONDS_DENOM);
  tmp_push_cstr(" seconds\n");
  tmp_push_byte(0);
  print_info(message);
  store64 @tmp_it message;

  load64 + @c Compile.status;
}
